   Compiling liblevenshtein v0.3.0 (/home/dylon/Workspace/f1r3fly.io/liblevenshtein-rust)
warning: field `edge_arena` is never read
   --> src/dictionary/dawg_optimized.rs:116:5
    |
102 | pub struct OptimizedDawgBuilder {
    |            -------------------- field in this struct
...
116 |     edge_arena: Vec<(u8, u32)>,
    |     ^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: fields `free_list` and `rebuild_threshold` are never read
  --> src/dictionary/double_array_trie.rs:55:5
   |
44 | pub struct DoubleArrayTrie {
   |            --------------- fields in this struct
...
55 |     free_list: Arc<Vec<usize>>,
   |     ^^^^^^^^^
...
61 |     rebuild_threshold: f64,
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `DoubleArrayTrie` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis

warning: field `next_state` is never read
  --> src/dictionary/double_array_trie.rs:82:5
   |
65 | pub struct DoubleArrayTrieBuilder {
   |            ---------------------- field in this struct
...
82 |     next_state: usize,
   |     ^^^^^^^^^^

warning: field `needs_compaction` is never read
   --> src/dictionary/compressed_suffix_automaton.rs:146:5
    |
129 | struct CompressedSuffixAutomatonInner {
    |        ------------------------------ field in this struct
...
146 |     needs_compaction: bool,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `CompressedSuffixAutomatonInner` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: `liblevenshtein` (lib) generated 4 warnings
    Finished `bench` profile [optimized + debuginfo] target(s) in 1m 02s
     Running benches/backend_comparison.rs (target/release/deps/backend_comparison-99338687d45c462c)
Benchmarking construction/DoubleArrayTrie/10000
Benchmarking construction/DoubleArrayTrie/10000: Warming up for 3.0000 s
Benchmarking construction/DoubleArrayTrie/10000: Collecting 100 samples in estimated 5.1216 s (2000 iterations)
Benchmarking construction/DoubleArrayTrie/10000: Analyzing
construction/DoubleArrayTrie/10000
                        time:   [2.9846 ms 2.9942 ms 3.0043 ms]
                        change: [-7.8833% -7.1838% -6.5116%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild

Benchmarking exact_matching/DoubleArrayTrie
Benchmarking exact_matching/DoubleArrayTrie: Warming up for 3.0000 s
Benchmarking exact_matching/DoubleArrayTrie: Collecting 100 samples in estimated 5.0095 s (808k iterations)
Benchmarking exact_matching/DoubleArrayTrie: Analyzing
exact_matching/DoubleArrayTrie
                        time:   [6.5626 µs 6.5901 µs 6.6202 µs]
                        change: [-0.8913% +0.0425% +1.1379%] (p = 0.93 > 0.05)
                        No change in performance detected.
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe

Benchmarking distance_1_matching/DoubleArrayTrie
Benchmarking distance_1_matching/DoubleArrayTrie: Warming up for 3.0000 s
Benchmarking distance_1_matching/DoubleArrayTrie: Collecting 100 samples in estimated 5.0467 s (338k iterations)
Benchmarking distance_1_matching/DoubleArrayTrie: Analyzing
distance_1_matching/DoubleArrayTrie
                        time:   [13.751 µs 13.860 µs 13.988 µs]
                        change: [+6.0216% +7.0685% +8.1777%] (p = 0.00 < 0.05)
                        Performance has regressed.
Found 8 outliers among 100 measurements (8.00%)
  8 (8.00%) high mild

Benchmarking distance_2_matching/DoubleArrayTrie
Benchmarking distance_2_matching/DoubleArrayTrie: Warming up for 3.0000 s
Benchmarking distance_2_matching/DoubleArrayTrie: Collecting 100 samples in estimated 5.0155 s (247k iterations)
Benchmarking distance_2_matching/DoubleArrayTrie: Analyzing
distance_2_matching/DoubleArrayTrie
                        time:   [22.195 µs 22.401 µs 22.610 µs]
                        change: [+33.856% +35.417% +36.910%] (p = 0.00 < 0.05)
                        Performance has regressed.

Benchmarking contains_operation/DoubleArrayTrie
Benchmarking contains_operation/DoubleArrayTrie: Warming up for 3.0000 s
Benchmarking contains_operation/DoubleArrayTrie: Collecting 100 samples in estimated 5.0003 s (21M iterations)
Benchmarking contains_operation/DoubleArrayTrie: Analyzing
contains_operation/DoubleArrayTrie
                        time:   [230.49 ns 232.47 ns 234.67 ns]
                        change: [+2.8173% +3.8613% +4.8983%] (p = 0.00 < 0.05)
                        Performance has regressed.
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe

Benchmarking memory_estimate/DoubleArrayTrie_construction
Benchmarking memory_estimate/DoubleArrayTrie_construction: Warming up for 3.0000 s
Benchmarking memory_estimate/DoubleArrayTrie_construction: Collecting 100 samples in estimated 5.0865 s (1900 iterations)
Benchmarking memory_estimate/DoubleArrayTrie_construction: Analyzing
memory_estimate/DoubleArrayTrie_construction
                        time:   [2.6202 ms 2.6332 ms 2.6467 ms]
                        change: [-7.4435% -6.7895% -6.1915%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild

