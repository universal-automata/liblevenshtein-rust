<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="10458272804"><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (38,361,325 samples, 0.37%)</title><rect x="0.0000%" y="405" width="0.3668%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="38361325"/><text x="0.2500%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,077,968 samples, 0.06%)</title><rect x="0.7612%" y="389" width="0.0581%" height="15" fill="rgb(217,0,24)" fg:x="79608981" fg:w="6077968"/><text x="1.0112%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6,077,968 samples, 0.06%)</title><rect x="0.7612%" y="373" width="0.0581%" height="15" fill="rgb(221,193,54)" fg:x="79608981" fg:w="6077968"/><text x="1.0112%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (6,077,968 samples, 0.06%)</title><rect x="0.7612%" y="357" width="0.0581%" height="15" fill="rgb(248,212,6)" fg:x="79608981" fg:w="6077968"/><text x="1.0112%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,502,873 samples, 0.03%)</title><rect x="0.8193%" y="389" width="0.0335%" height="15" fill="rgb(208,68,35)" fg:x="85686949" fg:w="3502873"/><text x="1.0693%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3,502,873 samples, 0.03%)</title><rect x="0.8193%" y="373" width="0.0335%" height="15" fill="rgb(232,128,0)" fg:x="85686949" fg:w="3502873"/><text x="1.0693%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,502,873 samples, 0.03%)</title><rect x="0.8193%" y="357" width="0.0335%" height="15" fill="rgb(207,160,47)" fg:x="85686949" fg:w="3502873"/><text x="1.0693%" y="367.50"></text></g><g><title>fast_slice_utils::starts_with (9,947,176 samples, 0.10%)</title><rect x="0.9183%" y="325" width="0.0951%" height="15" fill="rgb(228,23,34)" fg:x="96039635" fg:w="9947176"/><text x="1.1683%" y="335.50"></text></g><g><title>fast_slice_utils::find_prefix_overlap (9,947,176 samples, 0.10%)</title><rect x="0.9183%" y="309" width="0.0951%" height="15" fill="rgb(218,30,26)" fg:x="96039635" fg:w="9947176"/><text x="1.1683%" y="319.50"></text></g><g><title>fast_slice_utils::count_shared_avx2 (9,947,176 samples, 0.10%)</title><rect x="0.9183%" y="293" width="0.0951%" height="15" fill="rgb(220,122,19)" fg:x="96039635" fg:w="9947176"/><text x="1.1683%" y="303.50"></text></g><g><title>core::core_arch::x86::bmi1::_tzcnt_u32 (3,474,092 samples, 0.03%)</title><rect x="0.9802%" y="277" width="0.0332%" height="15" fill="rgb(250,228,42)" fg:x="102512719" fg:w="3474092"/><text x="1.2302%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (3,474,092 samples, 0.03%)</title><rect x="0.9802%" y="261" width="0.0332%" height="15" fill="rgb(240,193,28)" fg:x="102512719" fg:w="3474092"/><text x="1.2302%" y="271.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_partial_key (16,456,473 samples, 0.16%)</title><rect x="0.8853%" y="357" width="0.1574%" height="15" fill="rgb(216,20,37)" fg:x="92582047" fg:w="16456473"/><text x="1.1353%" y="367.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_contains_partial_key (12,998,885 samples, 0.12%)</title><rect x="0.9183%" y="341" width="0.1243%" height="15" fill="rgb(206,188,39)" fg:x="96039635" fg:w="12998885"/><text x="1.1683%" y="351.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::get_both_keys (3,051,709 samples, 0.03%)</title><rect x="1.0134%" y="325" width="0.0292%" height="15" fill="rgb(217,207,13)" fg:x="105986811" fg:w="3051709"/><text x="1.2634%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,311,957 samples, 0.03%)</title><rect x="1.1358%" y="325" width="0.0317%" height="15" fill="rgb(231,73,38)" fg:x="118780782" fg:w="3311957"/><text x="1.3858%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,311,957 samples, 0.03%)</title><rect x="1.1358%" y="309" width="0.0317%" height="15" fill="rgb(225,20,46)" fg:x="118780782" fg:w="3311957"/><text x="1.3858%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3,311,957 samples, 0.03%)</title><rect x="1.1358%" y="293" width="0.0317%" height="15" fill="rgb(210,31,41)" fg:x="118780782" fg:w="3311957"/><text x="1.3858%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,311,957 samples, 0.03%)</title><rect x="1.1358%" y="277" width="0.0317%" height="15" fill="rgb(221,200,47)" fg:x="118780782" fg:w="3311957"/><text x="1.3858%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,311,957 samples, 0.03%)</title><rect x="1.1358%" y="261" width="0.0317%" height="15" fill="rgb(226,26,5)" fg:x="118780782" fg:w="3311957"/><text x="1.3858%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,311,957 samples, 0.03%)</title><rect x="1.1358%" y="245" width="0.0317%" height="15" fill="rgb(249,33,26)" fg:x="118780782" fg:w="3311957"/><text x="1.3858%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6,667,418 samples, 0.06%)</title><rect x="1.1358%" y="341" width="0.0638%" height="15" fill="rgb(235,183,28)" fg:x="118780782" fg:w="6667418"/><text x="1.3858%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,355,461 samples, 0.03%)</title><rect x="1.1674%" y="325" width="0.0321%" height="15" fill="rgb(221,5,38)" fg:x="122092739" fg:w="3355461"/><text x="1.4174%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,355,461 samples, 0.03%)</title><rect x="1.1674%" y="309" width="0.0321%" height="15" fill="rgb(247,18,42)" fg:x="122092739" fg:w="3355461"/><text x="1.4174%" y="319.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (59,357,271 samples, 0.57%)</title><rect x="0.8528%" y="389" width="0.5676%" height="15" fill="rgb(241,131,45)" fg:x="89189822" fg:w="59357271"/><text x="1.1028%" y="399.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (59,357,271 samples, 0.57%)</title><rect x="0.8528%" y="373" width="0.5676%" height="15" fill="rgb(249,31,29)" fg:x="89189822" fg:w="59357271"/><text x="1.1028%" y="383.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (39,508,573 samples, 0.38%)</title><rect x="1.0426%" y="357" width="0.3778%" height="15" fill="rgb(225,111,53)" fg:x="109038520" fg:w="39508573"/><text x="1.2926%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (23,098,893 samples, 0.22%)</title><rect x="1.1995%" y="341" width="0.2209%" height="15" fill="rgb(238,160,17)" fg:x="125448200" fg:w="23098893"/><text x="1.4495%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (23,098,893 samples, 0.22%)</title><rect x="1.1995%" y="325" width="0.2209%" height="15" fill="rgb(214,148,48)" fg:x="125448200" fg:w="23098893"/><text x="1.4495%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (9,680,252 samples, 0.09%)</title><rect x="1.6097%" y="341" width="0.0926%" height="15" fill="rgb(232,36,49)" fg:x="168350436" fg:w="9680252"/><text x="1.8597%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9,680,252 samples, 0.09%)</title><rect x="1.6097%" y="325" width="0.0926%" height="15" fill="rgb(209,103,24)" fg:x="168350436" fg:w="9680252"/><text x="1.8597%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9,680,252 samples, 0.09%)</title><rect x="1.6097%" y="309" width="0.0926%" height="15" fill="rgb(229,88,8)" fg:x="168350436" fg:w="9680252"/><text x="1.8597%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (9,680,252 samples, 0.09%)</title><rect x="1.6097%" y="293" width="0.0926%" height="15" fill="rgb(213,181,19)" fg:x="168350436" fg:w="9680252"/><text x="1.8597%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,120,925 samples, 0.03%)</title><rect x="1.7023%" y="341" width="0.0298%" height="15" fill="rgb(254,191,54)" fg:x="178030688" fg:w="3120925"/><text x="1.9523%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,120,925 samples, 0.03%)</title><rect x="1.7023%" y="325" width="0.0298%" height="15" fill="rgb(241,83,37)" fg:x="178030688" fg:w="3120925"/><text x="1.9523%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,120,925 samples, 0.03%)</title><rect x="1.7023%" y="309" width="0.0298%" height="15" fill="rgb(233,36,39)" fg:x="178030688" fg:w="3120925"/><text x="1.9523%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12,907,700 samples, 0.12%)</title><rect x="1.7321%" y="341" width="0.1234%" height="15" fill="rgb(226,3,54)" fg:x="181151613" fg:w="12907700"/><text x="1.9821%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (12,907,700 samples, 0.12%)</title><rect x="1.7321%" y="325" width="0.1234%" height="15" fill="rgb(245,192,40)" fg:x="181151613" fg:w="12907700"/><text x="1.9821%" y="335.50"></text></g><g><title>core::ptr::write (12,907,700 samples, 0.12%)</title><rect x="1.7321%" y="309" width="0.1234%" height="15" fill="rgb(238,167,29)" fg:x="181151613" fg:w="12907700"/><text x="1.9821%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (13,004,271 samples, 0.12%)</title><rect x="1.9872%" y="309" width="0.1243%" height="15" fill="rgb(232,182,51)" fg:x="207824873" fg:w="13004271"/><text x="2.2372%" y="319.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (6,493,034 samples, 0.06%)</title><rect x="2.0494%" y="293" width="0.0621%" height="15" fill="rgb(231,60,39)" fg:x="214336110" fg:w="6493034"/><text x="2.2994%" y="303.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (6,493,034 samples, 0.06%)</title><rect x="2.0494%" y="277" width="0.0621%" height="15" fill="rgb(208,69,12)" fg:x="214336110" fg:w="6493034"/><text x="2.2994%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (6,493,034 samples, 0.06%)</title><rect x="2.0494%" y="261" width="0.0621%" height="15" fill="rgb(235,93,37)" fg:x="214336110" fg:w="6493034"/><text x="2.2994%" y="271.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (16,073,702 samples, 0.15%)</title><rect x="2.1115%" y="293" width="0.1537%" height="15" fill="rgb(213,116,39)" fg:x="220829144" fg:w="16073702"/><text x="2.3615%" y="303.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (16,073,702 samples, 0.15%)</title><rect x="2.1115%" y="277" width="0.1537%" height="15" fill="rgb(222,207,29)" fg:x="220829144" fg:w="16073702"/><text x="2.3615%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9,169,670 samples, 0.09%)</title><rect x="2.2652%" y="293" width="0.0877%" height="15" fill="rgb(206,96,30)" fg:x="236902846" fg:w="9169670"/><text x="2.5152%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,169,670 samples, 0.09%)</title><rect x="2.2652%" y="277" width="0.0877%" height="15" fill="rgb(218,138,4)" fg:x="236902846" fg:w="9169670"/><text x="2.5152%" y="287.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (58,158,277 samples, 0.56%)</title><rect x="1.8556%" y="341" width="0.5561%" height="15" fill="rgb(250,191,14)" fg:x="194059313" fg:w="58158277"/><text x="2.1056%" y="351.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (51,270,071 samples, 0.49%)</title><rect x="1.9214%" y="325" width="0.4902%" height="15" fill="rgb(239,60,40)" fg:x="200947519" fg:w="51270071"/><text x="2.1714%" y="335.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (31,388,446 samples, 0.30%)</title><rect x="2.1115%" y="309" width="0.3001%" height="15" fill="rgb(206,27,48)" fg:x="220829144" fg:w="31388446"/><text x="2.3615%" y="319.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (6,145,074 samples, 0.06%)</title><rect x="2.3529%" y="293" width="0.0588%" height="15" fill="rgb(225,35,8)" fg:x="246072516" fg:w="6145074"/><text x="2.6029%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6,488,274 samples, 0.06%)</title><rect x="2.5016%" y="325" width="0.0620%" height="15" fill="rgb(250,213,24)" fg:x="261622351" fg:w="6488274"/><text x="2.7516%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (6,488,274 samples, 0.06%)</title><rect x="2.5016%" y="309" width="0.0620%" height="15" fill="rgb(247,123,22)" fg:x="261622351" fg:w="6488274"/><text x="2.7516%" y="319.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (122,736,834 samples, 1.17%)</title><rect x="1.4204%" y="389" width="1.1736%" height="15" fill="rgb(231,138,38)" fg:x="148547093" fg:w="122736834"/><text x="1.6704%" y="399.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (122,736,834 samples, 1.17%)</title><rect x="1.4204%" y="373" width="1.1736%" height="15" fill="rgb(231,145,46)" fg:x="148547093" fg:w="122736834"/><text x="1.6704%" y="383.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::descend_to_internal (122,736,834 samples, 1.17%)</title><rect x="1.4204%" y="357" width="1.1736%" height="15" fill="rgb(251,118,11)" fg:x="148547093" fg:w="122736834"/><text x="1.6704%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (19,066,337 samples, 0.18%)</title><rect x="2.4117%" y="341" width="0.1823%" height="15" fill="rgb(217,147,25)" fg:x="252217590" fg:w="19066337"/><text x="2.6617%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3,173,302 samples, 0.03%)</title><rect x="2.5636%" y="325" width="0.0303%" height="15" fill="rgb(247,81,37)" fg:x="268110625" fg:w="3173302"/><text x="2.8136%" y="335.50"></text></g><g><title>[libc.so.6] (57,609,613 samples, 0.55%)</title><rect x="2.6255%" y="261" width="0.5509%" height="15" fill="rgb(209,12,38)" fg:x="274582508" fg:w="57609613"/><text x="2.8755%" y="271.50"></text></g><g><title>[libc.so.6] (54,303,873 samples, 0.52%)</title><rect x="2.6571%" y="245" width="0.5192%" height="15" fill="rgb(227,1,9)" fg:x="277888248" fg:w="54303873"/><text x="2.9071%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (102,683,286 samples, 0.98%)</title><rect x="2.5940%" y="389" width="0.9818%" height="15" fill="rgb(248,47,43)" fg:x="271283927" fg:w="102683286"/><text x="2.8440%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (102,683,286 samples, 0.98%)</title><rect x="2.5940%" y="373" width="0.9818%" height="15" fill="rgb(221,10,30)" fg:x="271283927" fg:w="102683286"/><text x="2.8440%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (99,384,705 samples, 0.95%)</title><rect x="2.6255%" y="357" width="0.9503%" height="15" fill="rgb(210,229,1)" fg:x="274582508" fg:w="99384705"/><text x="2.8755%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99,384,705 samples, 0.95%)</title><rect x="2.6255%" y="341" width="0.9503%" height="15" fill="rgb(222,148,37)" fg:x="274582508" fg:w="99384705"/><text x="2.8755%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99,384,705 samples, 0.95%)</title><rect x="2.6255%" y="325" width="0.9503%" height="15" fill="rgb(234,67,33)" fg:x="274582508" fg:w="99384705"/><text x="2.8755%" y="335.50"></text></g><g><title>alloc::alloc::alloc (99,384,705 samples, 0.95%)</title><rect x="2.6255%" y="309" width="0.9503%" height="15" fill="rgb(247,98,35)" fg:x="274582508" fg:w="99384705"/><text x="2.8755%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (99,384,705 samples, 0.95%)</title><rect x="2.6255%" y="293" width="0.9503%" height="15" fill="rgb(247,138,52)" fg:x="274582508" fg:w="99384705"/><text x="2.8755%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (99,384,705 samples, 0.95%)</title><rect x="2.6255%" y="277" width="0.9503%" height="15" fill="rgb(213,79,30)" fg:x="274582508" fg:w="99384705"/><text x="2.8755%" y="287.50"></text></g><g><title>malloc (41,775,092 samples, 0.40%)</title><rect x="3.1764%" y="261" width="0.3994%" height="15" fill="rgb(246,177,23)" fg:x="332192121" fg:w="41775092"/><text x="3.4264%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (24,023,119 samples, 0.23%)</title><rect x="3.5758%" y="389" width="0.2297%" height="15" fill="rgb(230,62,27)" fg:x="373967213" fg:w="24023119"/><text x="3.8258%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (24,023,119 samples, 0.23%)</title><rect x="3.5758%" y="373" width="0.2297%" height="15" fill="rgb(216,154,8)" fg:x="373967213" fg:w="24023119"/><text x="3.8258%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (24,023,119 samples, 0.23%)</title><rect x="3.5758%" y="357" width="0.2297%" height="15" fill="rgb(244,35,45)" fg:x="373967213" fg:w="24023119"/><text x="3.8258%" y="367.50"></text></g><g><title>core::ptr::copy_nonoverlapping (24,023,119 samples, 0.23%)</title><rect x="3.5758%" y="341" width="0.2297%" height="15" fill="rgb(251,115,12)" fg:x="373967213" fg:w="24023119"/><text x="3.8258%" y="351.50"></text></g><g><title>[libc.so.6] (20,633,413 samples, 0.20%)</title><rect x="3.6082%" y="325" width="0.1973%" height="15" fill="rgb(240,54,50)" fg:x="377356919" fg:w="20633413"/><text x="3.8582%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (3,022,853 samples, 0.03%)</title><rect x="3.8055%" y="389" width="0.0289%" height="15" fill="rgb(233,84,52)" fg:x="397990332" fg:w="3022853"/><text x="4.0555%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,022,853 samples, 0.03%)</title><rect x="3.8055%" y="373" width="0.0289%" height="15" fill="rgb(207,117,47)" fg:x="397990332" fg:w="3022853"/><text x="4.0555%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,384,440 samples, 0.03%)</title><rect x="3.8344%" y="389" width="0.0324%" height="15" fill="rgb(249,43,39)" fg:x="401013185" fg:w="3384440"/><text x="4.0844%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (3,384,440 samples, 0.03%)</title><rect x="3.8344%" y="373" width="0.0324%" height="15" fill="rgb(209,38,44)" fg:x="401013185" fg:w="3384440"/><text x="4.0844%" y="383.50"></text></g><g><title>core::ptr::write (3,384,440 samples, 0.03%)</title><rect x="3.8344%" y="357" width="0.0324%" height="15" fill="rgb(236,212,23)" fg:x="401013185" fg:w="3384440"/><text x="4.0844%" y="367.50"></text></g><g><title>[libc.so.6] (94,275,727 samples, 0.90%)</title><rect x="3.9244%" y="229" width="0.9014%" height="15" fill="rgb(242,79,21)" fg:x="410421372" fg:w="94275727"/><text x="4.1744%" y="239.50"></text></g><g><title>[libc.so.6] (84,183,273 samples, 0.80%)</title><rect x="4.0209%" y="213" width="0.8049%" height="15" fill="rgb(211,96,35)" fg:x="420513826" fg:w="84183273"/><text x="4.2709%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="389" width="1.3296%" height="15" fill="rgb(253,215,40)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="373" width="1.3296%" height="15" fill="rgb(211,81,21)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="357" width="1.3296%" height="15" fill="rgb(208,190,38)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="341" width="1.3296%" height="15" fill="rgb(235,213,38)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="325" width="1.3296%" height="15" fill="rgb(237,122,38)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="309" width="1.3296%" height="15" fill="rgb(244,218,35)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="293" width="1.3296%" height="15" fill="rgb(240,68,47)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="303.50"></text></g><g><title>alloc::alloc::alloc (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="277" width="1.3296%" height="15" fill="rgb(210,16,53)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="261" width="1.3296%" height="15" fill="rgb(235,124,12)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (139,048,397 samples, 1.33%)</title><rect x="3.8668%" y="245" width="1.3296%" height="15" fill="rgb(224,169,11)" fg:x="404397625" fg:w="139048397"/><text x="4.1168%" y="255.50"></text></g><g><title>malloc (38,748,923 samples, 0.37%)</title><rect x="4.8258%" y="229" width="0.3705%" height="15" fill="rgb(250,166,2)" fg:x="504697099" fg:w="38748923"/><text x="5.0758%" y="239.50"></text></g><g><title>core::mem::drop (9,471,030 samples, 0.09%)</title><rect x="5.1963%" y="389" width="0.0906%" height="15" fill="rgb(242,216,29)" fg:x="543446022" fg:w="9471030"/><text x="5.4463%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt; (9,471,030 samples, 0.09%)</title><rect x="5.1963%" y="373" width="0.0906%" height="15" fill="rgb(230,116,27)" fg:x="543446022" fg:w="9471030"/><text x="5.4463%" y="383.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9,471,030 samples, 0.09%)</title><rect x="5.1963%" y="357" width="0.0906%" height="15" fill="rgb(228,99,48)" fg:x="543446022" fg:w="9471030"/><text x="5.4463%" y="367.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (9,471,030 samples, 0.09%)</title><rect x="5.1963%" y="341" width="0.0906%" height="15" fill="rgb(253,11,6)" fg:x="543446022" fg:w="9471030"/><text x="5.4463%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (9,471,030 samples, 0.09%)</title><rect x="5.1963%" y="325" width="0.0906%" height="15" fill="rgb(247,143,39)" fg:x="543446022" fg:w="9471030"/><text x="5.4463%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (9,471,030 samples, 0.09%)</title><rect x="5.1963%" y="309" width="0.0906%" height="15" fill="rgb(236,97,10)" fg:x="543446022" fg:w="9471030"/><text x="5.4463%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (41,147,522 samples, 0.39%)</title><rect x="5.2869%" y="389" width="0.3934%" height="15" fill="rgb(233,208,19)" fg:x="552917052" fg:w="41147522"/><text x="5.5369%" y="399.50"></text></g><g><title>cfree (34,879,845 samples, 0.33%)</title><rect x="5.3468%" y="373" width="0.3335%" height="15" fill="rgb(216,164,2)" fg:x="559184729" fg:w="34879845"/><text x="5.5968%" y="383.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (575,215,455 samples, 5.50%)</title><rect x="0.3668%" y="405" width="5.5001%" height="15" fill="rgb(220,129,5)" fg:x="38361325" fg:w="575215455"/><text x="0.6168%" y="415.50">&lt;liblev..</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (19,512,206 samples, 0.19%)</title><rect x="5.6803%" y="389" width="0.1866%" height="15" fill="rgb(242,17,10)" fg:x="594064574" fg:w="19512206"/><text x="5.9303%" y="399.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (19,512,206 samples, 0.19%)</title><rect x="5.6803%" y="373" width="0.1866%" height="15" fill="rgb(242,107,0)" fg:x="594064574" fg:w="19512206"/><text x="5.9303%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (16,336,300 samples, 0.16%)</title><rect x="5.7107%" y="357" width="0.1562%" height="15" fill="rgb(251,28,31)" fg:x="597240480" fg:w="16336300"/><text x="5.9607%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16,336,300 samples, 0.16%)</title><rect x="5.7107%" y="341" width="0.1562%" height="15" fill="rgb(233,223,10)" fg:x="597240480" fg:w="16336300"/><text x="5.9607%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13,220,228 samples, 0.13%)</title><rect x="6.0872%" y="373" width="0.1264%" height="15" fill="rgb(215,21,27)" fg:x="636611954" fg:w="13220228"/><text x="6.3372%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (13,220,228 samples, 0.13%)</title><rect x="6.0872%" y="357" width="0.1264%" height="15" fill="rgb(232,23,21)" fg:x="636611954" fg:w="13220228"/><text x="6.3372%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (13,220,228 samples, 0.13%)</title><rect x="6.0872%" y="341" width="0.1264%" height="15" fill="rgb(244,5,23)" fg:x="636611954" fg:w="13220228"/><text x="6.3372%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (9,808,155 samples, 0.09%)</title><rect x="6.2136%" y="309" width="0.0938%" height="15" fill="rgb(226,81,46)" fg:x="649832182" fg:w="9808155"/><text x="6.4636%" y="319.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (3,306,295 samples, 0.03%)</title><rect x="6.3683%" y="261" width="0.0316%" height="15" fill="rgb(247,70,30)" fg:x="666009203" fg:w="3306295"/><text x="6.6183%" y="271.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (3,306,295 samples, 0.03%)</title><rect x="6.3683%" y="245" width="0.0316%" height="15" fill="rgb(212,68,19)" fg:x="666009203" fg:w="3306295"/><text x="6.6183%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_val (16,367,869 samples, 0.16%)</title><rect x="6.3074%" y="309" width="0.1565%" height="15" fill="rgb(240,187,13)" fg:x="659640337" fg:w="16367869"/><text x="6.5574%" y="319.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_contains_val (13,138,813 samples, 0.13%)</title><rect x="6.3382%" y="293" width="0.1256%" height="15" fill="rgb(223,113,26)" fg:x="662869393" fg:w="13138813"/><text x="6.5882%" y="303.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (9,999,003 samples, 0.10%)</title><rect x="6.3683%" y="277" width="0.0956%" height="15" fill="rgb(206,192,2)" fg:x="666009203" fg:w="9999003"/><text x="6.6183%" y="287.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (6,692,708 samples, 0.06%)</title><rect x="6.3999%" y="261" width="0.0640%" height="15" fill="rgb(241,108,4)" fg:x="669315498" fg:w="6692708"/><text x="6.6499%" y="271.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (42,336,388 samples, 0.40%)</title><rect x="6.2136%" y="357" width="0.4048%" height="15" fill="rgb(247,173,49)" fg:x="649832182" fg:w="42336388"/><text x="6.4636%" y="367.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (42,336,388 samples, 0.40%)</title><rect x="6.2136%" y="341" width="0.4048%" height="15" fill="rgb(224,114,35)" fg:x="649832182" fg:w="42336388"/><text x="6.4636%" y="351.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::is_val_internal (42,336,388 samples, 0.40%)</title><rect x="6.2136%" y="325" width="0.4048%" height="15" fill="rgb(245,159,27)" fg:x="649832182" fg:w="42336388"/><text x="6.4636%" y="335.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (16,160,364 samples, 0.15%)</title><rect x="6.4639%" y="309" width="0.1545%" height="15" fill="rgb(245,172,44)" fg:x="676008206" fg:w="16160364"/><text x="6.7139%" y="319.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (12,827,948 samples, 0.12%)</title><rect x="6.4957%" y="293" width="0.1227%" height="15" fill="rgb(236,23,11)" fg:x="679340622" fg:w="12827948"/><text x="6.7457%" y="303.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final::{{closure}} (70,624,927 samples, 0.68%)</title><rect x="6.2136%" y="373" width="0.6753%" height="15" fill="rgb(205,117,38)" fg:x="649832182" fg:w="70624927"/><text x="6.4636%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (28,288,539 samples, 0.27%)</title><rect x="6.6184%" y="357" width="0.2705%" height="15" fill="rgb(237,72,25)" fg:x="692168570" fg:w="28288539"/><text x="6.8684%" y="367.50"></text></g><g><title>cfree (15,625,708 samples, 0.15%)</title><rect x="6.7395%" y="341" width="0.1494%" height="15" fill="rgb(244,70,9)" fg:x="704831401" fg:w="15625708"/><text x="6.9895%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (15,566,578 samples, 0.15%)</title><rect x="6.8889%" y="373" width="0.1488%" height="15" fill="rgb(217,125,39)" fg:x="720457109" fg:w="15566578"/><text x="7.1389%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (15,566,578 samples, 0.15%)</title><rect x="6.8889%" y="357" width="0.1488%" height="15" fill="rgb(235,36,10)" fg:x="720457109" fg:w="15566578"/><text x="7.1389%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (13,205,110 samples, 0.13%)</title><rect x="7.0377%" y="341" width="0.1263%" height="15" fill="rgb(251,123,47)" fg:x="736023687" fg:w="13205110"/><text x="7.2877%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (13,205,110 samples, 0.13%)</title><rect x="7.0377%" y="325" width="0.1263%" height="15" fill="rgb(221,13,13)" fg:x="736023687" fg:w="13205110"/><text x="7.2877%" y="335.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (139,017,454 samples, 1.33%)</title><rect x="5.8669%" y="405" width="1.3293%" height="15" fill="rgb(238,131,9)" fg:x="613576780" fg:w="139017454"/><text x="6.1169%" y="415.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (118,977,883 samples, 1.14%)</title><rect x="6.0585%" y="389" width="1.1376%" height="15" fill="rgb(211,50,8)" fg:x="633616351" fg:w="118977883"/><text x="6.3085%" y="399.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (16,570,547 samples, 0.16%)</title><rect x="7.0377%" y="373" width="0.1584%" height="15" fill="rgb(245,182,24)" fg:x="736023687" fg:w="16570547"/><text x="7.2877%" y="383.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (16,570,547 samples, 0.16%)</title><rect x="7.0377%" y="357" width="0.1584%" height="15" fill="rgb(242,14,37)" fg:x="736023687" fg:w="16570547"/><text x="7.2877%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (3,365,437 samples, 0.03%)</title><rect x="7.1640%" y="341" width="0.0322%" height="15" fill="rgb(246,228,12)" fg:x="749228797" fg:w="3365437"/><text x="7.4140%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (3,365,437 samples, 0.03%)</title><rect x="7.1640%" y="325" width="0.0322%" height="15" fill="rgb(213,55,15)" fg:x="749228797" fg:w="3365437"/><text x="7.4140%" y="335.50"></text></g><g><title>core::ptr::write (114,039,841 samples, 1.09%)</title><rect x="9.1710%" y="325" width="1.0904%" height="15" fill="rgb(209,9,3)" fg:x="959127027" fg:w="114039841"/><text x="9.4210%" y="335.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::ensure_root (3,189,539 samples, 0.03%)</title><rect x="10.2894%" y="309" width="0.0305%" height="15" fill="rgb(230,59,30)" fg:x="1076091360" fg:w="3189539"/><text x="10.5394%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3,189,539 samples, 0.03%)</title><rect x="10.2894%" y="293" width="0.0305%" height="15" fill="rgb(209,121,21)" fg:x="1076091360" fg:w="3189539"/><text x="10.5394%" y="303.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (6,655,019 samples, 0.06%)</title><rect x="10.3199%" y="261" width="0.0636%" height="15" fill="rgb(220,109,13)" fg:x="1079280899" fg:w="6655019"/><text x="10.5699%" y="271.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (6,655,019 samples, 0.06%)</title><rect x="10.3199%" y="245" width="0.0636%" height="15" fill="rgb(232,18,1)" fg:x="1079280899" fg:w="6655019"/><text x="10.5699%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (6,655,019 samples, 0.06%)</title><rect x="10.3199%" y="229" width="0.0636%" height="15" fill="rgb(215,41,42)" fg:x="1079280899" fg:w="6655019"/><text x="10.5699%" y="239.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (6,655,019 samples, 0.06%)</title><rect x="10.3199%" y="213" width="0.0636%" height="15" fill="rgb(224,123,36)" fg:x="1079280899" fg:w="6655019"/><text x="10.5699%" y="223.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (3,329,409 samples, 0.03%)</title><rect x="10.3517%" y="197" width="0.0318%" height="15" fill="rgb(240,125,3)" fg:x="1082606509" fg:w="3329409"/><text x="10.6017%" y="207.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (3,323,258 samples, 0.03%)</title><rect x="10.6607%" y="213" width="0.0318%" height="15" fill="rgb(205,98,50)" fg:x="1114921501" fg:w="3323258"/><text x="10.9107%" y="223.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (3,323,258 samples, 0.03%)</title><rect x="10.6607%" y="197" width="0.0318%" height="15" fill="rgb(205,185,37)" fg:x="1114921501" fg:w="3323258"/><text x="10.9107%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9,587,127 samples, 0.09%)</title><rect x="10.6924%" y="213" width="0.0917%" height="15" fill="rgb(238,207,15)" fg:x="1118244759" fg:w="9587127"/><text x="10.9424%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,587,127 samples, 0.09%)</title><rect x="10.6924%" y="197" width="0.0917%" height="15" fill="rgb(213,199,42)" fg:x="1118244759" fg:w="9587127"/><text x="10.9424%" y="207.50"></text></g><g><title>pathmap::zipper::node_along_path (58,290,975 samples, 0.56%)</title><rect x="10.3199%" y="277" width="0.5574%" height="15" fill="rgb(235,201,11)" fg:x="1079280899" fg:w="58290975"/><text x="10.5699%" y="287.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (51,635,956 samples, 0.49%)</title><rect x="10.3835%" y="261" width="0.4937%" height="15" fill="rgb(207,46,11)" fg:x="1085935918" fg:w="51635956"/><text x="10.6335%" y="271.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (45,151,541 samples, 0.43%)</title><rect x="10.4455%" y="245" width="0.4317%" height="15" fill="rgb(241,35,35)" fg:x="1092420333" fg:w="45151541"/><text x="10.6955%" y="255.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (45,151,541 samples, 0.43%)</title><rect x="10.4455%" y="229" width="0.4317%" height="15" fill="rgb(243,32,47)" fg:x="1092420333" fg:w="45151541"/><text x="10.6955%" y="239.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (9,739,988 samples, 0.09%)</title><rect x="10.7841%" y="213" width="0.0931%" height="15" fill="rgb(247,202,23)" fg:x="1127831886" fg:w="9739988"/><text x="11.0341%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (3,307,431 samples, 0.03%)</title><rect x="10.8456%" y="197" width="0.0316%" height="15" fill="rgb(219,102,11)" fg:x="1134264443" fg:w="3307431"/><text x="11.0956%" y="207.50"></text></g><g><title>&lt;T as core::clone::CloneToUninit&gt;::clone_to_uninit (197,745,070 samples, 1.89%)</title><rect x="9.0801%" y="357" width="1.8908%" height="15" fill="rgb(243,110,44)" fg:x="949623586" fg:w="197745070"/><text x="9.3301%" y="367.50">&lt;..</text></g><g><title>&lt;T as core::clone::uninit::CopySpec&gt;::clone_one (197,745,070 samples, 1.89%)</title><rect x="9.0801%" y="341" width="1.8908%" height="15" fill="rgb(222,74,54)" fg:x="949623586" fg:w="197745070"/><text x="9.3301%" y="351.50">&lt;..</text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (74,201,788 samples, 0.71%)</title><rect x="10.2614%" y="325" width="0.7095%" height="15" fill="rgb(216,99,12)" fg:x="1073166868" fg:w="74201788"/><text x="10.5114%" y="335.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (68,087,757 samples, 0.65%)</title><rect x="10.3199%" y="309" width="0.6510%" height="15" fill="rgb(226,22,26)" fg:x="1079280899" fg:w="68087757"/><text x="10.5699%" y="319.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (68,087,757 samples, 0.65%)</title><rect x="10.3199%" y="293" width="0.6510%" height="15" fill="rgb(217,163,10)" fg:x="1079280899" fg:w="68087757"/><text x="10.5699%" y="303.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (9,796,782 samples, 0.09%)</title><rect x="10.8772%" y="277" width="0.0937%" height="15" fill="rgb(213,25,53)" fg:x="1137571874" fg:w="9796782"/><text x="11.1272%" y="287.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (9,796,782 samples, 0.09%)</title><rect x="10.8772%" y="261" width="0.0937%" height="15" fill="rgb(252,105,26)" fg:x="1137571874" fg:w="9796782"/><text x="11.1272%" y="271.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (9,796,782 samples, 0.09%)</title><rect x="10.8772%" y="245" width="0.0937%" height="15" fill="rgb(220,39,43)" fg:x="1137571874" fg:w="9796782"/><text x="11.1272%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (9,796,782 samples, 0.09%)</title><rect x="10.8772%" y="229" width="0.0937%" height="15" fill="rgb(229,68,48)" fg:x="1137571874" fg:w="9796782"/><text x="11.1272%" y="239.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (3,440,089 samples, 0.03%)</title><rect x="10.9380%" y="213" width="0.0329%" height="15" fill="rgb(252,8,32)" fg:x="1143928567" fg:w="3440089"/><text x="11.1880%" y="223.50"></text></g><g><title>[libc.so.6] (209,334,581 samples, 2.00%)</title><rect x="11.0313%" y="245" width="2.0016%" height="15" fill="rgb(223,20,43)" fg:x="1153682410" fg:w="209334581"/><text x="11.2813%" y="255.50">[..</text></g><g><title>[libc.so.6] (166,945,076 samples, 1.60%)</title><rect x="11.4366%" y="229" width="1.5963%" height="15" fill="rgb(229,81,49)" fg:x="1196071915" fg:w="166945076"/><text x="11.6866%" y="239.50"></text></g><g><title>[libc.so.6] (3,039,424 samples, 0.03%)</title><rect x="13.0038%" y="213" width="0.0291%" height="15" fill="rgb(236,28,36)" fg:x="1359977567" fg:w="3039424"/><text x="13.2538%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (516,579,253 samples, 4.94%)</title><rect x="8.9574%" y="389" width="4.9394%" height="15" fill="rgb(249,185,26)" fg:x="936788858" fg:w="516579253"/><text x="9.2074%" y="399.50">&lt;core:..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (503,744,525 samples, 4.82%)</title><rect x="9.0801%" y="373" width="4.8167%" height="15" fill="rgb(249,174,33)" fg:x="949623586" fg:w="503744525"/><text x="9.3301%" y="383.50">&lt;alloc..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (305,999,455 samples, 2.93%)</title><rect x="10.9709%" y="357" width="2.9259%" height="15" fill="rgb(233,201,37)" fg:x="1147368656" fg:w="305999455"/><text x="11.2209%" y="367.50">al..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (299,685,701 samples, 2.87%)</title><rect x="11.0313%" y="341" width="2.8655%" height="15" fill="rgb(221,78,26)" fg:x="1153682410" fg:w="299685701"/><text x="11.2813%" y="351.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (299,685,701 samples, 2.87%)</title><rect x="11.0313%" y="325" width="2.8655%" height="15" fill="rgb(250,127,30)" fg:x="1153682410" fg:w="299685701"/><text x="11.2813%" y="335.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (299,685,701 samples, 2.87%)</title><rect x="11.0313%" y="309" width="2.8655%" height="15" fill="rgb(230,49,44)" fg:x="1153682410" fg:w="299685701"/><text x="11.2813%" y="319.50">al..</text></g><g><title>alloc::alloc::alloc (299,685,701 samples, 2.87%)</title><rect x="11.0313%" y="293" width="2.8655%" height="15" fill="rgb(229,67,23)" fg:x="1153682410" fg:w="299685701"/><text x="11.2813%" y="303.50">al..</text></g><g><title>__rustc::__rdl_alloc (299,685,701 samples, 2.87%)</title><rect x="11.0313%" y="277" width="2.8655%" height="15" fill="rgb(249,83,47)" fg:x="1153682410" fg:w="299685701"/><text x="11.2813%" y="287.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (299,685,701 samples, 2.87%)</title><rect x="11.0313%" y="261" width="2.8655%" height="15" fill="rgb(215,43,3)" fg:x="1153682410" fg:w="299685701"/><text x="11.2813%" y="271.50">st..</text></g><g><title>malloc (90,351,120 samples, 0.86%)</title><rect x="13.0329%" y="245" width="0.8639%" height="15" fill="rgb(238,154,13)" fg:x="1363016991" fg:w="90351120"/><text x="13.2829%" y="255.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (115,382,619 samples, 1.10%)</title><rect x="13.8968%" y="389" width="1.1033%" height="15" fill="rgb(219,56,2)" fg:x="1453368111" fg:w="115382619"/><text x="14.1468%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (115,382,619 samples, 1.10%)</title><rect x="13.8968%" y="373" width="1.1033%" height="15" fill="rgb(233,0,4)" fg:x="1453368111" fg:w="115382619"/><text x="14.1468%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (112,565,787 samples, 1.08%)</title><rect x="13.9238%" y="357" width="1.0763%" height="15" fill="rgb(235,30,7)" fg:x="1456184943" fg:w="112565787"/><text x="14.1738%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (112,565,787 samples, 1.08%)</title><rect x="13.9238%" y="341" width="1.0763%" height="15" fill="rgb(250,79,13)" fg:x="1456184943" fg:w="112565787"/><text x="14.1738%" y="351.50"></text></g><g><title>[libc.so.6] (433,743,169 samples, 4.15%)</title><rect x="15.6751%" y="181" width="4.1474%" height="15" fill="rgb(211,146,34)" fg:x="1639346133" fg:w="433743169"/><text x="15.9251%" y="191.50">[libc..</text></g><g><title>[libc.so.6] (391,263,421 samples, 3.74%)</title><rect x="16.0813%" y="165" width="3.7412%" height="15" fill="rgb(228,22,38)" fg:x="1681825881" fg:w="391263421"/><text x="16.3313%" y="175.50">[lib..</text></g><g><title>[libc.so.6] (15,839,946 samples, 0.15%)</title><rect x="19.6710%" y="149" width="0.1515%" height="15" fill="rgb(235,168,5)" fg:x="2057249356" fg:w="15839946"/><text x="19.9210%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (742,218,781 samples, 7.10%)</title><rect x="15.0634%" y="261" width="7.0970%" height="15" fill="rgb(221,155,16)" fg:x="1575370483" fg:w="742218781"/><text x="15.3134%" y="271.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (742,218,781 samples, 7.10%)</title><rect x="15.0634%" y="245" width="7.0970%" height="15" fill="rgb(215,215,53)" fg:x="1575370483" fg:w="742218781"/><text x="15.3134%" y="255.50">alloc::all..</text></g><g><title>alloc::alloc::alloc (742,218,781 samples, 7.10%)</title><rect x="15.0634%" y="229" width="7.0970%" height="15" fill="rgb(223,4,10)" fg:x="1575370483" fg:w="742218781"/><text x="15.3134%" y="239.50">alloc::all..</text></g><g><title>__rustc::__rdl_alloc (742,218,781 samples, 7.10%)</title><rect x="15.0634%" y="213" width="7.0970%" height="15" fill="rgb(234,103,6)" fg:x="1575370483" fg:w="742218781"/><text x="15.3134%" y="223.50">__rustc::_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (742,218,781 samples, 7.10%)</title><rect x="15.0634%" y="197" width="7.0970%" height="15" fill="rgb(227,97,0)" fg:x="1575370483" fg:w="742218781"/><text x="15.3134%" y="207.50">std::sys::..</text></g><g><title>malloc (244,499,962 samples, 2.34%)</title><rect x="19.8225%" y="181" width="2.3379%" height="15" fill="rgb(234,150,53)" fg:x="2073089302" fg:w="244499962"/><text x="20.0725%" y="191.50">m..</text></g><g><title>core::intrinsics::unlikely (35,557,165 samples, 0.34%)</title><rect x="22.1603%" y="197" width="0.3400%" height="15" fill="rgb(228,201,54)" fg:x="2317589264" fg:w="35557165"/><text x="22.4103%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (823,003,179 samples, 7.87%)</title><rect x="15.0634%" y="325" width="7.8694%" height="15" fill="rgb(222,22,37)" fg:x="1575370483" fg:w="823003179"/><text x="15.3134%" y="335.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (823,003,179 samples, 7.87%)</title><rect x="15.0634%" y="309" width="7.8694%" height="15" fill="rgb(237,53,32)" fg:x="1575370483" fg:w="823003179"/><text x="15.3134%" y="319.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (823,003,179 samples, 7.87%)</title><rect x="15.0634%" y="293" width="7.8694%" height="15" fill="rgb(233,25,53)" fg:x="1575370483" fg:w="823003179"/><text x="15.3134%" y="303.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (823,003,179 samples, 7.87%)</title><rect x="15.0634%" y="277" width="7.8694%" height="15" fill="rgb(210,40,34)" fg:x="1575370483" fg:w="823003179"/><text x="15.3134%" y="287.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::layout_array (80,784,398 samples, 0.77%)</title><rect x="22.1603%" y="261" width="0.7724%" height="15" fill="rgb(241,220,44)" fg:x="2317589264" fg:w="80784398"/><text x="22.4103%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::repeat (80,784,398 samples, 0.77%)</title><rect x="22.1603%" y="245" width="0.7724%" height="15" fill="rgb(235,28,35)" fg:x="2317589264" fg:w="80784398"/><text x="22.4103%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (80,784,398 samples, 0.77%)</title><rect x="22.1603%" y="229" width="0.7724%" height="15" fill="rgb(210,56,17)" fg:x="2317589264" fg:w="80784398"/><text x="22.4103%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (80,784,398 samples, 0.77%)</title><rect x="22.1603%" y="213" width="0.7724%" height="15" fill="rgb(224,130,29)" fg:x="2317589264" fg:w="80784398"/><text x="22.4103%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (45,227,233 samples, 0.43%)</title><rect x="22.5003%" y="197" width="0.4325%" height="15" fill="rgb(235,212,8)" fg:x="2353146429" fg:w="45227233"/><text x="22.7503%" y="207.50"></text></g><g><title>&lt;liblevenshtein::transducer::intersection::Intersection&lt;N&gt; as core::clone::Clone&gt;::clone (1,801,597,740 samples, 17.23%)</title><rect x="7.1962%" y="405" width="17.2265%" height="15" fill="rgb(223,33,50)" fg:x="752594234" fg:w="1801597740"/><text x="7.4462%" y="415.50">&lt;liblevenshtein::transducer..</text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (985,441,244 samples, 9.42%)</title><rect x="15.0001%" y="389" width="9.4226%" height="15" fill="rgb(219,149,13)" fg:x="1568750730" fg:w="985441244"/><text x="15.2501%" y="399.50">&lt;liblevenshte..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (985,441,244 samples, 9.42%)</title><rect x="15.0001%" y="373" width="9.4226%" height="15" fill="rgb(250,156,29)" fg:x="1568750730" fg:w="985441244"/><text x="15.2501%" y="383.50">&lt;alloc::vec::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (985,441,244 samples, 9.42%)</title><rect x="15.0001%" y="357" width="9.4226%" height="15" fill="rgb(216,193,19)" fg:x="1568750730" fg:w="985441244"/><text x="15.2501%" y="367.50">alloc::slice:..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (985,441,244 samples, 9.42%)</title><rect x="15.0001%" y="341" width="9.4226%" height="15" fill="rgb(216,135,14)" fg:x="1568750730" fg:w="985441244"/><text x="15.2501%" y="351.50">&lt;T as alloc::..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (155,818,312 samples, 1.49%)</title><rect x="22.9328%" y="325" width="1.4899%" height="15" fill="rgb(241,47,5)" fg:x="2398373662" fg:w="155818312"/><text x="23.1828%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (155,818,312 samples, 1.49%)</title><rect x="22.9328%" y="309" width="1.4899%" height="15" fill="rgb(233,42,35)" fg:x="2398373662" fg:w="155818312"/><text x="23.1828%" y="319.50"></text></g><g><title>[libc.so.6] (129,279,851 samples, 1.24%)</title><rect x="23.1865%" y="293" width="1.2361%" height="15" fill="rgb(231,13,6)" fg:x="2424912123" fg:w="129279851"/><text x="23.4365%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (12,671,263 samples, 0.12%)</title><rect x="24.5413%" y="373" width="0.1212%" height="15" fill="rgb(207,181,40)" fg:x="2566591873" fg:w="12671263"/><text x="24.7913%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (9,516,665 samples, 0.09%)</title><rect x="24.5714%" y="357" width="0.0910%" height="15" fill="rgb(254,173,49)" fg:x="2569746471" fg:w="9516665"/><text x="24.8214%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (9,516,665 samples, 0.09%)</title><rect x="24.5714%" y="341" width="0.0910%" height="15" fill="rgb(221,1,38)" fg:x="2569746471" fg:w="9516665"/><text x="24.8214%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (9,516,665 samples, 0.09%)</title><rect x="24.5714%" y="325" width="0.0910%" height="15" fill="rgb(206,124,46)" fg:x="2569746471" fg:w="9516665"/><text x="24.8214%" y="335.50"></text></g><g><title>[libc.so.6] (6,447,103 samples, 0.06%)</title><rect x="24.7619%" y="277" width="0.0616%" height="15" fill="rgb(249,21,11)" fg:x="2589663819" fg:w="6447103"/><text x="25.0119%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,345,512 samples, 0.18%)</title><rect x="24.7285%" y="357" width="0.1850%" height="15" fill="rgb(222,201,40)" fg:x="2586176908" fg:w="19345512"/><text x="24.9785%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19,345,512 samples, 0.18%)</title><rect x="24.7285%" y="341" width="0.1850%" height="15" fill="rgb(235,61,29)" fg:x="2586176908" fg:w="19345512"/><text x="24.9785%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (19,345,512 samples, 0.18%)</title><rect x="24.7285%" y="325" width="0.1850%" height="15" fill="rgb(219,207,3)" fg:x="2586176908" fg:w="19345512"/><text x="24.9785%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (19,345,512 samples, 0.18%)</title><rect x="24.7285%" y="309" width="0.1850%" height="15" fill="rgb(222,56,46)" fg:x="2586176908" fg:w="19345512"/><text x="24.9785%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (19,345,512 samples, 0.18%)</title><rect x="24.7285%" y="293" width="0.1850%" height="15" fill="rgb(239,76,54)" fg:x="2586176908" fg:w="19345512"/><text x="24.9785%" y="303.50"></text></g><g><title>cfree (9,411,498 samples, 0.09%)</title><rect x="24.8235%" y="277" width="0.0900%" height="15" fill="rgb(231,124,27)" fg:x="2596110922" fg:w="9411498"/><text x="25.0735%" y="287.50"></text></g><g><title>[libc.so.6] (9,742,269 samples, 0.09%)</title><rect x="24.9135%" y="357" width="0.0932%" height="15" fill="rgb(249,195,6)" fg:x="2605522420" fg:w="9742269"/><text x="25.1635%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (58,562,043 samples, 0.56%)</title><rect x="24.6624%" y="373" width="0.5600%" height="15" fill="rgb(237,174,47)" fg:x="2579263136" fg:w="58562043"/><text x="24.9124%" y="383.50"></text></g><g><title>cfree (22,560,490 samples, 0.22%)</title><rect x="25.0067%" y="357" width="0.2157%" height="15" fill="rgb(206,201,31)" fg:x="2615264689" fg:w="22560490"/><text x="25.2567%" y="367.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::is_final (6,502,673 samples, 0.06%)</title><rect x="25.2224%" y="373" width="0.0622%" height="15" fill="rgb(231,57,52)" fg:x="2637825179" fg:w="6502673"/><text x="25.4724%" y="383.50"></text></g><g><title>[libc.so.6] (3,376,819 samples, 0.03%)</title><rect x="25.3442%" y="149" width="0.0323%" height="15" fill="rgb(248,177,22)" fg:x="2650564047" fg:w="3376819"/><text x="25.5942%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16,101,981 samples, 0.15%)</title><rect x="25.3442%" y="261" width="0.1540%" height="15" fill="rgb(215,211,37)" fg:x="2650564047" fg:w="16101981"/><text x="25.5942%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16,101,981 samples, 0.15%)</title><rect x="25.3442%" y="245" width="0.1540%" height="15" fill="rgb(241,128,51)" fg:x="2650564047" fg:w="16101981"/><text x="25.5942%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (16,101,981 samples, 0.15%)</title><rect x="25.3442%" y="229" width="0.1540%" height="15" fill="rgb(227,165,31)" fg:x="2650564047" fg:w="16101981"/><text x="25.5942%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (16,101,981 samples, 0.15%)</title><rect x="25.3442%" y="213" width="0.1540%" height="15" fill="rgb(228,167,24)" fg:x="2650564047" fg:w="16101981"/><text x="25.5942%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16,101,981 samples, 0.15%)</title><rect x="25.3442%" y="197" width="0.1540%" height="15" fill="rgb(228,143,12)" fg:x="2650564047" fg:w="16101981"/><text x="25.5942%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16,101,981 samples, 0.15%)</title><rect x="25.3442%" y="181" width="0.1540%" height="15" fill="rgb(249,149,8)" fg:x="2650564047" fg:w="16101981"/><text x="25.5942%" y="191.50"></text></g><g><title>alloc::alloc::alloc (16,101,981 samples, 0.15%)</title><rect x="25.3442%" y="165" width="0.1540%" height="15" fill="rgb(243,35,44)" fg:x="2650564047" fg:w="16101981"/><text x="25.5942%" y="175.50"></text></g><g><title>malloc (12,725,162 samples, 0.12%)</title><rect x="25.3765%" y="149" width="0.1217%" height="15" fill="rgb(246,89,9)" fg:x="2653940866" fg:w="12725162"/><text x="25.6265%" y="159.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (25,631,003 samples, 0.25%)</title><rect x="25.2846%" y="357" width="0.2451%" height="15" fill="rgb(233,213,13)" fg:x="2644327852" fg:w="25631003"/><text x="25.5346%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (19,394,808 samples, 0.19%)</title><rect x="25.3442%" y="341" width="0.1854%" height="15" fill="rgb(233,141,41)" fg:x="2650564047" fg:w="19394808"/><text x="25.5942%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (19,394,808 samples, 0.19%)</title><rect x="25.3442%" y="325" width="0.1854%" height="15" fill="rgb(239,167,4)" fg:x="2650564047" fg:w="19394808"/><text x="25.5942%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (19,394,808 samples, 0.19%)</title><rect x="25.3442%" y="309" width="0.1854%" height="15" fill="rgb(209,217,16)" fg:x="2650564047" fg:w="19394808"/><text x="25.5942%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19,394,808 samples, 0.19%)</title><rect x="25.3442%" y="293" width="0.1854%" height="15" fill="rgb(219,88,35)" fg:x="2650564047" fg:w="19394808"/><text x="25.5942%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (19,394,808 samples, 0.19%)</title><rect x="25.3442%" y="277" width="0.1854%" height="15" fill="rgb(220,193,23)" fg:x="2650564047" fg:w="19394808"/><text x="25.5942%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,292,827 samples, 0.03%)</title><rect x="25.4981%" y="261" width="0.0315%" height="15" fill="rgb(230,90,52)" fg:x="2666666028" fg:w="3292827"/><text x="25.7481%" y="271.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,292,827 samples, 0.03%)</title><rect x="25.4981%" y="245" width="0.0315%" height="15" fill="rgb(252,106,19)" fg:x="2666666028" fg:w="3292827"/><text x="25.7481%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (6,130,578 samples, 0.06%)</title><rect x="25.5296%" y="357" width="0.0586%" height="15" fill="rgb(206,74,20)" fg:x="2669958855" fg:w="6130578"/><text x="25.7796%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="357" width="0.1201%" height="15" fill="rgb(230,138,44)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="341" width="0.1201%" height="15" fill="rgb(235,182,43)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="325" width="0.1201%" height="15" fill="rgb(242,16,51)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="309" width="0.1201%" height="15" fill="rgb(248,9,4)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="293" width="0.1201%" height="15" fill="rgb(210,31,22)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="277" width="0.1201%" height="15" fill="rgb(239,54,39)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="287.50"></text></g><g><title>__rustc::__rdl_dealloc (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="261" width="0.1201%" height="15" fill="rgb(230,99,41)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="245" width="0.1201%" height="15" fill="rgb(253,106,12)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="255.50"></text></g><g><title>cfree (12,561,327 samples, 0.12%)</title><rect x="25.5883%" y="229" width="0.1201%" height="15" fill="rgb(213,46,41)" fg:x="2676089433" fg:w="12561327"/><text x="25.8383%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (9,860,478 samples, 0.09%)</title><rect x="25.7084%" y="357" width="0.0943%" height="15" fill="rgb(215,133,35)" fg:x="2688650760" fg:w="9860478"/><text x="25.9584%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (9,860,478 samples, 0.09%)</title><rect x="25.7084%" y="341" width="0.0943%" height="15" fill="rgb(213,28,5)" fg:x="2688650760" fg:w="9860478"/><text x="25.9584%" y="351.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::term (182,041,050 samples, 1.74%)</title><rect x="25.2846%" y="373" width="1.7406%" height="15" fill="rgb(215,77,49)" fg:x="2644327852" fg:w="182041050"/><text x="25.5346%" y="383.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::collect_path (127,857,664 samples, 1.22%)</title><rect x="25.8026%" y="357" width="1.2226%" height="15" fill="rgb(248,100,22)" fg:x="2698511238" fg:w="127857664"/><text x="26.0526%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21,917,458 samples, 0.21%)</title><rect x="26.8156%" y="341" width="0.2096%" height="15" fill="rgb(208,67,9)" fg:x="2804451444" fg:w="21917458"/><text x="27.0656%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (21,917,458 samples, 0.21%)</title><rect x="26.8156%" y="325" width="0.2096%" height="15" fill="rgb(219,133,21)" fg:x="2804451444" fg:w="21917458"/><text x="27.0656%" y="335.50"></text></g><g><title>core::ptr::write (12,543,295 samples, 0.12%)</title><rect x="26.9053%" y="309" width="0.1199%" height="15" fill="rgb(246,46,29)" fg:x="2813825607" fg:w="12543295"/><text x="27.1553%" y="319.50"></text></g><g><title>&lt;T as core::clone::CloneToUninit&gt;::clone_to_uninit (16,357,092 samples, 0.16%)</title><rect x="27.1501%" y="325" width="0.1564%" height="15" fill="rgb(246,185,52)" fg:x="2839426742" fg:w="16357092"/><text x="27.4001%" y="335.50"></text></g><g><title>&lt;T as core::clone::uninit::CopySpec&gt;::clone_one (16,357,092 samples, 0.16%)</title><rect x="27.1501%" y="309" width="0.1564%" height="15" fill="rgb(252,136,11)" fg:x="2839426742" fg:w="16357092"/><text x="27.4001%" y="319.50"></text></g><g><title>core::ptr::write (16,357,092 samples, 0.16%)</title><rect x="27.1501%" y="293" width="0.1564%" height="15" fill="rgb(219,138,53)" fg:x="2839426742" fg:w="16357092"/><text x="27.4001%" y="303.50"></text></g><g><title>[libc.so.6] (38,927,326 samples, 0.37%)</title><rect x="27.3065%" y="213" width="0.3722%" height="15" fill="rgb(211,51,23)" fg:x="2855783834" fg:w="38927326"/><text x="27.5565%" y="223.50"></text></g><g><title>[libc.so.6] (35,936,012 samples, 0.34%)</title><rect x="27.3351%" y="197" width="0.3436%" height="15" fill="rgb(247,221,28)" fg:x="2858775148" fg:w="35936012"/><text x="27.5851%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (71,310,710 samples, 0.68%)</title><rect x="27.1501%" y="357" width="0.6819%" height="15" fill="rgb(251,222,45)" fg:x="2839426742" fg:w="71310710"/><text x="27.4001%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (71,310,710 samples, 0.68%)</title><rect x="27.1501%" y="341" width="0.6819%" height="15" fill="rgb(217,162,53)" fg:x="2839426742" fg:w="71310710"/><text x="27.4001%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (54,953,618 samples, 0.53%)</title><rect x="27.3065%" y="325" width="0.5255%" height="15" fill="rgb(229,93,14)" fg:x="2855783834" fg:w="54953618"/><text x="27.5565%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (54,953,618 samples, 0.53%)</title><rect x="27.3065%" y="309" width="0.5255%" height="15" fill="rgb(209,67,49)" fg:x="2855783834" fg:w="54953618"/><text x="27.5565%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54,953,618 samples, 0.53%)</title><rect x="27.3065%" y="293" width="0.5255%" height="15" fill="rgb(213,87,29)" fg:x="2855783834" fg:w="54953618"/><text x="27.5565%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54,953,618 samples, 0.53%)</title><rect x="27.3065%" y="277" width="0.5255%" height="15" fill="rgb(205,151,52)" fg:x="2855783834" fg:w="54953618"/><text x="27.5565%" y="287.50"></text></g><g><title>alloc::alloc::alloc (54,953,618 samples, 0.53%)</title><rect x="27.3065%" y="261" width="0.5255%" height="15" fill="rgb(253,215,39)" fg:x="2855783834" fg:w="54953618"/><text x="27.5565%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (54,953,618 samples, 0.53%)</title><rect x="27.3065%" y="245" width="0.5255%" height="15" fill="rgb(221,220,41)" fg:x="2855783834" fg:w="54953618"/><text x="27.5565%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (54,953,618 samples, 0.53%)</title><rect x="27.3065%" y="229" width="0.5255%" height="15" fill="rgb(218,133,21)" fg:x="2855783834" fg:w="54953618"/><text x="27.5565%" y="239.50"></text></g><g><title>malloc (16,026,292 samples, 0.15%)</title><rect x="27.6787%" y="213" width="0.1532%" height="15" fill="rgb(221,193,43)" fg:x="2894711160" fg:w="16026292"/><text x="27.9287%" y="223.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (3,273,627 samples, 0.03%)</title><rect x="27.8319%" y="357" width="0.0313%" height="15" fill="rgb(240,128,52)" fg:x="2910737452" fg:w="3273627"/><text x="28.0819%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,273,627 samples, 0.03%)</title><rect x="27.8319%" y="341" width="0.0313%" height="15" fill="rgb(253,114,12)" fg:x="2910737452" fg:w="3273627"/><text x="28.0819%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3,273,627 samples, 0.03%)</title><rect x="27.8319%" y="325" width="0.0313%" height="15" fill="rgb(215,223,47)" fg:x="2910737452" fg:w="3273627"/><text x="28.0819%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (3,273,627 samples, 0.03%)</title><rect x="27.8319%" y="309" width="0.0313%" height="15" fill="rgb(248,225,23)" fg:x="2910737452" fg:w="3273627"/><text x="28.0819%" y="319.50"></text></g><g><title>[libc.so.6] (74,779,188 samples, 0.72%)</title><rect x="27.9832%" y="149" width="0.7150%" height="15" fill="rgb(250,108,0)" fg:x="2926562467" fg:w="74779188"/><text x="28.2332%" y="159.50"></text></g><g><title>[libc.so.6] (64,889,450 samples, 0.62%)</title><rect x="28.0778%" y="133" width="0.6205%" height="15" fill="rgb(228,208,7)" fg:x="2936452205" fg:w="64889450"/><text x="28.3278%" y="143.50"></text></g><g><title>[libc.so.6] (3,387,350 samples, 0.03%)</title><rect x="28.6659%" y="117" width="0.0324%" height="15" fill="rgb(244,45,10)" fg:x="2997954305" fg:w="3387350"/><text x="28.9159%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (106,525,709 samples, 1.02%)</title><rect x="27.8940%" y="229" width="1.0186%" height="15" fill="rgb(207,125,25)" fg:x="2917233749" fg:w="106525709"/><text x="28.1440%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (106,525,709 samples, 1.02%)</title><rect x="27.8940%" y="213" width="1.0186%" height="15" fill="rgb(210,195,18)" fg:x="2917233749" fg:w="106525709"/><text x="28.1440%" y="223.50"></text></g><g><title>alloc::alloc::alloc (106,525,709 samples, 1.02%)</title><rect x="27.8940%" y="197" width="1.0186%" height="15" fill="rgb(249,80,12)" fg:x="2917233749" fg:w="106525709"/><text x="28.1440%" y="207.50"></text></g><g><title>__rustc::__rdl_alloc (106,525,709 samples, 1.02%)</title><rect x="27.8940%" y="181" width="1.0186%" height="15" fill="rgb(221,65,9)" fg:x="2917233749" fg:w="106525709"/><text x="28.1440%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (106,525,709 samples, 1.02%)</title><rect x="27.8940%" y="165" width="1.0186%" height="15" fill="rgb(235,49,36)" fg:x="2917233749" fg:w="106525709"/><text x="28.1440%" y="175.50"></text></g><g><title>malloc (22,417,803 samples, 0.21%)</title><rect x="28.6983%" y="149" width="0.2144%" height="15" fill="rgb(225,32,20)" fg:x="3001341655" fg:w="22417803"/><text x="28.9483%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (123,009,992 samples, 1.18%)</title><rect x="27.8940%" y="293" width="1.1762%" height="15" fill="rgb(215,141,46)" fg:x="2917233749" fg:w="123009992"/><text x="28.1440%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123,009,992 samples, 1.18%)</title><rect x="27.8940%" y="277" width="1.1762%" height="15" fill="rgb(250,160,47)" fg:x="2917233749" fg:w="123009992"/><text x="28.1440%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (123,009,992 samples, 1.18%)</title><rect x="27.8940%" y="261" width="1.1762%" height="15" fill="rgb(216,222,40)" fg:x="2917233749" fg:w="123009992"/><text x="28.1440%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (123,009,992 samples, 1.18%)</title><rect x="27.8940%" y="245" width="1.1762%" height="15" fill="rgb(234,217,39)" fg:x="2917233749" fg:w="123009992"/><text x="28.1440%" y="255.50"></text></g><g><title>alloc::raw_vec::layout_array (16,484,283 samples, 0.16%)</title><rect x="28.9126%" y="229" width="0.1576%" height="15" fill="rgb(207,178,40)" fg:x="3023759458" fg:w="16484283"/><text x="29.1626%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat (16,484,283 samples, 0.16%)</title><rect x="28.9126%" y="213" width="0.1576%" height="15" fill="rgb(221,136,13)" fg:x="3023759458" fg:w="16484283"/><text x="29.1626%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (16,484,283 samples, 0.16%)</title><rect x="28.9126%" y="197" width="0.1576%" height="15" fill="rgb(249,199,10)" fg:x="3023759458" fg:w="16484283"/><text x="29.1626%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (16,484,283 samples, 0.16%)</title><rect x="28.9126%" y="181" width="0.1576%" height="15" fill="rgb(249,222,13)" fg:x="3023759458" fg:w="16484283"/><text x="29.1626%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (16,484,283 samples, 0.16%)</title><rect x="28.9126%" y="165" width="0.1576%" height="15" fill="rgb(244,185,38)" fg:x="3023759458" fg:w="16484283"/><text x="29.1626%" y="175.50"></text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (145,547,277 samples, 1.39%)</title><rect x="27.8632%" y="357" width="1.3917%" height="15" fill="rgb(236,202,9)" fg:x="2914011079" fg:w="145547277"/><text x="28.1132%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (142,324,607 samples, 1.36%)</title><rect x="27.8940%" y="341" width="1.3609%" height="15" fill="rgb(250,229,37)" fg:x="2917233749" fg:w="142324607"/><text x="28.1440%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (142,324,607 samples, 1.36%)</title><rect x="27.8940%" y="325" width="1.3609%" height="15" fill="rgb(206,174,23)" fg:x="2917233749" fg:w="142324607"/><text x="28.1440%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (142,324,607 samples, 1.36%)</title><rect x="27.8940%" y="309" width="1.3609%" height="15" fill="rgb(211,33,43)" fg:x="2917233749" fg:w="142324607"/><text x="28.1440%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19,314,615 samples, 0.18%)</title><rect x="29.0702%" y="293" width="0.1847%" height="15" fill="rgb(245,58,50)" fg:x="3040243741" fg:w="19314615"/><text x="29.3202%" y="303.50"></text></g><g><title>core::ptr::copy_nonoverlapping (19,314,615 samples, 0.18%)</title><rect x="29.0702%" y="277" width="0.1847%" height="15" fill="rgb(244,68,36)" fg:x="3040243741" fg:w="19314615"/><text x="29.3202%" y="287.50"></text></g><g><title>[libc.so.6] (16,016,467 samples, 0.15%)</title><rect x="29.1018%" y="261" width="0.1531%" height="15" fill="rgb(232,229,15)" fg:x="3043541889" fg:w="16016467"/><text x="29.3518%" y="271.50"></text></g><g><title>[libc.so.6] (119,043,407 samples, 1.14%)</title><rect x="29.5611%" y="245" width="1.1383%" height="15" fill="rgb(254,30,23)" fg:x="3091584024" fg:w="119043407"/><text x="29.8111%" y="255.50"></text></g><g><title>[libc.so.6] (81,159,550 samples, 0.78%)</title><rect x="29.9234%" y="229" width="0.7760%" height="15" fill="rgb(235,160,14)" fg:x="3129467881" fg:w="81159550"/><text x="30.1734%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (229,227,752 samples, 2.19%)</title><rect x="29.2549%" y="357" width="2.1918%" height="15" fill="rgb(212,155,44)" fg:x="3059558356" fg:w="229227752"/><text x="29.5049%" y="367.50">a..</text></g><g><title>alloc::alloc::exchange_malloc (219,019,939 samples, 2.09%)</title><rect x="29.3525%" y="341" width="2.0942%" height="15" fill="rgb(226,2,50)" fg:x="3069766169" fg:w="219019939"/><text x="29.6025%" y="351.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (219,019,939 samples, 2.09%)</title><rect x="29.3525%" y="325" width="2.0942%" height="15" fill="rgb(234,177,6)" fg:x="3069766169" fg:w="219019939"/><text x="29.6025%" y="335.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (219,019,939 samples, 2.09%)</title><rect x="29.3525%" y="309" width="2.0942%" height="15" fill="rgb(217,24,9)" fg:x="3069766169" fg:w="219019939"/><text x="29.6025%" y="319.50">a..</text></g><g><title>alloc::alloc::alloc (219,019,939 samples, 2.09%)</title><rect x="29.3525%" y="293" width="2.0942%" height="15" fill="rgb(220,13,46)" fg:x="3069766169" fg:w="219019939"/><text x="29.6025%" y="303.50">a..</text></g><g><title>__rustc::__rdl_alloc (219,019,939 samples, 2.09%)</title><rect x="29.3525%" y="277" width="2.0942%" height="15" fill="rgb(239,221,27)" fg:x="3069766169" fg:w="219019939"/><text x="29.6025%" y="287.50">_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (219,019,939 samples, 2.09%)</title><rect x="29.3525%" y="261" width="2.0942%" height="15" fill="rgb(222,198,25)" fg:x="3069766169" fg:w="219019939"/><text x="29.6025%" y="271.50">s..</text></g><g><title>malloc (78,158,677 samples, 0.75%)</title><rect x="30.6994%" y="245" width="0.7473%" height="15" fill="rgb(211,99,13)" fg:x="3210627431" fg:w="78158677"/><text x="30.9494%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (3,399,227 samples, 0.03%)</title><rect x="31.4761%" y="325" width="0.0325%" height="15" fill="rgb(232,111,31)" fg:x="3291859242" fg:w="3399227"/><text x="31.7261%" y="335.50"></text></g><g><title>core::ptr::write (3,399,227 samples, 0.03%)</title><rect x="31.4761%" y="309" width="0.0325%" height="15" fill="rgb(245,82,37)" fg:x="3291859242" fg:w="3399227"/><text x="31.7261%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (13,078,257 samples, 0.13%)</title><rect x="31.4467%" y="357" width="0.1251%" height="15" fill="rgb(227,149,46)" fg:x="3288786108" fg:w="13078257"/><text x="31.6967%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back_mut (13,078,257 samples, 0.13%)</title><rect x="31.4467%" y="341" width="0.1251%" height="15" fill="rgb(218,36,50)" fg:x="3288786108" fg:w="13078257"/><text x="31.6967%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (6,605,896 samples, 0.06%)</title><rect x="31.5086%" y="325" width="0.0632%" height="15" fill="rgb(226,80,48)" fg:x="3295258469" fg:w="6605896"/><text x="31.7586%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (6,605,896 samples, 0.06%)</title><rect x="31.5086%" y="309" width="0.0632%" height="15" fill="rgb(238,224,15)" fg:x="3295258469" fg:w="6605896"/><text x="31.7586%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (6,605,896 samples, 0.06%)</title><rect x="31.5086%" y="293" width="0.0632%" height="15" fill="rgb(241,136,10)" fg:x="3295258469" fg:w="6605896"/><text x="31.7586%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = (u8,liblevenshtein::dictionary::pathmap::PathMapNode)&gt;&gt; (48,530,771 samples, 0.46%)</title><rect x="31.5718%" y="357" width="0.4640%" height="15" fill="rgb(208,32,45)" fg:x="3301864365" fg:w="48530771"/><text x="31.8218%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45,168,648 samples, 0.43%)</title><rect x="31.6039%" y="341" width="0.4319%" height="15" fill="rgb(207,135,9)" fg:x="3305226488" fg:w="45168648"/><text x="31.8539%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45,168,648 samples, 0.43%)</title><rect x="31.6039%" y="325" width="0.4319%" height="15" fill="rgb(206,86,44)" fg:x="3305226488" fg:w="45168648"/><text x="31.8539%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (45,168,648 samples, 0.43%)</title><rect x="31.6039%" y="309" width="0.4319%" height="15" fill="rgb(245,177,15)" fg:x="3305226488" fg:w="45168648"/><text x="31.8539%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (45,168,648 samples, 0.43%)</title><rect x="31.6039%" y="293" width="0.4319%" height="15" fill="rgb(206,64,50)" fg:x="3305226488" fg:w="45168648"/><text x="31.8539%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (45,168,648 samples, 0.43%)</title><rect x="31.6039%" y="277" width="0.4319%" height="15" fill="rgb(234,36,40)" fg:x="3305226488" fg:w="45168648"/><text x="31.8539%" y="287.50"></text></g><g><title>cfree (41,793,770 samples, 0.40%)</title><rect x="31.6362%" y="261" width="0.3996%" height="15" fill="rgb(213,64,8)" fg:x="3308601366" fg:w="41793770"/><text x="31.8862%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (37,424,887 samples, 0.36%)</title><rect x="32.0358%" y="341" width="0.3578%" height="15" fill="rgb(210,75,36)" fg:x="3350395136" fg:w="37424887"/><text x="32.2858%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,424,887 samples, 0.36%)</title><rect x="32.0358%" y="325" width="0.3578%" height="15" fill="rgb(229,88,21)" fg:x="3350395136" fg:w="37424887"/><text x="32.2858%" y="335.50"></text></g><g><title>cfree (28,136,585 samples, 0.27%)</title><rect x="32.1246%" y="309" width="0.2690%" height="15" fill="rgb(252,204,47)" fg:x="3359683438" fg:w="28136585"/><text x="32.3746%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (40,795,463 samples, 0.39%)</title><rect x="32.0358%" y="357" width="0.3901%" height="15" fill="rgb(208,77,27)" fg:x="3350395136" fg:w="40795463"/><text x="32.2858%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (3,370,576 samples, 0.03%)</title><rect x="32.3937%" y="341" width="0.0322%" height="15" fill="rgb(221,76,26)" fg:x="3387820023" fg:w="3370576"/><text x="32.6437%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,370,576 samples, 0.03%)</title><rect x="32.3937%" y="325" width="0.0322%" height="15" fill="rgb(225,139,18)" fg:x="3387820023" fg:w="3370576"/><text x="32.6437%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3,370,576 samples, 0.03%)</title><rect x="32.3937%" y="309" width="0.0322%" height="15" fill="rgb(230,137,11)" fg:x="3387820023" fg:w="3370576"/><text x="32.6437%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (3,370,576 samples, 0.03%)</title><rect x="32.3937%" y="293" width="0.0322%" height="15" fill="rgb(212,28,1)" fg:x="3387820023" fg:w="3370576"/><text x="32.6437%" y="303.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (56,168,346 samples, 0.54%)</title><rect x="33.7209%" y="341" width="0.5371%" height="15" fill="rgb(248,164,17)" fg:x="3526621013" fg:w="56168346"/><text x="33.9709%" y="351.50"></text></g><g><title>core::ptr::read (19,913,725 samples, 0.19%)</title><rect x="34.0675%" y="325" width="0.1904%" height="15" fill="rgb(222,171,42)" fg:x="3562875634" fg:w="19913725"/><text x="34.3175%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (19,560,710 samples, 0.19%)</title><rect x="34.2579%" y="325" width="0.1870%" height="15" fill="rgb(243,84,45)" fg:x="3582789359" fg:w="19560710"/><text x="34.5079%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (19,560,710 samples, 0.19%)</title><rect x="34.2579%" y="309" width="0.1870%" height="15" fill="rgb(252,49,23)" fg:x="3582789359" fg:w="19560710"/><text x="34.5079%" y="319.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (19,560,710 samples, 0.19%)</title><rect x="34.2579%" y="293" width="0.1870%" height="15" fill="rgb(215,19,7)" fg:x="3582789359" fg:w="19560710"/><text x="34.5079%" y="303.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (67,623,304 samples, 0.65%)</title><rect x="34.2579%" y="341" width="0.6466%" height="15" fill="rgb(238,81,41)" fg:x="3582789359" fg:w="67623304"/><text x="34.5079%" y="351.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::set_len (48,062,594 samples, 0.46%)</title><rect x="34.4450%" y="325" width="0.4596%" height="15" fill="rgb(210,199,37)" fg:x="3602350069" fg:w="48062594"/><text x="34.6950%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[liblevenshtein::transducer::position::Position: 4]&gt;&gt; (9,227,768 samples, 0.09%)</title><rect x="34.9045%" y="341" width="0.0882%" height="15" fill="rgb(244,192,49)" fg:x="3650412663" fg:w="9227768"/><text x="35.1545%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[liblevenshtein::transducer::position::Position: 4]&gt;&gt; (9,227,768 samples, 0.09%)</title><rect x="34.9045%" y="325" width="0.0882%" height="15" fill="rgb(226,211,11)" fg:x="3650412663" fg:w="9227768"/><text x="35.1545%" y="335.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (9,227,768 samples, 0.09%)</title><rect x="34.9045%" y="309" width="0.0882%" height="15" fill="rgb(236,162,54)" fg:x="3650412663" fg:w="9227768"/><text x="35.1545%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,188,448 samples, 0.03%)</title><rect x="35.0217%" y="325" width="0.0305%" height="15" fill="rgb(220,229,9)" fg:x="3662662876" fg:w="3188448"/><text x="35.2717%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6,301,487 samples, 0.06%)</title><rect x="35.0860%" y="293" width="0.0603%" height="15" fill="rgb(250,87,22)" fg:x="3669393588" fg:w="6301487"/><text x="35.3360%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6,301,487 samples, 0.06%)</title><rect x="35.0860%" y="277" width="0.0603%" height="15" fill="rgb(239,43,17)" fg:x="3669393588" fg:w="6301487"/><text x="35.3360%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (6,301,487 samples, 0.06%)</title><rect x="35.0860%" y="261" width="0.0603%" height="15" fill="rgb(231,177,25)" fg:x="3669393588" fg:w="6301487"/><text x="35.3360%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (6,301,487 samples, 0.06%)</title><rect x="35.0860%" y="245" width="0.0603%" height="15" fill="rgb(219,179,1)" fg:x="3669393588" fg:w="6301487"/><text x="35.3360%" y="255.50"></text></g><g><title>liblevenshtein::transducer::pool::StatePool::release (32,531,242 samples, 0.31%)</title><rect x="34.9928%" y="341" width="0.3111%" height="15" fill="rgb(238,219,53)" fg:x="3659640431" fg:w="32531242"/><text x="35.2428%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (26,320,349 samples, 0.25%)</title><rect x="35.0522%" y="325" width="0.2517%" height="15" fill="rgb(232,167,36)" fg:x="3665851324" fg:w="26320349"/><text x="35.3022%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (26,320,349 samples, 0.25%)</title><rect x="35.0522%" y="309" width="0.2517%" height="15" fill="rgb(244,19,51)" fg:x="3665851324" fg:w="26320349"/><text x="35.3022%" y="319.50"></text></g><g><title>core::ptr::write (16,476,598 samples, 0.16%)</title><rect x="35.1463%" y="293" width="0.1575%" height="15" fill="rgb(224,6,22)" fg:x="3675695075" fg:w="16476598"/><text x="35.3963%" y="303.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (6,090,590 samples, 0.06%)</title><rect x="35.3038%" y="341" width="0.0582%" height="15" fill="rgb(224,145,5)" fg:x="3692171673" fg:w="6090590"/><text x="35.5538%" y="351.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (1,025,915,702 samples, 9.81%)</title><rect x="27.0252%" y="373" width="9.8096%" height="15" fill="rgb(234,130,49)" fg:x="2826368902" fg:w="1025915702"/><text x="27.2752%" y="383.50">liblevenshtein..</text></g><g><title>liblevenshtein::transducer::transition::transition_state_pooled (461,094,005 samples, 4.41%)</title><rect x="32.4259%" y="357" width="4.4089%" height="15" fill="rgb(254,6,2)" fg:x="3391190599" fg:w="461094005"/><text x="32.6759%" y="367.50">lible..</text></g><g><title>liblevenshtein::transducer::transition::transition_position (154,022,341 samples, 1.47%)</title><rect x="35.3621%" y="341" width="1.4727%" height="15" fill="rgb(208,96,46)" fg:x="3698262263" fg:w="154022341"/><text x="35.6121%" y="351.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_standard (100,019,498 samples, 0.96%)</title><rect x="35.8784%" y="325" width="0.9564%" height="15" fill="rgb(239,3,39)" fg:x="3752265106" fg:w="100019498"/><text x="36.1284%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (22,168,212 samples, 0.21%)</title><rect x="36.6228%" y="309" width="0.2120%" height="15" fill="rgb(233,210,1)" fg:x="3830116392" fg:w="22168212"/><text x="36.8728%" y="319.50"></text></g><g><title>core::ptr::write (9,478,629 samples, 0.09%)</title><rect x="36.7442%" y="293" width="0.0906%" height="15" fill="rgb(244,137,37)" fg:x="3842805975" fg:w="9478629"/><text x="36.9942%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (15,720,459 samples, 0.15%)</title><rect x="36.8639%" y="277" width="0.1503%" height="15" fill="rgb(240,136,2)" fg:x="3855330694" fg:w="15720459"/><text x="37.1139%" y="287.50"></text></g><g><title>liblevenshtein::transducer::state::State::infer_distance::{{closure}} (15,720,459 samples, 0.15%)</title><rect x="36.8639%" y="261" width="0.1503%" height="15" fill="rgb(239,18,37)" fg:x="3855330694" fg:w="15720459"/><text x="37.1139%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (9,285,868 samples, 0.09%)</title><rect x="36.9255%" y="245" width="0.0888%" height="15" fill="rgb(218,185,22)" fg:x="3861765285" fg:w="9285868"/><text x="37.1755%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21,912,109 samples, 0.21%)</title><rect x="36.8348%" y="309" width="0.2095%" height="15" fill="rgb(225,218,4)" fg:x="3852284604" fg:w="21912109"/><text x="37.0848%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21,912,109 samples, 0.21%)</title><rect x="36.8348%" y="293" width="0.2095%" height="15" fill="rgb(230,182,32)" fg:x="3852284604" fg:w="21912109"/><text x="37.0848%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (3,145,560 samples, 0.03%)</title><rect x="37.0142%" y="277" width="0.0301%" height="15" fill="rgb(242,56,43)" fg:x="3871051153" fg:w="3145560"/><text x="37.2642%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from_unsigned (3,145,560 samples, 0.03%)</title><rect x="37.0142%" y="261" width="0.0301%" height="15" fill="rgb(233,99,24)" fg:x="3871051153" fg:w="3145560"/><text x="37.2642%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from_unsigned (3,145,560 samples, 0.03%)</title><rect x="37.0142%" y="245" width="0.0301%" height="15" fill="rgb(234,209,42)" fg:x="3871051153" fg:w="3145560"/><text x="37.2642%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,427,111 samples, 0.03%)</title><rect x="37.0443%" y="293" width="0.0328%" height="15" fill="rgb(227,7,12)" fg:x="3874196713" fg:w="3427111"/><text x="37.2943%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,427,111 samples, 0.03%)</title><rect x="37.0443%" y="277" width="0.0328%" height="15" fill="rgb(245,203,43)" fg:x="3874196713" fg:w="3427111"/><text x="37.2943%" y="287.50"></text></g><g><title>&lt;liblevenshtein::transducer::query::QueryIterator&lt;N&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,333,488,295 samples, 12.75%)</title><rect x="24.4227%" y="405" width="12.7506%" height="15" fill="rgb(238,205,33)" fg:x="2554191974" fg:w="1333488295"/><text x="24.6727%" y="415.50">&lt;liblevenshtein::tr..</text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::advance (1,330,478,361 samples, 12.72%)</title><rect x="24.4515%" y="389" width="12.7218%" height="15" fill="rgb(231,56,7)" fg:x="2557201908" fg:w="1330478361"/><text x="24.7015%" y="399.50">liblevenshtein::tra..</text></g><g><title>liblevenshtein::transducer::state::State::infer_distance (35,395,665 samples, 0.34%)</title><rect x="36.8348%" y="373" width="0.3384%" height="15" fill="rgb(244,186,29)" fg:x="3852284604" fg:w="35395665"/><text x="37.0848%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (35,395,665 samples, 0.34%)</title><rect x="36.8348%" y="357" width="0.3384%" height="15" fill="rgb(234,111,31)" fg:x="3852284604" fg:w="35395665"/><text x="37.0848%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (35,395,665 samples, 0.34%)</title><rect x="36.8348%" y="341" width="0.3384%" height="15" fill="rgb(241,149,10)" fg:x="3852284604" fg:w="35395665"/><text x="37.0848%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (35,395,665 samples, 0.34%)</title><rect x="36.8348%" y="325" width="0.3384%" height="15" fill="rgb(249,206,44)" fg:x="3852284604" fg:w="35395665"/><text x="37.0848%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13,483,556 samples, 0.13%)</title><rect x="37.0443%" y="309" width="0.1289%" height="15" fill="rgb(251,153,30)" fg:x="3874196713" fg:w="13483556"/><text x="37.2943%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10,056,445 samples, 0.10%)</title><rect x="37.0771%" y="293" width="0.0962%" height="15" fill="rgb(239,152,38)" fg:x="3877623824" fg:w="10056445"/><text x="37.3271%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10,056,445 samples, 0.10%)</title><rect x="37.0771%" y="277" width="0.0962%" height="15" fill="rgb(249,139,47)" fg:x="3877623824" fg:w="10056445"/><text x="37.3271%" y="287.50"></text></g><g><title>liblevenshtein::transducer::state::State::infer_distance::{{closure}} (10,056,445 samples, 0.10%)</title><rect x="37.0771%" y="261" width="0.0962%" height="15" fill="rgb(244,64,35)" fg:x="3877623824" fg:w="10056445"/><text x="37.3271%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (10,056,445 samples, 0.10%)</title><rect x="37.0771%" y="245" width="0.0962%" height="15" fill="rgb(216,46,15)" fg:x="3877623824" fg:w="10056445"/><text x="37.3271%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,768,226 samples, 0.02%)</title><rect x="37.1733%" y="405" width="0.0169%" height="15" fill="rgb(250,74,19)" fg:x="3887680269" fg:w="1768226"/><text x="37.4233%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,768,226 samples, 0.02%)</title><rect x="37.1733%" y="389" width="0.0169%" height="15" fill="rgb(249,42,33)" fg:x="3887680269" fg:w="1768226"/><text x="37.4233%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,768,226 samples, 0.02%)</title><rect x="37.1733%" y="373" width="0.0169%" height="15" fill="rgb(242,149,17)" fg:x="3887680269" fg:w="1768226"/><text x="37.4233%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,768,226 samples, 0.02%)</title><rect x="37.1733%" y="357" width="0.0169%" height="15" fill="rgb(244,29,21)" fg:x="3887680269" fg:w="1768226"/><text x="37.4233%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,768,226 samples, 0.02%)</title><rect x="37.1733%" y="341" width="0.0169%" height="15" fill="rgb(220,130,37)" fg:x="3887680269" fg:w="1768226"/><text x="37.4233%" y="351.50"></text></g><g><title>[libc.so.6] (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="389" width="0.0277%" height="15" fill="rgb(211,67,2)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="399.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="373" width="0.0277%" height="15" fill="rgb(235,68,52)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="383.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="357" width="0.0277%" height="15" fill="rgb(246,142,3)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="341" width="0.0277%" height="15" fill="rgb(241,25,7)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="351.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="325" width="0.0277%" height="15" fill="rgb(242,119,39)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="335.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="309" width="0.0277%" height="15" fill="rgb(241,98,45)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="319.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="293" width="0.0277%" height="15" fill="rgb(254,28,30)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="303.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="277" width="0.0277%" height="15" fill="rgb(241,142,54)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="287.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (2,891,986 samples, 0.03%)</title><rect x="38.2056%" y="261" width="0.0277%" height="15" fill="rgb(222,85,15)" fg:x="3995647559" fg:w="2891986"/><text x="38.4556%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="389" width="0.0335%" height="15" fill="rgb(210,85,47)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="373" width="0.0335%" height="15" fill="rgb(224,206,25)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="357" width="0.0335%" height="15" fill="rgb(243,201,19)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="341" width="0.0335%" height="15" fill="rgb(236,59,4)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="325" width="0.0335%" height="15" fill="rgb(254,179,45)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="309" width="0.0335%" height="15" fill="rgb(226,14,10)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="293" width="0.0335%" height="15" fill="rgb(244,27,41)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,501,011 samples, 0.03%)</title><rect x="38.2333%" y="277" width="0.0335%" height="15" fill="rgb(235,35,32)" fg:x="3998539545" fg:w="3501011"/><text x="38.4833%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="389" width="0.0317%" height="15" fill="rgb(218,68,31)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="373" width="0.0317%" height="15" fill="rgb(207,120,37)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="357" width="0.0317%" height="15" fill="rgb(227,98,0)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="341" width="0.0317%" height="15" fill="rgb(207,7,3)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="325" width="0.0317%" height="15" fill="rgb(206,98,19)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="309" width="0.0317%" height="15" fill="rgb(217,5,26)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="293" width="0.0317%" height="15" fill="rgb(235,190,38)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="277" width="0.0317%" height="15" fill="rgb(247,86,24)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,312,098 samples, 0.03%)</title><rect x="38.2667%" y="261" width="0.0317%" height="15" fill="rgb(205,101,16)" fg:x="4002040556" fg:w="3312098"/><text x="38.5167%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="373" width="0.0631%" height="15" fill="rgb(246,168,33)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="357" width="0.0631%" height="15" fill="rgb(231,114,1)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="341" width="0.0631%" height="15" fill="rgb(207,184,53)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="325" width="0.0631%" height="15" fill="rgb(224,95,51)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="309" width="0.0631%" height="15" fill="rgb(212,188,45)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="293" width="0.0631%" height="15" fill="rgb(223,154,38)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="303.50"></text></g><g><title>alloc::alloc::alloc (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="277" width="0.0631%" height="15" fill="rgb(251,22,52)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="261" width="0.0631%" height="15" fill="rgb(229,209,22)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6,597,842 samples, 0.06%)</title><rect x="38.2984%" y="245" width="0.0631%" height="15" fill="rgb(234,138,34)" fg:x="4005352654" fg:w="6597842"/><text x="38.5484%" y="255.50"></text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (3,028,176 samples, 0.03%)</title><rect x="38.3615%" y="373" width="0.0290%" height="15" fill="rgb(212,95,11)" fg:x="4011950496" fg:w="3028176"/><text x="38.6115%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,028,176 samples, 0.03%)</title><rect x="38.3615%" y="357" width="0.0290%" height="15" fill="rgb(240,179,47)" fg:x="4011950496" fg:w="3028176"/><text x="38.6115%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,028,176 samples, 0.03%)</title><rect x="38.3615%" y="341" width="0.0290%" height="15" fill="rgb(240,163,11)" fg:x="4011950496" fg:w="3028176"/><text x="38.6115%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,028,176 samples, 0.03%)</title><rect x="38.3615%" y="325" width="0.0290%" height="15" fill="rgb(236,37,12)" fg:x="4011950496" fg:w="3028176"/><text x="38.6115%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,028,176 samples, 0.03%)</title><rect x="38.3615%" y="309" width="0.0290%" height="15" fill="rgb(232,164,16)" fg:x="4011950496" fg:w="3028176"/><text x="38.6115%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,028,176 samples, 0.03%)</title><rect x="38.3615%" y="293" width="0.0290%" height="15" fill="rgb(244,205,15)" fg:x="4011950496" fg:w="3028176"/><text x="38.6115%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (2,819,937 samples, 0.03%)</title><rect x="38.3905%" y="373" width="0.0270%" height="15" fill="rgb(223,117,47)" fg:x="4014978672" fg:w="2819937"/><text x="38.6405%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (2,819,937 samples, 0.03%)</title><rect x="38.3905%" y="357" width="0.0270%" height="15" fill="rgb(244,107,35)" fg:x="4014978672" fg:w="2819937"/><text x="38.6405%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,819,937 samples, 0.03%)</title><rect x="38.3905%" y="341" width="0.0270%" height="15" fill="rgb(205,140,8)" fg:x="4014978672" fg:w="2819937"/><text x="38.6405%" y="351.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (19,148,692 samples, 0.18%)</title><rect x="38.2984%" y="389" width="0.1831%" height="15" fill="rgb(228,84,46)" fg:x="4005352654" fg:w="19148692"/><text x="38.5484%" y="399.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_state_pooled (6,702,737 samples, 0.06%)</title><rect x="38.4174%" y="373" width="0.0641%" height="15" fill="rgb(254,188,9)" fg:x="4017798609" fg:w="6702737"/><text x="38.6674%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (9,737,160 samples, 0.09%)</title><rect x="38.4815%" y="373" width="0.0931%" height="15" fill="rgb(206,112,54)" fg:x="4024501346" fg:w="9737160"/><text x="38.7315%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (9,737,160 samples, 0.09%)</title><rect x="38.4815%" y="357" width="0.0931%" height="15" fill="rgb(216,84,49)" fg:x="4024501346" fg:w="9737160"/><text x="38.7315%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (9,737,160 samples, 0.09%)</title><rect x="38.4815%" y="341" width="0.0931%" height="15" fill="rgb(214,194,35)" fg:x="4024501346" fg:w="9737160"/><text x="38.7315%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (9,737,160 samples, 0.09%)</title><rect x="38.4815%" y="325" width="0.0931%" height="15" fill="rgb(249,28,3)" fg:x="4024501346" fg:w="9737160"/><text x="38.7315%" y="335.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert::{{closure}} (9,737,160 samples, 0.09%)</title><rect x="38.4815%" y="309" width="0.0931%" height="15" fill="rgb(222,56,52)" fg:x="4024501346" fg:w="9737160"/><text x="38.7315%" y="319.50"></text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (9,737,160 samples, 0.09%)</title><rect x="38.4815%" y="293" width="0.0931%" height="15" fill="rgb(245,217,50)" fg:x="4024501346" fg:w="9737160"/><text x="38.7315%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (6,451,349 samples, 0.06%)</title><rect x="38.5746%" y="373" width="0.0617%" height="15" fill="rgb(213,201,24)" fg:x="4034238506" fg:w="6451349"/><text x="38.8246%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (6,451,349 samples, 0.06%)</title><rect x="38.5746%" y="357" width="0.0617%" height="15" fill="rgb(248,116,28)" fg:x="4034238506" fg:w="6451349"/><text x="38.8246%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search::{{closure}} (6,451,349 samples, 0.06%)</title><rect x="38.5746%" y="341" width="0.0617%" height="15" fill="rgb(219,72,43)" fg:x="4034238506" fg:w="6451349"/><text x="38.8246%" y="351.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::Ord&gt;::cmp (6,451,349 samples, 0.06%)</title><rect x="38.5746%" y="325" width="0.0617%" height="15" fill="rgb(209,138,14)" fg:x="4034238506" fg:w="6451349"/><text x="38.8246%" y="335.50"></text></g><g><title>liblevenshtein::transducer::position::Position::compare (6,451,349 samples, 0.06%)</title><rect x="38.5746%" y="309" width="0.0617%" height="15" fill="rgb(222,18,33)" fg:x="4034238506" fg:w="6451349"/><text x="38.8246%" y="319.50"></text></g><g><title>core::cmp::Ordering::then_with (3,074,366 samples, 0.03%)</title><rect x="38.6069%" y="293" width="0.0294%" height="15" fill="rgb(213,199,7)" fg:x="4037615489" fg:w="3074366"/><text x="38.8569%" y="303.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (25,798,109 samples, 0.25%)</title><rect x="38.4815%" y="389" width="0.2467%" height="15" fill="rgb(250,110,10)" fg:x="4024501346" fg:w="25798109"/><text x="38.7315%" y="399.50"></text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (9,609,600 samples, 0.09%)</title><rect x="38.6363%" y="373" width="0.0919%" height="15" fill="rgb(248,123,6)" fg:x="4040689855" fg:w="9609600"/><text x="38.8863%" y="383.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::ensure_root (3,218,735 samples, 0.03%)</title><rect x="38.7282%" y="373" width="0.0308%" height="15" fill="rgb(206,91,31)" fg:x="4050299455" fg:w="3218735"/><text x="38.9782%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3,218,735 samples, 0.03%)</title><rect x="38.7282%" y="357" width="0.0308%" height="15" fill="rgb(211,154,13)" fg:x="4050299455" fg:w="3218735"/><text x="38.9782%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,331,450 samples, 0.03%)</title><rect x="38.8168%" y="293" width="0.0319%" height="15" fill="rgb(225,148,7)" fg:x="4059571244" fg:w="3331450"/><text x="39.0668%" y="303.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (3,331,450 samples, 0.03%)</title><rect x="38.8168%" y="277" width="0.0319%" height="15" fill="rgb(220,160,43)" fg:x="4059571244" fg:w="3331450"/><text x="39.0668%" y="287.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (3,331,450 samples, 0.03%)</title><rect x="38.8168%" y="261" width="0.0319%" height="15" fill="rgb(213,52,39)" fg:x="4059571244" fg:w="3331450"/><text x="39.0668%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,331,450 samples, 0.03%)</title><rect x="38.8168%" y="245" width="0.0319%" height="15" fill="rgb(243,137,7)" fg:x="4059571244" fg:w="3331450"/><text x="39.0668%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3,251,438 samples, 0.03%)</title><rect x="38.8487%" y="277" width="0.0311%" height="15" fill="rgb(230,79,13)" fg:x="4062902694" fg:w="3251438"/><text x="39.0987%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,251,438 samples, 0.03%)</title><rect x="38.8487%" y="261" width="0.0311%" height="15" fill="rgb(247,105,23)" fg:x="4062902694" fg:w="3251438"/><text x="39.0987%" y="271.50"></text></g><g><title>pathmap::zipper::node_along_path (19,553,331 samples, 0.19%)</title><rect x="38.7862%" y="341" width="0.1870%" height="15" fill="rgb(223,179,41)" fg:x="4056365411" fg:w="19553331"/><text x="39.0362%" y="351.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (19,553,331 samples, 0.19%)</title><rect x="38.7862%" y="325" width="0.1870%" height="15" fill="rgb(218,9,34)" fg:x="4056365411" fg:w="19553331"/><text x="39.0362%" y="335.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (16,347,498 samples, 0.16%)</title><rect x="38.8168%" y="309" width="0.1563%" height="15" fill="rgb(222,106,8)" fg:x="4059571244" fg:w="16347498"/><text x="39.0668%" y="319.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (13,016,048 samples, 0.12%)</title><rect x="38.8487%" y="293" width="0.1245%" height="15" fill="rgb(211,220,0)" fg:x="4062902694" fg:w="13016048"/><text x="39.0987%" y="303.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (9,764,610 samples, 0.09%)</title><rect x="38.8798%" y="277" width="0.0934%" height="15" fill="rgb(229,52,16)" fg:x="4066154132" fg:w="9764610"/><text x="39.1298%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (6,611,947 samples, 0.06%)</title><rect x="38.9099%" y="261" width="0.0632%" height="15" fill="rgb(212,155,18)" fg:x="4069306795" fg:w="6611947"/><text x="39.1599%" y="271.50"></text></g><g><title>[libc.so.6] (189,602,626 samples, 1.81%)</title><rect x="37.1902%" y="405" width="1.8129%" height="15" fill="rgb(242,21,14)" fg:x="3889448495" fg:w="189602626"/><text x="37.4402%" y="415.50">[..</text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (28,751,666 samples, 0.27%)</title><rect x="38.7282%" y="389" width="0.2749%" height="15" fill="rgb(222,19,48)" fg:x="4050299455" fg:w="28751666"/><text x="38.9782%" y="399.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (25,532,931 samples, 0.24%)</title><rect x="38.7590%" y="373" width="0.2441%" height="15" fill="rgb(232,45,27)" fg:x="4053518190" fg:w="25532931"/><text x="39.0090%" y="383.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (25,532,931 samples, 0.24%)</title><rect x="38.7590%" y="357" width="0.2441%" height="15" fill="rgb(249,103,42)" fg:x="4053518190" fg:w="25532931"/><text x="39.0090%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (3,132,379 samples, 0.03%)</title><rect x="38.9732%" y="341" width="0.0300%" height="15" fill="rgb(246,81,33)" fg:x="4075918742" fg:w="3132379"/><text x="39.2232%" y="351.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (3,132,379 samples, 0.03%)</title><rect x="38.9732%" y="325" width="0.0300%" height="15" fill="rgb(252,33,42)" fg:x="4075918742" fg:w="3132379"/><text x="39.2232%" y="335.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (3,132,379 samples, 0.03%)</title><rect x="38.9732%" y="309" width="0.0300%" height="15" fill="rgb(209,212,41)" fg:x="4075918742" fg:w="3132379"/><text x="39.2232%" y="319.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (3,132,379 samples, 0.03%)</title><rect x="38.9732%" y="293" width="0.0300%" height="15" fill="rgb(207,154,6)" fg:x="4075918742" fg:w="3132379"/><text x="39.2232%" y="303.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (3,132,379 samples, 0.03%)</title><rect x="38.9732%" y="277" width="0.0300%" height="15" fill="rgb(223,64,47)" fg:x="4075918742" fg:w="3132379"/><text x="39.2232%" y="287.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (9,427,007 samples, 0.09%)</title><rect x="39.0652%" y="373" width="0.0901%" height="15" fill="rgb(211,161,38)" fg:x="4085544962" fg:w="9427007"/><text x="39.3152%" y="383.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (9,427,007 samples, 0.09%)</title><rect x="39.0652%" y="357" width="0.0901%" height="15" fill="rgb(219,138,40)" fg:x="4085544962" fg:w="9427007"/><text x="39.3152%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::descend_to_internal (9,427,007 samples, 0.09%)</title><rect x="39.0652%" y="341" width="0.0901%" height="15" fill="rgb(241,228,46)" fg:x="4085544962" fg:w="9427007"/><text x="39.3152%" y="351.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (9,427,007 samples, 0.09%)</title><rect x="39.0652%" y="325" width="0.0901%" height="15" fill="rgb(223,209,38)" fg:x="4085544962" fg:w="9427007"/><text x="39.3152%" y="335.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (9,427,007 samples, 0.09%)</title><rect x="39.0652%" y="309" width="0.0901%" height="15" fill="rgb(236,164,45)" fg:x="4085544962" fg:w="9427007"/><text x="39.3152%" y="319.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (9,427,007 samples, 0.09%)</title><rect x="39.0652%" y="293" width="0.0901%" height="15" fill="rgb(231,15,5)" fg:x="4085544962" fg:w="9427007"/><text x="39.3152%" y="303.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (3,241,611 samples, 0.03%)</title><rect x="39.1243%" y="277" width="0.0310%" height="15" fill="rgb(252,35,15)" fg:x="4091730358" fg:w="3241611"/><text x="39.3743%" y="287.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (19,202,239 samples, 0.18%)</title><rect x="39.0031%" y="389" width="0.1836%" height="15" fill="rgb(248,181,18)" fg:x="4079051121" fg:w="19202239"/><text x="39.2531%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="373" width="0.0314%" height="15" fill="rgb(233,39,42)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="357" width="0.0314%" height="15" fill="rgb(238,110,33)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="341" width="0.0314%" height="15" fill="rgb(233,195,10)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="325" width="0.0314%" height="15" fill="rgb(254,105,3)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="309" width="0.0314%" height="15" fill="rgb(221,225,9)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="293" width="0.0314%" height="15" fill="rgb(224,227,45)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="277" width="0.0314%" height="15" fill="rgb(229,198,43)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="287.50"></text></g><g><title>alloc::alloc::alloc (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="261" width="0.0314%" height="15" fill="rgb(206,209,35)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="245" width="0.0314%" height="15" fill="rgb(245,195,53)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,281,391 samples, 0.03%)</title><rect x="39.1553%" y="229" width="0.0314%" height="15" fill="rgb(240,92,26)" fg:x="4094971969" fg:w="3281391"/><text x="39.4053%" y="239.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (3,251,088 samples, 0.03%)</title><rect x="39.2493%" y="341" width="0.0311%" height="15" fill="rgb(207,40,23)" fg:x="4104800903" fg:w="3251088"/><text x="39.4993%" y="351.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (3,251,088 samples, 0.03%)</title><rect x="39.2493%" y="325" width="0.0311%" height="15" fill="rgb(223,111,35)" fg:x="4104800903" fg:w="3251088"/><text x="39.4993%" y="335.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::is_val_internal (3,251,088 samples, 0.03%)</title><rect x="39.2493%" y="309" width="0.0311%" height="15" fill="rgb(229,147,28)" fg:x="4104800903" fg:w="3251088"/><text x="39.4993%" y="319.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_val (3,251,088 samples, 0.03%)</title><rect x="39.2493%" y="293" width="0.0311%" height="15" fill="rgb(211,29,28)" fg:x="4104800903" fg:w="3251088"/><text x="39.4993%" y="303.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final::{{closure}} (6,521,424 samples, 0.06%)</title><rect x="39.2493%" y="357" width="0.0624%" height="15" fill="rgb(228,72,33)" fg:x="4104800903" fg:w="6521424"/><text x="39.4993%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (3,270,336 samples, 0.03%)</title><rect x="39.2804%" y="341" width="0.0313%" height="15" fill="rgb(205,214,31)" fg:x="4108051991" fg:w="3270336"/><text x="39.5304%" y="351.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (19,263,054 samples, 0.18%)</title><rect x="39.1867%" y="389" width="0.1842%" height="15" fill="rgb(224,111,15)" fg:x="4098253360" fg:w="19263054"/><text x="39.4367%" y="399.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (16,120,257 samples, 0.15%)</title><rect x="39.2168%" y="373" width="0.1541%" height="15" fill="rgb(253,21,26)" fg:x="4101396157" fg:w="16120257"/><text x="39.4668%" y="383.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (6,194,087 samples, 0.06%)</title><rect x="39.3117%" y="357" width="0.0592%" height="15" fill="rgb(245,139,43)" fg:x="4111322327" fg:w="6194087"/><text x="39.5617%" y="367.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (6,194,087 samples, 0.06%)</title><rect x="39.3117%" y="341" width="0.0592%" height="15" fill="rgb(252,170,7)" fg:x="4111322327" fg:w="6194087"/><text x="39.5617%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (6,194,087 samples, 0.06%)</title><rect x="39.3117%" y="325" width="0.0592%" height="15" fill="rgb(231,118,14)" fg:x="4111322327" fg:w="6194087"/><text x="39.5617%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6,194,087 samples, 0.06%)</title><rect x="39.3117%" y="309" width="0.0592%" height="15" fill="rgb(238,83,0)" fg:x="4111322327" fg:w="6194087"/><text x="39.5617%" y="319.50"></text></g><g><title>[libc.so.6] (48,096,594 samples, 0.46%)</title><rect x="39.3709%" y="389" width="0.4599%" height="15" fill="rgb(221,39,39)" fg:x="4117516414" fg:w="48096594"/><text x="39.6209%" y="399.50"></text></g><g><title>[unknown] (3,360,880 samples, 0.03%)</title><rect x="39.8308%" y="389" width="0.0321%" height="15" fill="rgb(222,119,46)" fg:x="4165613008" fg:w="3360880"/><text x="40.0808%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,360,880 samples, 0.03%)</title><rect x="39.8308%" y="373" width="0.0321%" height="15" fill="rgb(222,165,49)" fg:x="4165613008" fg:w="3360880"/><text x="40.0808%" y="383.50"></text></g><g><title>__rustc::__rust_alloc (3,131,630 samples, 0.03%)</title><rect x="39.8629%" y="389" width="0.0299%" height="15" fill="rgb(219,113,52)" fg:x="4168973888" fg:w="3131630"/><text x="40.1129%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,283,861 samples, 0.03%)</title><rect x="39.9262%" y="341" width="0.0314%" height="15" fill="rgb(214,7,15)" fg:x="4175594070" fg:w="3283861"/><text x="40.1762%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (12,593,643 samples, 0.12%)</title><rect x="39.9576%" y="341" width="0.1204%" height="15" fill="rgb(235,32,4)" fg:x="4178877931" fg:w="12593643"/><text x="40.2076%" y="351.50"></text></g><g><title>alloc::raw_vec::layout_array (9,646,034 samples, 0.09%)</title><rect x="40.0780%" y="341" width="0.0922%" height="15" fill="rgb(238,90,54)" fg:x="4191471574" fg:w="9646034"/><text x="40.3280%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::repeat (9,646,034 samples, 0.09%)</title><rect x="40.0780%" y="325" width="0.0922%" height="15" fill="rgb(213,208,19)" fg:x="4191471574" fg:w="9646034"/><text x="40.3280%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (9,646,034 samples, 0.09%)</title><rect x="40.0780%" y="309" width="0.0922%" height="15" fill="rgb(233,156,4)" fg:x="4191471574" fg:w="9646034"/><text x="40.3280%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (9,646,034 samples, 0.09%)</title><rect x="40.0780%" y="293" width="0.0922%" height="15" fill="rgb(207,194,5)" fg:x="4191471574" fg:w="9646034"/><text x="40.3280%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (9,646,034 samples, 0.09%)</title><rect x="40.0780%" y="277" width="0.0922%" height="15" fill="rgb(206,111,30)" fg:x="4191471574" fg:w="9646034"/><text x="40.3280%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (35,295,458 samples, 0.34%)</title><rect x="39.8929%" y="389" width="0.3375%" height="15" fill="rgb(243,70,54)" fg:x="4172105518" fg:w="35295458"/><text x="40.1429%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (35,295,458 samples, 0.34%)</title><rect x="39.8929%" y="373" width="0.3375%" height="15" fill="rgb(242,28,8)" fg:x="4172105518" fg:w="35295458"/><text x="40.1429%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (31,806,906 samples, 0.30%)</title><rect x="39.9262%" y="357" width="0.3041%" height="15" fill="rgb(219,106,18)" fg:x="4175594070" fg:w="31806906"/><text x="40.1762%" y="367.50"></text></g><g><title>core::cmp::max (6,283,368 samples, 0.06%)</title><rect x="40.1703%" y="341" width="0.0601%" height="15" fill="rgb(244,222,10)" fg:x="4201117608" fg:w="6283368"/><text x="40.4203%" y="351.50"></text></g><g><title>core::cmp::Ord::max (6,283,368 samples, 0.06%)</title><rect x="40.1703%" y="325" width="0.0601%" height="15" fill="rgb(236,179,52)" fg:x="4201117608" fg:w="6283368"/><text x="40.4203%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,310,878 samples, 0.03%)</title><rect x="40.2304%" y="341" width="0.0317%" height="15" fill="rgb(213,23,39)" fg:x="4207400976" fg:w="3310878"/><text x="40.4804%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,310,878 samples, 0.03%)</title><rect x="40.2304%" y="325" width="0.0317%" height="15" fill="rgb(238,48,10)" fg:x="4207400976" fg:w="3310878"/><text x="40.4804%" y="335.50"></text></g><g><title>alloc::alloc::realloc (3,310,878 samples, 0.03%)</title><rect x="40.2304%" y="309" width="0.0317%" height="15" fill="rgb(251,196,23)" fg:x="4207400976" fg:w="3310878"/><text x="40.4804%" y="319.50"></text></g><g><title>__rustc::__rdl_realloc (3,310,878 samples, 0.03%)</title><rect x="40.2304%" y="293" width="0.0317%" height="15" fill="rgb(250,152,24)" fg:x="4207400976" fg:w="3310878"/><text x="40.4804%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3,310,878 samples, 0.03%)</title><rect x="40.2304%" y="277" width="0.0317%" height="15" fill="rgb(209,150,17)" fg:x="4207400976" fg:w="3310878"/><text x="40.4804%" y="287.50"></text></g><g><title>realloc (3,310,878 samples, 0.03%)</title><rect x="40.2304%" y="261" width="0.0317%" height="15" fill="rgb(234,202,34)" fg:x="4207400976" fg:w="3310878"/><text x="40.4804%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6,483,711 samples, 0.06%)</title><rect x="40.2304%" y="389" width="0.0620%" height="15" fill="rgb(253,148,53)" fg:x="4207400976" fg:w="6483711"/><text x="40.4804%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (6,483,711 samples, 0.06%)</title><rect x="40.2304%" y="373" width="0.0620%" height="15" fill="rgb(218,129,16)" fg:x="4207400976" fg:w="6483711"/><text x="40.4804%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (6,483,711 samples, 0.06%)</title><rect x="40.2304%" y="357" width="0.0620%" height="15" fill="rgb(216,85,19)" fg:x="4207400976" fg:w="6483711"/><text x="40.4804%" y="367.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="341" width="0.0303%" height="15" fill="rgb(235,228,7)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="351.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="325" width="0.0303%" height="15" fill="rgb(245,175,0)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="335.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="309" width="0.0303%" height="15" fill="rgb(208,168,36)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="319.50"></text></g><g><title>pathmap::zipper::node_along_path (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="293" width="0.0303%" height="15" fill="rgb(246,171,24)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="303.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="277" width="0.0303%" height="15" fill="rgb(215,142,24)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="287.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="261" width="0.0303%" height="15" fill="rgb(250,187,7)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="271.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="245" width="0.0303%" height="15" fill="rgb(228,66,33)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="255.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (3,172,833 samples, 0.03%)</title><rect x="40.2620%" y="229" width="0.0303%" height="15" fill="rgb(234,215,21)" fg:x="4210711854" fg:w="3172833"/><text x="40.5120%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (180,471,258 samples, 1.73%)</title><rect x="40.3228%" y="373" width="1.7256%" height="15" fill="rgb(222,191,20)" fg:x="4217072244" fg:w="180471258"/><text x="40.5728%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (180,471,258 samples, 1.73%)</title><rect x="40.3228%" y="357" width="1.7256%" height="15" fill="rgb(245,79,54)" fg:x="4217072244" fg:w="180471258"/><text x="40.5728%" y="367.50"></text></g><g><title>alloc::alloc::realloc (180,471,258 samples, 1.73%)</title><rect x="40.3228%" y="341" width="1.7256%" height="15" fill="rgb(240,10,37)" fg:x="4217072244" fg:w="180471258"/><text x="40.5728%" y="351.50"></text></g><g><title>__rustc::__rdl_realloc (177,004,825 samples, 1.69%)</title><rect x="40.3560%" y="325" width="1.6925%" height="15" fill="rgb(214,192,32)" fg:x="4220538677" fg:w="177004825"/><text x="40.6060%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (177,004,825 samples, 1.69%)</title><rect x="40.3560%" y="309" width="1.6925%" height="15" fill="rgb(209,36,54)" fg:x="4220538677" fg:w="177004825"/><text x="40.6060%" y="319.50"></text></g><g><title>realloc (173,892,996 samples, 1.66%)</title><rect x="40.3857%" y="293" width="1.6627%" height="15" fill="rgb(220,10,11)" fg:x="4223650506" fg:w="173892996"/><text x="40.6357%" y="303.50"></text></g><g><title>[libc.so.6] (173,892,996 samples, 1.66%)</title><rect x="40.3857%" y="277" width="1.6627%" height="15" fill="rgb(221,106,17)" fg:x="4223650506" fg:w="173892996"/><text x="40.6357%" y="287.50"></text></g><g><title>[libc.so.6] (164,098,313 samples, 1.57%)</title><rect x="40.4794%" y="261" width="1.5691%" height="15" fill="rgb(251,142,44)" fg:x="4233445189" fg:w="164098313"/><text x="40.7294%" y="271.50"></text></g><g><title>[libc.so.6] (141,662,224 samples, 1.35%)</title><rect x="40.6939%" y="245" width="1.3545%" height="15" fill="rgb(238,13,15)" fg:x="4255881278" fg:w="141662224"/><text x="40.9439%" y="255.50"></text></g><g><title>[libc.so.6] (31,326,455 samples, 0.30%)</title><rect x="41.7489%" y="229" width="0.2995%" height="15" fill="rgb(208,107,27)" fg:x="4366217047" fg:w="31326455"/><text x="41.9989%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,415,309 samples, 0.03%)</title><rect x="42.0485%" y="373" width="0.0327%" height="15" fill="rgb(205,136,37)" fg:x="4397543502" fg:w="3415309"/><text x="42.2985%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (200,512,969 samples, 1.92%)</title><rect x="40.2924%" y="389" width="1.9173%" height="15" fill="rgb(250,205,27)" fg:x="4213884687" fg:w="200512969"/><text x="40.5424%" y="399.50">a..</text></g><g><title>malloc (13,438,845 samples, 0.13%)</title><rect x="42.0811%" y="373" width="0.1285%" height="15" fill="rgb(210,80,43)" fg:x="4400958811" fg:w="13438845"/><text x="42.3311%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (8,874,026 samples, 0.08%)</title><rect x="42.2096%" y="389" width="0.0849%" height="15" fill="rgb(247,160,36)" fg:x="4414397656" fg:w="8874026"/><text x="42.4596%" y="399.50"></text></g><g><title>core::str::lossy::&lt;impl [u8]&gt;::utf8_chunks (2,995,704 samples, 0.03%)</title><rect x="42.2658%" y="373" width="0.0286%" height="15" fill="rgb(234,13,49)" fg:x="4420275978" fg:w="2995704"/><text x="42.5158%" y="383.50"></text></g><g><title>[libc.so.6] (12,631,359 samples, 0.12%)</title><rect x="42.3257%" y="245" width="0.1208%" height="15" fill="rgb(234,122,0)" fg:x="4426539437" fg:w="12631359"/><text x="42.5757%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="389" width="0.3064%" height="15" fill="rgb(207,146,38)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="373" width="0.3064%" height="15" fill="rgb(207,177,25)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="357" width="0.3064%" height="15" fill="rgb(211,178,42)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="341" width="0.3064%" height="15" fill="rgb(230,69,54)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="325" width="0.3064%" height="15" fill="rgb(214,135,41)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="309" width="0.3064%" height="15" fill="rgb(237,67,25)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="293" width="0.3064%" height="15" fill="rgb(222,189,50)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="277" width="0.3064%" height="15" fill="rgb(245,148,34)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (32,047,852 samples, 0.31%)</title><rect x="42.2945%" y="261" width="0.3064%" height="15" fill="rgb(222,29,6)" fg:x="4423271682" fg:w="32047852"/><text x="42.5445%" y="271.50"></text></g><g><title>cfree (16,148,738 samples, 0.15%)</title><rect x="42.4465%" y="245" width="0.1544%" height="15" fill="rgb(221,189,43)" fg:x="4439170796" fg:w="16148738"/><text x="42.6965%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt; (3,028,099 samples, 0.03%)</title><rect x="42.6320%" y="373" width="0.0290%" height="15" fill="rgb(207,36,27)" fg:x="4458571246" fg:w="3028099"/><text x="42.8820%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (3,028,099 samples, 0.03%)</title><rect x="42.6320%" y="357" width="0.0290%" height="15" fill="rgb(217,90,24)" fg:x="4458571246" fg:w="3028099"/><text x="42.8820%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,028,099 samples, 0.03%)</title><rect x="42.6320%" y="341" width="0.0290%" height="15" fill="rgb(224,66,35)" fg:x="4458571246" fg:w="3028099"/><text x="42.8820%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3,028,099 samples, 0.03%)</title><rect x="42.6320%" y="325" width="0.0290%" height="15" fill="rgb(221,13,50)" fg:x="4458571246" fg:w="3028099"/><text x="42.8820%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (3,028,099 samples, 0.03%)</title><rect x="42.6320%" y="309" width="0.0290%" height="15" fill="rgb(236,68,49)" fg:x="4458571246" fg:w="3028099"/><text x="42.8820%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;smallvec::IntoIter&lt;[u8: 8]&gt;,&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt;&gt; (12,860,658 samples, 0.12%)</title><rect x="42.6009%" y="389" width="0.1230%" height="15" fill="rgb(229,146,28)" fg:x="4455319534" fg:w="12860658"/><text x="42.8509%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[u8: 8]&gt;&gt; (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="373" width="0.0629%" height="15" fill="rgb(225,31,38)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[u8: 8]&gt;&gt; (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="357" width="0.0629%" height="15" fill="rgb(250,208,3)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="367.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="341" width="0.0629%" height="15" fill="rgb(246,54,23)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="351.50"></text></g><g><title>core::mem::drop (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="325" width="0.0629%" height="15" fill="rgb(243,76,11)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="309" width="0.0629%" height="15" fill="rgb(245,21,50)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="293" width="0.0629%" height="15" fill="rgb(228,9,43)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="277" width="0.0629%" height="15" fill="rgb(208,100,47)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="261" width="0.0629%" height="15" fill="rgb(232,26,8)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="245" width="0.0629%" height="15" fill="rgb(216,166,38)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="229" width="0.0629%" height="15" fill="rgb(251,202,51)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="213" width="0.0629%" height="15" fill="rgb(254,216,34)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="197" width="0.0629%" height="15" fill="rgb(251,32,27)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="207.50"></text></g><g><title>cfree (6,580,847 samples, 0.06%)</title><rect x="42.6610%" y="181" width="0.0629%" height="15" fill="rgb(208,127,28)" fg:x="4461599345" fg:w="6580847"/><text x="42.9110%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,536,270 samples, 0.06%)</title><rect x="42.9379%" y="341" width="0.0625%" height="15" fill="rgb(224,137,22)" fg:x="4490562708" fg:w="6536270"/><text x="43.1879%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,536,270 samples, 0.06%)</title><rect x="42.9379%" y="325" width="0.0625%" height="15" fill="rgb(254,70,32)" fg:x="4490562708" fg:w="6536270"/><text x="43.1879%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (6,536,270 samples, 0.06%)</title><rect x="42.9379%" y="309" width="0.0625%" height="15" fill="rgb(229,75,37)" fg:x="4490562708" fg:w="6536270"/><text x="43.1879%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (6,536,270 samples, 0.06%)</title><rect x="42.9379%" y="293" width="0.0625%" height="15" fill="rgb(252,64,23)" fg:x="4490562708" fg:w="6536270"/><text x="43.1879%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,536,270 samples, 0.06%)</title><rect x="42.9379%" y="277" width="0.0625%" height="15" fill="rgb(232,162,48)" fg:x="4490562708" fg:w="6536270"/><text x="43.1879%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (19,623,973 samples, 0.19%)</title><rect x="42.8447%" y="373" width="0.1876%" height="15" fill="rgb(246,160,12)" fg:x="4480816190" fg:w="19623973"/><text x="43.0947%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (19,623,973 samples, 0.19%)</title><rect x="42.8447%" y="357" width="0.1876%" height="15" fill="rgb(247,166,0)" fg:x="4480816190" fg:w="19623973"/><text x="43.0947%" y="367.50"></text></g><g><title>cfree (3,341,185 samples, 0.03%)</title><rect x="43.0004%" y="341" width="0.0319%" height="15" fill="rgb(249,219,21)" fg:x="4497098978" fg:w="3341185"/><text x="43.2504%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (13,552,453 samples, 0.13%)</title><rect x="43.0323%" y="373" width="0.1296%" height="15" fill="rgb(205,209,3)" fg:x="4500440163" fg:w="13552453"/><text x="43.2823%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (13,552,453 samples, 0.13%)</title><rect x="43.0323%" y="357" width="0.1296%" height="15" fill="rgb(243,44,1)" fg:x="4500440163" fg:w="13552453"/><text x="43.2823%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13,552,453 samples, 0.13%)</title><rect x="43.0323%" y="341" width="0.1296%" height="15" fill="rgb(206,159,16)" fg:x="4500440163" fg:w="13552453"/><text x="43.2823%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10,146,749 samples, 0.10%)</title><rect x="43.0649%" y="325" width="0.0970%" height="15" fill="rgb(244,77,30)" fg:x="4503845867" fg:w="10146749"/><text x="43.3149%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (10,146,749 samples, 0.10%)</title><rect x="43.0649%" y="309" width="0.0970%" height="15" fill="rgb(218,69,12)" fg:x="4503845867" fg:w="10146749"/><text x="43.3149%" y="319.50"></text></g><g><title>[libc.so.6] (32,527,231 samples, 0.31%)</title><rect x="43.3788%" y="229" width="0.3110%" height="15" fill="rgb(212,87,7)" fg:x="4536675570" fg:w="32527231"/><text x="43.6288%" y="239.50"></text></g><g><title>[libc.so.6] (6,442,317 samples, 0.06%)</title><rect x="43.6282%" y="213" width="0.0616%" height="15" fill="rgb(245,114,25)" fg:x="4562760484" fg:w="6442317"/><text x="43.8782%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (145,658,706 samples, 1.39%)</title><rect x="42.7239%" y="389" width="1.3928%" height="15" fill="rgb(210,61,42)" fg:x="4468180192" fg:w="145658706"/><text x="42.9739%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="373" width="0.9547%" height="15" fill="rgb(211,52,33)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="357" width="0.9547%" height="15" fill="rgb(234,58,33)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="341" width="0.9547%" height="15" fill="rgb(220,115,36)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="325" width="0.9547%" height="15" fill="rgb(243,153,54)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="309" width="0.9547%" height="15" fill="rgb(251,47,18)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="293" width="0.9547%" height="15" fill="rgb(242,102,42)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="277" width="0.9547%" height="15" fill="rgb(234,31,38)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="287.50"></text></g><g><title>__rustc::__rdl_dealloc (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="261" width="0.9547%" height="15" fill="rgb(221,117,51)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (99,846,282 samples, 0.95%)</title><rect x="43.1619%" y="245" width="0.9547%" height="15" fill="rgb(212,20,18)" fg:x="4513992616" fg:w="99846282"/><text x="43.4119%" y="255.50"></text></g><g><title>cfree (44,636,097 samples, 0.43%)</title><rect x="43.6898%" y="229" width="0.4268%" height="15" fill="rgb(245,133,36)" fg:x="4569202801" fg:w="44636097"/><text x="43.9398%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::query::QueryIterator&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (3,452,550 samples, 0.03%)</title><rect x="44.1166%" y="389" width="0.0330%" height="15" fill="rgb(212,6,19)" fg:x="4613838898" fg:w="3452550"/><text x="44.3666%" y="399.50"></text></g><g><title>[libc.so.6] (3,452,550 samples, 0.03%)</title><rect x="44.1166%" y="373" width="0.0330%" height="15" fill="rgb(218,1,36)" fg:x="4613838898" fg:w="3452550"/><text x="44.3666%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="373" width="0.0929%" height="15" fill="rgb(246,84,54)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="357" width="0.0929%" height="15" fill="rgb(242,110,6)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="341" width="0.0929%" height="15" fill="rgb(214,47,5)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="325" width="0.0929%" height="15" fill="rgb(218,159,25)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="309" width="0.0929%" height="15" fill="rgb(215,211,28)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="293" width="0.0929%" height="15" fill="rgb(238,59,32)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="277" width="0.0929%" height="15" fill="rgb(226,82,3)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,711,851 samples, 0.09%)</title><rect x="44.2116%" y="261" width="0.0929%" height="15" fill="rgb(240,164,32)" fg:x="4623768814" fg:w="9711851"/><text x="44.4616%" y="271.50"></text></g><g><title>cfree (47,805,781 samples, 0.46%)</title><rect x="44.3045%" y="245" width="0.4571%" height="15" fill="rgb(232,46,7)" fg:x="4633480665" fg:w="47805781"/><text x="44.5545%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="373" width="0.4879%" height="15" fill="rgb(229,129,53)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="357" width="0.4879%" height="15" fill="rgb(234,188,29)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="341" width="0.4879%" height="15" fill="rgb(246,141,4)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="325" width="0.4879%" height="15" fill="rgb(229,23,39)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="309" width="0.4879%" height="15" fill="rgb(206,12,3)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="293" width="0.4879%" height="15" fill="rgb(252,226,20)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="277" width="0.4879%" height="15" fill="rgb(216,123,35)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (51,029,545 samples, 0.49%)</title><rect x="44.3045%" y="261" width="0.4879%" height="15" fill="rgb(212,68,40)" fg:x="4633480665" fg:w="51029545"/><text x="44.5545%" y="271.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="245" width="0.0308%" height="15" fill="rgb(254,125,32)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="255.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="229" width="0.0308%" height="15" fill="rgb(253,97,22)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="239.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="213" width="0.0308%" height="15" fill="rgb(241,101,14)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="223.50"></text></g><g><title>pathmap::zipper::node_along_path (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="197" width="0.0308%" height="15" fill="rgb(238,103,29)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="207.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="181" width="0.0308%" height="15" fill="rgb(233,195,47)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="191.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="165" width="0.0308%" height="15" fill="rgb(246,218,30)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="175.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="149" width="0.0308%" height="15" fill="rgb(219,145,47)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="159.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (3,223,764 samples, 0.03%)</title><rect x="44.7616%" y="133" width="0.0308%" height="15" fill="rgb(243,12,26)" fg:x="4681286446" fg:w="3223764"/><text x="45.0116%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (74,039,007 samples, 0.71%)</title><rect x="44.1497%" y="389" width="0.7079%" height="15" fill="rgb(214,87,16)" fg:x="4617291448" fg:w="74039007"/><text x="44.3997%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::OwnedOrBorrowed&lt;pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;(),()&gt;&gt;&gt; (6,820,245 samples, 0.07%)</title><rect x="44.7924%" y="373" width="0.0652%" height="15" fill="rgb(208,99,42)" fg:x="4684510210" fg:w="6820245"/><text x="45.0424%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,622,021 samples, 0.22%)</title><rect x="44.9221%" y="357" width="0.2163%" height="15" fill="rgb(253,99,2)" fg:x="4698080452" fg:w="22622021"/><text x="45.1721%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (19,534,073 samples, 0.19%)</title><rect x="44.9517%" y="341" width="0.1868%" height="15" fill="rgb(220,168,23)" fg:x="4701168400" fg:w="19534073"/><text x="45.2017%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (19,534,073 samples, 0.19%)</title><rect x="44.9517%" y="325" width="0.1868%" height="15" fill="rgb(242,38,24)" fg:x="4701168400" fg:w="19534073"/><text x="45.2017%" y="335.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15,895,922 samples, 0.15%)</title><rect x="45.1385%" y="357" width="0.1520%" height="15" fill="rgb(225,182,9)" fg:x="4720702473" fg:w="15895922"/><text x="45.3885%" y="367.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::set_len (15,895,922 samples, 0.15%)</title><rect x="45.1385%" y="341" width="0.1520%" height="15" fill="rgb(243,178,37)" fg:x="4720702473" fg:w="15895922"/><text x="45.3885%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (98,106,384 samples, 0.94%)</title><rect x="45.2904%" y="357" width="0.9381%" height="15" fill="rgb(232,139,19)" fg:x="4736598395" fg:w="98106384"/><text x="45.5404%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (85,234,314 samples, 0.81%)</title><rect x="45.4135%" y="341" width="0.8150%" height="15" fill="rgb(225,201,24)" fg:x="4749470465" fg:w="85234314"/><text x="45.6635%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (85,234,314 samples, 0.81%)</title><rect x="45.4135%" y="325" width="0.8150%" height="15" fill="rgb(221,47,46)" fg:x="4749470465" fg:w="85234314"/><text x="45.6635%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (85,234,314 samples, 0.81%)</title><rect x="45.4135%" y="309" width="0.8150%" height="15" fill="rgb(249,23,13)" fg:x="4749470465" fg:w="85234314"/><text x="45.6635%" y="319.50"></text></g><g><title>alloc::alloc::alloc (85,234,314 samples, 0.81%)</title><rect x="45.4135%" y="293" width="0.8150%" height="15" fill="rgb(219,9,5)" fg:x="4749470465" fg:w="85234314"/><text x="45.6635%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (85,234,314 samples, 0.81%)</title><rect x="45.4135%" y="277" width="0.8150%" height="15" fill="rgb(254,171,16)" fg:x="4749470465" fg:w="85234314"/><text x="45.6635%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (85,234,314 samples, 0.81%)</title><rect x="45.4135%" y="261" width="0.8150%" height="15" fill="rgb(230,171,20)" fg:x="4749470465" fg:w="85234314"/><text x="45.6635%" y="271.50"></text></g><g><title>malloc (82,011,823 samples, 0.78%)</title><rect x="45.4443%" y="245" width="0.7842%" height="15" fill="rgb(210,71,41)" fg:x="4752692956" fg:w="82011823"/><text x="45.6943%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter_map (9,913,349 samples, 0.09%)</title><rect x="46.2285%" y="357" width="0.0948%" height="15" fill="rgb(206,173,20)" fg:x="4834704779" fg:w="9913349"/><text x="46.4785%" y="367.50"></text></g><g><title>core::iter::adapters::filter_map::FilterMap&lt;I,F&gt;::new (9,913,349 samples, 0.09%)</title><rect x="46.2285%" y="341" width="0.0948%" height="15" fill="rgb(233,88,34)" fg:x="4834704779" fg:w="9913349"/><text x="46.4785%" y="351.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (6,050,958 samples, 0.06%)</title><rect x="46.6960%" y="261" width="0.0579%" height="15" fill="rgb(223,209,46)" fg:x="4883596339" fg:w="6050958"/><text x="46.9460%" y="271.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as core::convert::From&lt;[u64: 4]&gt;&gt;::from (6,050,958 samples, 0.06%)</title><rect x="46.6960%" y="245" width="0.0579%" height="15" fill="rgb(250,43,18)" fg:x="4883596339" fg:w="6050958"/><text x="46.9460%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_branches_mask (22,920,709 samples, 0.22%)</title><rect x="46.6004%" y="293" width="0.2192%" height="15" fill="rgb(208,13,10)" fg:x="4873591743" fg:w="22920709"/><text x="46.8504%" y="303.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_branches_mask (12,916,113 samples, 0.12%)</title><rect x="46.6960%" y="277" width="0.1235%" height="15" fill="rgb(212,200,36)" fg:x="4883596339" fg:w="12916113"/><text x="46.9460%" y="287.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::get_both_keys (6,865,155 samples, 0.07%)</title><rect x="46.7539%" y="261" width="0.0656%" height="15" fill="rgb(225,90,30)" fg:x="4889647297" fg:w="6865155"/><text x="47.0039%" y="271.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::is_used (6,865,155 samples, 0.07%)</title><rect x="46.7539%" y="245" width="0.0656%" height="15" fill="rgb(236,182,39)" fg:x="4889647297" fg:w="6865155"/><text x="47.0039%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,925,605 samples, 0.03%)</title><rect x="46.8195%" y="277" width="0.0280%" height="15" fill="rgb(212,144,35)" fg:x="4896512452" fg:w="2925605"/><text x="47.0695%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,925,605 samples, 0.03%)</title><rect x="46.8195%" y="261" width="0.0280%" height="15" fill="rgb(228,63,44)" fg:x="4896512452" fg:w="2925605"/><text x="47.0695%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,925,605 samples, 0.03%)</title><rect x="46.8195%" y="245" width="0.0280%" height="15" fill="rgb(228,109,6)" fg:x="4896512452" fg:w="2925605"/><text x="47.0695%" y="255.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (42,647,408 samples, 0.41%)</title><rect x="46.6004%" y="325" width="0.4078%" height="15" fill="rgb(238,117,24)" fg:x="4873591743" fg:w="42647408"/><text x="46.8504%" y="335.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (42,647,408 samples, 0.41%)</title><rect x="46.6004%" y="309" width="0.4078%" height="15" fill="rgb(242,26,26)" fg:x="4873591743" fg:w="42647408"/><text x="46.8504%" y="319.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (19,726,699 samples, 0.19%)</title><rect x="46.8195%" y="293" width="0.1886%" height="15" fill="rgb(221,92,48)" fg:x="4896512452" fg:w="19726699"/><text x="47.0695%" y="303.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (16,801,094 samples, 0.16%)</title><rect x="46.8475%" y="277" width="0.1606%" height="15" fill="rgb(209,209,32)" fg:x="4899438057" fg:w="16801094"/><text x="47.0975%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (13,421,099 samples, 0.13%)</title><rect x="46.8798%" y="261" width="0.1283%" height="15" fill="rgb(221,70,22)" fg:x="4902818052" fg:w="13421099"/><text x="47.1298%" y="271.50"></text></g><g><title>&lt;u8 as core::iter::range::Step&gt;::forward_unchecked (122,714,665 samples, 1.17%)</title><rect x="49.6398%" y="213" width="1.1734%" height="15" fill="rgb(248,145,5)" fg:x="5191462164" fg:w="122714665"/><text x="49.8898%" y="223.50"></text></g><g><title>core::num::&lt;impl u8&gt;::unchecked_add (122,714,665 samples, 1.17%)</title><rect x="49.6398%" y="197" width="1.1734%" height="15" fill="rgb(226,116,26)" fg:x="5191462164" fg:w="122714665"/><text x="49.8898%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (68,344,392 samples, 0.65%)</title><rect x="50.8131%" y="213" width="0.6535%" height="15" fill="rgb(244,5,17)" fg:x="5314176829" fg:w="68344392"/><text x="51.0631%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,031,312,334 samples, 9.86%)</title><rect x="47.0081%" y="325" width="9.8612%" height="15" fill="rgb(252,159,33)" fg:x="4916239151" fg:w="1031312334"/><text x="47.2581%" y="335.50">core::iter::tr..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (1,031,312,334 samples, 9.86%)</title><rect x="47.0081%" y="309" width="9.8612%" height="15" fill="rgb(206,71,0)" fg:x="4916239151" fg:w="1031312334"/><text x="47.2581%" y="319.50">&lt;smallvec::Sma..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1,031,312,334 samples, 9.86%)</title><rect x="47.0081%" y="293" width="9.8612%" height="15" fill="rgb(233,118,54)" fg:x="4916239151" fg:w="1031312334"/><text x="47.2581%" y="303.50">&lt;smallvec::Sma..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (990,565,899 samples, 9.47%)</title><rect x="47.3977%" y="277" width="9.4716%" height="15" fill="rgb(234,83,48)" fg:x="4956985586" fg:w="990565899"/><text x="47.6477%" y="287.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::find (990,565,899 samples, 9.47%)</title><rect x="47.3977%" y="261" width="9.4716%" height="15" fill="rgb(228,3,54)" fg:x="4956985586" fg:w="990565899"/><text x="47.6477%" y="271.50">core::iter::tr..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (990,565,899 samples, 9.47%)</title><rect x="47.3977%" y="245" width="9.4716%" height="15" fill="rgb(226,155,13)" fg:x="4956985586" fg:w="990565899"/><text x="47.6477%" y="255.50">core::iter::ra..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (990,565,899 samples, 9.47%)</title><rect x="47.3977%" y="229" width="9.4716%" height="15" fill="rgb(241,28,37)" fg:x="4956985586" fg:w="990565899"/><text x="47.6477%" y="239.50">&lt;core::ops::ra..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (565,030,264 samples, 5.40%)</title><rect x="51.4666%" y="213" width="5.4027%" height="15" fill="rgb(233,93,10)" fg:x="5382521221" fg:w="565030264"/><text x="51.7166%" y="223.50">core::i..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (565,030,264 samples, 5.40%)</title><rect x="51.4666%" y="197" width="5.4027%" height="15" fill="rgb(225,113,19)" fg:x="5382521221" fg:w="565030264"/><text x="51.7166%" y="207.50">core::o..</text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}::{{closure}} (565,030,264 samples, 5.40%)</title><rect x="51.4666%" y="181" width="5.4027%" height="15" fill="rgb(241,2,18)" fg:x="5382521221" fg:w="565030264"/><text x="51.7166%" y="191.50">&lt;liblev..</text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (565,030,264 samples, 5.40%)</title><rect x="51.4666%" y="165" width="5.4027%" height="15" fill="rgb(228,207,21)" fg:x="5382521221" fg:w="565030264"/><text x="51.7166%" y="175.50">&lt;pathma..</text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (565,030,264 samples, 5.40%)</title><rect x="51.4666%" y="149" width="5.4027%" height="15" fill="rgb(213,211,35)" fg:x="5382521221" fg:w="565030264"/><text x="51.7166%" y="159.50">&lt;[u64: ..</text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (1,127,975,129 samples, 10.79%)</title><rect x="46.6004%" y="341" width="10.7855%" height="15" fill="rgb(209,83,10)" fg:x="4873591743" fg:w="1127975129"/><text x="46.8504%" y="351.50">&lt;liblevenshtein:..</text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (54,015,387 samples, 0.52%)</title><rect x="56.8693%" y="325" width="0.5165%" height="15" fill="rgb(209,164,1)" fg:x="5947551485" fg:w="54015387"/><text x="57.1193%" y="335.50"></text></g><g><title>cfree (51,060,126 samples, 0.49%)</title><rect x="56.8976%" y="309" width="0.4882%" height="15" fill="rgb(213,184,43)" fg:x="5950506746" fg:w="51060126"/><text x="57.1476%" y="319.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (1,309,801,291 samples, 12.52%)</title><rect x="44.9221%" y="373" width="12.5241%" height="15" fill="rgb(231,61,34)" fg:x="4698080452" fg:w="1309801291"/><text x="45.1721%" y="383.50">&lt;liblevenshtein::di..</text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (1,163,263,615 samples, 11.12%)</title><rect x="46.3233%" y="357" width="11.1229%" height="15" fill="rgb(235,75,3)" fg:x="4844618128" fg:w="1163263615"/><text x="46.5733%" y="367.50">liblevenshtein::..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt; (6,314,871 samples, 0.06%)</title><rect x="57.3858%" y="341" width="0.0604%" height="15" fill="rgb(220,106,47)" fg:x="6001566872" fg:w="6314871"/><text x="57.6358%" y="351.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6,314,871 samples, 0.06%)</title><rect x="57.3858%" y="325" width="0.0604%" height="15" fill="rgb(210,196,33)" fg:x="6001566872" fg:w="6314871"/><text x="57.6358%" y="335.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (6,314,871 samples, 0.06%)</title><rect x="57.3858%" y="309" width="0.0604%" height="15" fill="rgb(229,154,42)" fg:x="6001566872" fg:w="6314871"/><text x="57.6358%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (6,314,871 samples, 0.06%)</title><rect x="57.3858%" y="293" width="0.0604%" height="15" fill="rgb(228,114,26)" fg:x="6001566872" fg:w="6314871"/><text x="57.6358%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (6,314,871 samples, 0.06%)</title><rect x="57.3858%" y="277" width="0.0604%" height="15" fill="rgb(208,144,1)" fg:x="6001566872" fg:w="6314871"/><text x="57.6358%" y="287.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,149,181 samples, 0.03%)</title><rect x="57.4462%" y="309" width="0.0301%" height="15" fill="rgb(239,112,37)" fg:x="6007881743" fg:w="3149181"/><text x="57.6962%" y="319.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (6,527,792 samples, 0.06%)</title><rect x="57.4462%" y="373" width="0.0624%" height="15" fill="rgb(210,96,50)" fg:x="6007881743" fg:w="6527792"/><text x="57.6962%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,527,792 samples, 0.06%)</title><rect x="57.4462%" y="357" width="0.0624%" height="15" fill="rgb(222,178,2)" fg:x="6007881743" fg:w="6527792"/><text x="57.6962%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (6,527,792 samples, 0.06%)</title><rect x="57.4462%" y="341" width="0.0624%" height="15" fill="rgb(226,74,18)" fg:x="6007881743" fg:w="6527792"/><text x="57.6962%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6,527,792 samples, 0.06%)</title><rect x="57.4462%" y="325" width="0.0624%" height="15" fill="rgb(225,67,54)" fg:x="6007881743" fg:w="6527792"/><text x="57.6962%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (3,378,611 samples, 0.03%)</title><rect x="57.4763%" y="309" width="0.0323%" height="15" fill="rgb(251,92,32)" fg:x="6011030924" fg:w="3378611"/><text x="57.7263%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37,932,798 samples, 0.36%)</title><rect x="57.8178%" y="357" width="0.3627%" height="15" fill="rgb(228,149,22)" fg:x="6046739100" fg:w="37932798"/><text x="58.0678%" y="367.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (37,932,798 samples, 0.36%)</title><rect x="57.8178%" y="341" width="0.3627%" height="15" fill="rgb(243,54,13)" fg:x="6046739100" fg:w="37932798"/><text x="58.0678%" y="351.50"></text></g><g><title>liblevenshtein::transducer::pool::StatePool::acquire (12,643,065 samples, 0.12%)</title><rect x="58.1805%" y="357" width="0.1209%" height="15" fill="rgb(243,180,28)" fg:x="6084671898" fg:w="12643065"/><text x="58.4305%" y="367.50"></text></g><g><title>liblevenshtein::transducer::transition::characteristic_vector (25,190,890 samples, 0.24%)</title><rect x="58.3014%" y="357" width="0.2409%" height="15" fill="rgb(208,167,24)" fg:x="6097314963" fg:w="25190890"/><text x="58.5514%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,946,916 samples, 0.03%)</title><rect x="58.5140%" y="341" width="0.0282%" height="15" fill="rgb(245,73,45)" fg:x="6119558937" fg:w="2946916"/><text x="58.7640%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,946,916 samples, 0.03%)</title><rect x="58.5140%" y="325" width="0.0282%" height="15" fill="rgb(237,203,48)" fg:x="6119558937" fg:w="2946916"/><text x="58.7640%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,018,415 samples, 0.06%)</title><rect x="58.5738%" y="325" width="0.0575%" height="15" fill="rgb(211,197,16)" fg:x="6125808796" fg:w="6018415"/><text x="58.8238%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,938,463 samples, 0.03%)</title><rect x="58.6033%" y="309" width="0.0281%" height="15" fill="rgb(243,99,51)" fg:x="6128888748" fg:w="2938463"/><text x="58.8533%" y="319.50"></text></g><g><title>liblevenshtein::transducer::state::State::copy_from (26,251,798 samples, 0.25%)</title><rect x="58.5422%" y="341" width="0.2510%" height="15" fill="rgb(215,123,29)" fg:x="6122505853" fg:w="26251798"/><text x="58.7922%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16,930,440 samples, 0.16%)</title><rect x="58.6314%" y="325" width="0.1619%" height="15" fill="rgb(239,186,37)" fg:x="6131827211" fg:w="16930440"/><text x="58.8814%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (16,930,440 samples, 0.16%)</title><rect x="58.6314%" y="309" width="0.1619%" height="15" fill="rgb(252,136,39)" fg:x="6131827211" fg:w="16930440"/><text x="58.8814%" y="319.50"></text></g><g><title>core::ptr::write (16,930,440 samples, 0.16%)</title><rect x="58.6314%" y="293" width="0.1619%" height="15" fill="rgb(223,213,32)" fg:x="6131827211" fg:w="16930440"/><text x="58.8814%" y="303.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::clone::Clone&gt;::clone (6,654,313 samples, 0.06%)</title><rect x="58.9217%" y="325" width="0.0636%" height="15" fill="rgb(233,115,5)" fg:x="6162187311" fg:w="6654313"/><text x="59.1717%" y="335.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (19,562,138 samples, 0.19%)</title><rect x="58.9853%" y="309" width="0.1870%" height="15" fill="rgb(207,226,44)" fg:x="6168841624" fg:w="19562138"/><text x="59.2353%" y="319.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (19,562,138 samples, 0.19%)</title><rect x="58.9853%" y="293" width="0.1870%" height="15" fill="rgb(208,126,0)" fg:x="6168841624" fg:w="19562138"/><text x="59.2353%" y="303.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (25,981,597 samples, 0.25%)</title><rect x="58.9853%" y="325" width="0.2484%" height="15" fill="rgb(244,66,21)" fg:x="6168841624" fg:w="25981597"/><text x="59.2353%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,419,459 samples, 0.06%)</title><rect x="59.1723%" y="309" width="0.0614%" height="15" fill="rgb(222,97,12)" fg:x="6188403762" fg:w="6419459"/><text x="59.4223%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,419,459 samples, 0.06%)</title><rect x="59.1723%" y="293" width="0.0614%" height="15" fill="rgb(219,213,19)" fg:x="6188403762" fg:w="6419459"/><text x="59.4223%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13,354,831 samples, 0.13%)</title><rect x="59.2337%" y="325" width="0.1277%" height="15" fill="rgb(252,169,30)" fg:x="6194823221" fg:w="13354831"/><text x="59.4837%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13,354,831 samples, 0.13%)</title><rect x="59.2337%" y="309" width="0.1277%" height="15" fill="rgb(206,32,51)" fg:x="6194823221" fg:w="13354831"/><text x="59.4837%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13,354,831 samples, 0.13%)</title><rect x="59.2337%" y="293" width="0.1277%" height="15" fill="rgb(250,172,42)" fg:x="6194823221" fg:w="13354831"/><text x="59.4837%" y="303.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (13,354,831 samples, 0.13%)</title><rect x="59.2337%" y="277" width="0.1277%" height="15" fill="rgb(209,34,43)" fg:x="6194823221" fg:w="13354831"/><text x="59.4837%" y="287.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::PartialEq&gt;::eq (13,354,831 samples, 0.13%)</title><rect x="59.2337%" y="261" width="0.1277%" height="15" fill="rgb(223,11,35)" fg:x="6194823221" fg:w="13354831"/><text x="59.4837%" y="271.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (20,065,844 samples, 0.19%)</title><rect x="59.3614%" y="325" width="0.1919%" height="15" fill="rgb(251,219,26)" fg:x="6208178052" fg:w="20065844"/><text x="59.6114%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (20,065,844 samples, 0.19%)</title><rect x="59.3614%" y="309" width="0.1919%" height="15" fill="rgb(231,119,3)" fg:x="6208178052" fg:w="20065844"/><text x="59.6114%" y="319.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (6,548,970 samples, 0.06%)</title><rect x="59.4907%" y="293" width="0.0626%" height="15" fill="rgb(216,97,11)" fg:x="6221694926" fg:w="6548970"/><text x="59.7407%" y="303.50"></text></g><g><title>core::ptr::write (9,800,360 samples, 0.09%)</title><rect x="59.6780%" y="309" width="0.0937%" height="15" fill="rgb(223,59,9)" fg:x="6241292028" fg:w="9800360"/><text x="59.9280%" y="319.50"></text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_into (167,557,686 samples, 1.60%)</title><rect x="58.5422%" y="357" width="1.6022%" height="15" fill="rgb(233,93,31)" fg:x="6122505853" fg:w="167557686"/><text x="58.7922%" y="367.50"></text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_mut (141,305,888 samples, 1.35%)</title><rect x="58.7932%" y="341" width="1.3511%" height="15" fill="rgb(239,81,33)" fg:x="6148757651" fg:w="141305888"/><text x="59.0432%" y="351.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (61,819,643 samples, 0.59%)</title><rect x="59.5533%" y="325" width="0.5911%" height="15" fill="rgb(213,120,34)" fg:x="6228243896" fg:w="61819643"/><text x="59.8033%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (38,971,151 samples, 0.37%)</title><rect x="59.7717%" y="309" width="0.3726%" height="15" fill="rgb(243,49,53)" fg:x="6251092388" fg:w="38971151"/><text x="60.0217%" y="319.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (19,495,360 samples, 0.19%)</title><rect x="59.9580%" y="293" width="0.1864%" height="15" fill="rgb(247,216,33)" fg:x="6270568179" fg:w="19495360"/><text x="60.2080%" y="303.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (1,615,095,992 samples, 15.44%)</title><rect x="44.8576%" y="389" width="15.4432%" height="15" fill="rgb(226,26,14)" fg:x="4691330455" fg:w="1615095992"/><text x="45.1076%" y="399.50">liblevenshtein::transduc..</text></g><g><title>liblevenshtein::transducer::transition::transition_state_pooled (292,016,912 samples, 2.79%)</title><rect x="57.5086%" y="373" width="2.7922%" height="15" fill="rgb(215,49,53)" fg:x="6014409535" fg:w="292016912"/><text x="57.7586%" y="383.50">li..</text></g><g><title>liblevenshtein::transducer::transition::transition_position (16,362,908 samples, 0.16%)</title><rect x="60.1444%" y="357" width="0.1565%" height="15" fill="rgb(245,162,40)" fg:x="6290063539" fg:w="16362908"/><text x="60.3944%" y="367.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_standard (6,303,745 samples, 0.06%)</title><rect x="60.2406%" y="341" width="0.0603%" height="15" fill="rgb(229,68,17)" fg:x="6300122702" fg:w="6303745"/><text x="60.4906%" y="351.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::new (3,194,820 samples, 0.03%)</title><rect x="60.2703%" y="325" width="0.0305%" height="15" fill="rgb(213,182,10)" fg:x="6303231627" fg:w="3194820"/><text x="60.5203%" y="335.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,516,846 samples, 0.03%)</title><rect x="60.6986%" y="373" width="0.0336%" height="15" fill="rgb(245,125,30)" fg:x="6348028515" fg:w="3516846"/><text x="60.9486%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,516,846 samples, 0.03%)</title><rect x="60.6986%" y="357" width="0.0336%" height="15" fill="rgb(232,202,2)" fg:x="6348028515" fg:w="3516846"/><text x="60.9486%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,516,846 samples, 0.03%)</title><rect x="60.6986%" y="341" width="0.0336%" height="15" fill="rgb(237,140,51)" fg:x="6348028515" fg:w="3516846"/><text x="60.9486%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3,516,846 samples, 0.03%)</title><rect x="60.6986%" y="325" width="0.0336%" height="15" fill="rgb(236,157,25)" fg:x="6348028515" fg:w="3516846"/><text x="60.9486%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,516,846 samples, 0.03%)</title><rect x="60.6986%" y="309" width="0.0336%" height="15" fill="rgb(219,209,0)" fg:x="6348028515" fg:w="3516846"/><text x="60.9486%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,516,846 samples, 0.03%)</title><rect x="60.6986%" y="293" width="0.0336%" height="15" fill="rgb(240,116,54)" fg:x="6348028515" fg:w="3516846"/><text x="60.9486%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,516,846 samples, 0.03%)</title><rect x="60.6986%" y="277" width="0.0336%" height="15" fill="rgb(216,10,36)" fg:x="6348028515" fg:w="3516846"/><text x="60.9486%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,187,963 samples, 0.03%)</title><rect x="60.7323%" y="373" width="0.0305%" height="15" fill="rgb(222,72,44)" fg:x="6351545361" fg:w="3187963"/><text x="60.9823%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6,631,229 samples, 0.06%)</title><rect x="60.8881%" y="341" width="0.0634%" height="15" fill="rgb(232,159,9)" fg:x="6367843965" fg:w="6631229"/><text x="61.1381%" y="351.50"></text></g><g><title>core::ptr::copy (15,845,904 samples, 0.15%)</title><rect x="60.9515%" y="341" width="0.1515%" height="15" fill="rgb(210,39,32)" fg:x="6374475194" fg:w="15845904"/><text x="61.2015%" y="351.50"></text></g><g><title>[libc.so.6] (15,845,904 samples, 0.15%)</title><rect x="60.9515%" y="325" width="0.1515%" height="15" fill="rgb(216,194,45)" fg:x="6374475194" fg:w="15845904"/><text x="61.2015%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9,249,193 samples, 0.09%)</title><rect x="61.1030%" y="341" width="0.0884%" height="15" fill="rgb(218,18,35)" fg:x="6390321098" fg:w="9249193"/><text x="61.3530%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (58,037,234 samples, 0.55%)</title><rect x="60.7627%" y="373" width="0.5549%" height="15" fill="rgb(207,83,51)" fg:x="6354733324" fg:w="58037234"/><text x="61.0127%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert_mut (58,037,234 samples, 0.55%)</title><rect x="60.7627%" y="357" width="0.5549%" height="15" fill="rgb(225,63,43)" fg:x="6354733324" fg:w="58037234"/><text x="61.0127%" y="367.50"></text></g><g><title>core::ptr::write (13,200,267 samples, 0.13%)</title><rect x="61.1915%" y="341" width="0.1262%" height="15" fill="rgb(207,57,36)" fg:x="6399570291" fg:w="13200267"/><text x="61.4415%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (3,465,694 samples, 0.03%)</title><rect x="61.3177%" y="341" width="0.0331%" height="15" fill="rgb(216,99,33)" fg:x="6412770558" fg:w="3465694"/><text x="61.5677%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,465,694 samples, 0.03%)</title><rect x="61.3177%" y="325" width="0.0331%" height="15" fill="rgb(225,42,16)" fg:x="6412770558" fg:w="3465694"/><text x="61.5677%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (6,745,667 samples, 0.06%)</title><rect x="61.3177%" y="373" width="0.0645%" height="15" fill="rgb(220,201,45)" fg:x="6412770558" fg:w="6745667"/><text x="61.5677%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (6,745,667 samples, 0.06%)</title><rect x="61.3177%" y="357" width="0.0645%" height="15" fill="rgb(225,33,4)" fg:x="6412770558" fg:w="6745667"/><text x="61.5677%" y="367.50"></text></g><g><title>core::mem::drop (3,279,973 samples, 0.03%)</title><rect x="61.3508%" y="341" width="0.0314%" height="15" fill="rgb(224,33,50)" fg:x="6416236252" fg:w="3279973"/><text x="61.6008%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;liblevenshtein::transducer::position::Position,alloc::alloc::Global&gt;&gt; (3,279,973 samples, 0.03%)</title><rect x="61.3508%" y="325" width="0.0314%" height="15" fill="rgb(246,198,51)" fg:x="6416236252" fg:w="3279973"/><text x="61.6008%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,279,973 samples, 0.03%)</title><rect x="61.3508%" y="309" width="0.0314%" height="15" fill="rgb(205,22,4)" fg:x="6416236252" fg:w="3279973"/><text x="61.6008%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3,279,973 samples, 0.03%)</title><rect x="61.3508%" y="293" width="0.0314%" height="15" fill="rgb(206,3,8)" fg:x="6416236252" fg:w="3279973"/><text x="61.6008%" y="303.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (19,801,235 samples, 0.19%)</title><rect x="61.6240%" y="341" width="0.1893%" height="15" fill="rgb(251,23,15)" fg:x="6444802168" fg:w="19801235"/><text x="61.8740%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search::{{closure}} (12,422,553 samples, 0.12%)</title><rect x="61.8133%" y="341" width="0.1188%" height="15" fill="rgb(252,88,28)" fg:x="6464603403" fg:w="12422553"/><text x="62.0633%" y="351.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::Ord&gt;::cmp (12,422,553 samples, 0.12%)</title><rect x="61.8133%" y="325" width="0.1188%" height="15" fill="rgb(212,127,14)" fg:x="6464603403" fg:w="12422553"/><text x="62.0633%" y="335.50"></text></g><g><title>liblevenshtein::transducer::position::Position::compare (12,422,553 samples, 0.12%)</title><rect x="61.8133%" y="309" width="0.1188%" height="15" fill="rgb(247,145,37)" fg:x="6464603403" fg:w="12422553"/><text x="62.0633%" y="319.50"></text></g><g><title>core::cmp::Ordering::then_with (3,032,206 samples, 0.03%)</title><rect x="61.9031%" y="293" width="0.0290%" height="15" fill="rgb(209,117,53)" fg:x="6473993750" fg:w="3032206"/><text x="62.1531%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (67,448,037 samples, 0.64%)</title><rect x="61.3822%" y="373" width="0.6449%" height="15" fill="rgb(212,90,42)" fg:x="6419516225" fg:w="67448037"/><text x="61.6322%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (67,448,037 samples, 0.64%)</title><rect x="61.3822%" y="357" width="0.6449%" height="15" fill="rgb(218,164,37)" fg:x="6419516225" fg:w="67448037"/><text x="61.6322%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9,938,306 samples, 0.10%)</title><rect x="61.9321%" y="341" width="0.0950%" height="15" fill="rgb(246,65,34)" fg:x="6477025956" fg:w="9938306"/><text x="62.1821%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,938,306 samples, 0.10%)</title><rect x="61.9321%" y="325" width="0.0950%" height="15" fill="rgb(231,100,33)" fg:x="6477025956" fg:w="9938306"/><text x="62.1821%" y="335.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (208,377,923 samples, 1.99%)</title><rect x="60.3008%" y="389" width="1.9925%" height="15" fill="rgb(228,126,14)" fg:x="6306426447" fg:w="208377923"/><text x="60.5508%" y="399.50">l..</text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (27,840,108 samples, 0.27%)</title><rect x="62.0271%" y="373" width="0.2662%" height="15" fill="rgb(215,173,21)" fg:x="6486964262" fg:w="27840108"/><text x="62.2771%" y="383.50"></text></g><g><title>malloc (19,051,060 samples, 0.18%)</title><rect x="62.2933%" y="389" width="0.1822%" height="15" fill="rgb(210,6,40)" fg:x="6514804370" fg:w="19051060"/><text x="62.5433%" y="399.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::ensure_root (9,981,928 samples, 0.10%)</title><rect x="62.7834%" y="373" width="0.0954%" height="15" fill="rgb(212,48,18)" fg:x="6566055434" fg:w="9981928"/><text x="63.0334%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (9,981,928 samples, 0.10%)</title><rect x="62.7834%" y="357" width="0.0954%" height="15" fill="rgb(230,214,11)" fg:x="6566055434" fg:w="9981928"/><text x="63.0334%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (64,447,907 samples, 0.62%)</title><rect x="63.1617%" y="341" width="0.6162%" height="15" fill="rgb(254,105,39)" fg:x="6605617890" fg:w="64447907"/><text x="63.4117%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (64,447,907 samples, 0.62%)</title><rect x="63.1617%" y="325" width="0.6162%" height="15" fill="rgb(245,158,5)" fg:x="6605617890" fg:w="64447907"/><text x="63.4117%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (64,447,907 samples, 0.62%)</title><rect x="63.1617%" y="309" width="0.6162%" height="15" fill="rgb(249,208,11)" fg:x="6605617890" fg:w="64447907"/><text x="63.4117%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (48,845,712 samples, 0.47%)</title><rect x="63.3108%" y="293" width="0.4671%" height="15" fill="rgb(210,39,28)" fg:x="6621220085" fg:w="48845712"/><text x="63.5608%" y="303.50"></text></g><g><title>[libc.so.6] (39,195,693 samples, 0.37%)</title><rect x="63.4031%" y="277" width="0.3748%" height="15" fill="rgb(211,56,53)" fg:x="6630870104" fg:w="39195693"/><text x="63.6531%" y="287.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (6,277,894 samples, 0.06%)</title><rect x="63.8686%" y="181" width="0.0600%" height="15" fill="rgb(226,201,30)" fg:x="6679548716" fg:w="6277894"/><text x="64.1186%" y="191.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (6,277,894 samples, 0.06%)</title><rect x="63.8686%" y="165" width="0.0600%" height="15" fill="rgb(239,101,34)" fg:x="6679548716" fg:w="6277894"/><text x="64.1186%" y="175.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (6,277,894 samples, 0.06%)</title><rect x="63.8686%" y="149" width="0.0600%" height="15" fill="rgb(226,209,5)" fg:x="6679548716" fg:w="6277894"/><text x="64.1186%" y="159.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (6,277,894 samples, 0.06%)</title><rect x="63.8686%" y="133" width="0.0600%" height="15" fill="rgb(250,105,47)" fg:x="6679548716" fg:w="6277894"/><text x="64.1186%" y="143.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (6,277,894 samples, 0.06%)</title><rect x="63.8686%" y="117" width="0.0600%" height="15" fill="rgb(230,72,3)" fg:x="6679548716" fg:w="6277894"/><text x="64.1186%" y="127.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (6,277,894 samples, 0.06%)</title><rect x="63.8686%" y="101" width="0.0600%" height="15" fill="rgb(232,218,39)" fg:x="6679548716" fg:w="6277894"/><text x="64.1186%" y="111.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_branches_mask (6,277,894 samples, 0.06%)</title><rect x="63.8686%" y="85" width="0.0600%" height="15" fill="rgb(248,166,6)" fg:x="6679548716" fg:w="6277894"/><text x="64.1186%" y="95.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_branches_mask (2,942,165 samples, 0.03%)</title><rect x="63.9005%" y="69" width="0.0281%" height="15" fill="rgb(247,89,20)" fg:x="6682884445" fg:w="2942165"/><text x="64.1505%" y="79.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::get_both_keys (2,942,165 samples, 0.03%)</title><rect x="63.9005%" y="53" width="0.0281%" height="15" fill="rgb(248,130,54)" fg:x="6682884445" fg:w="2942165"/><text x="64.1505%" y="63.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::is_used (2,942,165 samples, 0.03%)</title><rect x="63.9005%" y="37" width="0.0281%" height="15" fill="rgb(234,196,4)" fg:x="6682884445" fg:w="2942165"/><text x="64.1505%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (71,287,307 samples, 0.68%)</title><rect x="63.7779%" y="341" width="0.6816%" height="15" fill="rgb(250,143,31)" fg:x="6670065797" fg:w="71287307"/><text x="64.0279%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (71,287,307 samples, 0.68%)</title><rect x="63.7779%" y="325" width="0.6816%" height="15" fill="rgb(211,110,34)" fg:x="6670065797" fg:w="71287307"/><text x="64.0279%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (71,287,307 samples, 0.68%)</title><rect x="63.7779%" y="309" width="0.6816%" height="15" fill="rgb(215,124,48)" fg:x="6670065797" fg:w="71287307"/><text x="64.0279%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (71,287,307 samples, 0.68%)</title><rect x="63.7779%" y="293" width="0.6816%" height="15" fill="rgb(216,46,13)" fg:x="6670065797" fg:w="71287307"/><text x="64.0279%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (71,287,307 samples, 0.68%)</title><rect x="63.7779%" y="277" width="0.6816%" height="15" fill="rgb(205,184,25)" fg:x="6670065797" fg:w="71287307"/><text x="64.0279%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68,213,733 samples, 0.65%)</title><rect x="63.8073%" y="261" width="0.6522%" height="15" fill="rgb(228,1,10)" fg:x="6673139371" fg:w="68213733"/><text x="64.0573%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68,213,733 samples, 0.65%)</title><rect x="63.8073%" y="245" width="0.6522%" height="15" fill="rgb(213,116,27)" fg:x="6673139371" fg:w="68213733"/><text x="64.0573%" y="255.50"></text></g><g><title>alloc::alloc::alloc (68,213,733 samples, 0.65%)</title><rect x="63.8073%" y="229" width="0.6522%" height="15" fill="rgb(241,95,50)" fg:x="6673139371" fg:w="68213733"/><text x="64.0573%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (68,213,733 samples, 0.65%)</title><rect x="63.8073%" y="213" width="0.6522%" height="15" fill="rgb(238,48,32)" fg:x="6673139371" fg:w="68213733"/><text x="64.0573%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (68,213,733 samples, 0.65%)</title><rect x="63.8073%" y="197" width="0.6522%" height="15" fill="rgb(235,113,49)" fg:x="6673139371" fg:w="68213733"/><text x="64.0573%" y="207.50"></text></g><g><title>malloc (55,526,494 samples, 0.53%)</title><rect x="63.9286%" y="181" width="0.5309%" height="15" fill="rgb(205,127,43)" fg:x="6685826610" fg:w="55526494"/><text x="64.1786%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (2,959,405 samples, 0.03%)</title><rect x="64.4595%" y="341" width="0.0283%" height="15" fill="rgb(250,162,2)" fg:x="6741353104" fg:w="2959405"/><text x="64.7095%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (2,959,405 samples, 0.03%)</title><rect x="64.4595%" y="325" width="0.0283%" height="15" fill="rgb(220,13,41)" fg:x="6741353104" fg:w="2959405"/><text x="64.7095%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,959,405 samples, 0.03%)</title><rect x="64.4595%" y="309" width="0.0283%" height="15" fill="rgb(249,221,25)" fg:x="6741353104" fg:w="2959405"/><text x="64.7095%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,959,405 samples, 0.03%)</title><rect x="64.4595%" y="293" width="0.0283%" height="15" fill="rgb(215,208,19)" fg:x="6741353104" fg:w="2959405"/><text x="64.7095%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2,959,405 samples, 0.03%)</title><rect x="64.4595%" y="277" width="0.0283%" height="15" fill="rgb(236,175,2)" fg:x="6741353104" fg:w="2959405"/><text x="64.7095%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,392,574 samples, 0.03%)</title><rect x="64.5174%" y="325" width="0.0324%" height="15" fill="rgb(241,52,2)" fg:x="6747409563" fg:w="3392574"/><text x="64.7674%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,392,574 samples, 0.03%)</title><rect x="64.5174%" y="309" width="0.0324%" height="15" fill="rgb(248,140,14)" fg:x="6747409563" fg:w="3392574"/><text x="64.7674%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,392,574 samples, 0.03%)</title><rect x="64.5174%" y="293" width="0.0324%" height="15" fill="rgb(253,22,42)" fg:x="6747409563" fg:w="3392574"/><text x="64.7674%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,392,574 samples, 0.03%)</title><rect x="64.5174%" y="277" width="0.0324%" height="15" fill="rgb(234,61,47)" fg:x="6747409563" fg:w="3392574"/><text x="64.7674%" y="287.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (3,392,574 samples, 0.03%)</title><rect x="64.5174%" y="261" width="0.0324%" height="15" fill="rgb(208,226,15)" fg:x="6747409563" fg:w="3392574"/><text x="64.7674%" y="271.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (55,504,025 samples, 0.53%)</title><rect x="64.5499%" y="325" width="0.5307%" height="15" fill="rgb(217,221,4)" fg:x="6750802137" fg:w="55504025"/><text x="64.7999%" y="335.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (55,504,025 samples, 0.53%)</title><rect x="64.5499%" y="309" width="0.5307%" height="15" fill="rgb(212,174,34)" fg:x="6750802137" fg:w="55504025"/><text x="64.7999%" y="319.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (49,207,767 samples, 0.47%)</title><rect x="64.6101%" y="293" width="0.4705%" height="15" fill="rgb(253,83,4)" fg:x="6757098395" fg:w="49207767"/><text x="64.8601%" y="303.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (42,867,291 samples, 0.41%)</title><rect x="64.6707%" y="277" width="0.4099%" height="15" fill="rgb(250,195,49)" fg:x="6763438871" fg:w="42867291"/><text x="64.9207%" y="287.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (25,883,796 samples, 0.25%)</title><rect x="64.8331%" y="261" width="0.2475%" height="15" fill="rgb(241,192,25)" fg:x="6780422366" fg:w="25883796"/><text x="65.0831%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (32,314,437 samples, 0.31%)</title><rect x="65.2587%" y="293" width="0.3090%" height="15" fill="rgb(208,124,10)" fg:x="6824930405" fg:w="32314437"/><text x="65.5087%" y="303.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (29,078,678 samples, 0.28%)</title><rect x="65.2896%" y="277" width="0.2780%" height="15" fill="rgb(222,33,0)" fg:x="6828166164" fg:w="29078678"/><text x="65.5396%" y="287.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (29,078,678 samples, 0.28%)</title><rect x="65.2896%" y="261" width="0.2780%" height="15" fill="rgb(234,209,28)" fg:x="6828166164" fg:w="29078678"/><text x="65.5396%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (29,078,678 samples, 0.28%)</title><rect x="65.2896%" y="245" width="0.2780%" height="15" fill="rgb(224,11,23)" fg:x="6828166164" fg:w="29078678"/><text x="65.5396%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6,570,860 samples, 0.06%)</title><rect x="65.9091%" y="277" width="0.0628%" height="15" fill="rgb(232,99,1)" fg:x="6892957874" fg:w="6570860"/><text x="66.1591%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (6,570,860 samples, 0.06%)</title><rect x="65.9091%" y="261" width="0.0628%" height="15" fill="rgb(237,95,45)" fg:x="6892957874" fg:w="6570860"/><text x="66.1591%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6,570,860 samples, 0.06%)</title><rect x="65.9091%" y="245" width="0.0628%" height="15" fill="rgb(208,109,11)" fg:x="6892957874" fg:w="6570860"/><text x="66.1591%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6,570,860 samples, 0.06%)</title><rect x="65.9091%" y="229" width="0.0628%" height="15" fill="rgb(216,190,48)" fg:x="6892957874" fg:w="6570860"/><text x="66.1591%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (6,570,860 samples, 0.06%)</title><rect x="65.9091%" y="213" width="0.0628%" height="15" fill="rgb(251,171,36)" fg:x="6892957874" fg:w="6570860"/><text x="66.1591%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (6,570,860 samples, 0.06%)</title><rect x="65.9091%" y="197" width="0.0628%" height="15" fill="rgb(230,62,22)" fg:x="6892957874" fg:w="6570860"/><text x="66.1591%" y="207.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (22,134,700 samples, 0.21%)</title><rect x="65.9720%" y="277" width="0.2116%" height="15" fill="rgb(225,114,35)" fg:x="6899528734" fg:w="22134700"/><text x="66.2220%" y="287.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (22,134,700 samples, 0.21%)</title><rect x="65.9720%" y="261" width="0.2116%" height="15" fill="rgb(215,118,42)" fg:x="6899528734" fg:w="22134700"/><text x="66.2220%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9,995,881 samples, 0.10%)</title><rect x="66.1836%" y="277" width="0.0956%" height="15" fill="rgb(243,119,21)" fg:x="6921663434" fg:w="9995881"/><text x="66.4336%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,995,881 samples, 0.10%)</title><rect x="66.1836%" y="261" width="0.0956%" height="15" fill="rgb(252,177,53)" fg:x="6921663434" fg:w="9995881"/><text x="66.4336%" y="271.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (165,001,741 samples, 1.58%)</title><rect x="65.2587%" y="309" width="1.5777%" height="15" fill="rgb(237,209,29)" fg:x="6824930405" fg:w="165001741"/><text x="65.5087%" y="319.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (132,687,304 samples, 1.27%)</title><rect x="65.5677%" y="293" width="1.2687%" height="15" fill="rgb(212,65,23)" fg:x="6857244842" fg:w="132687304"/><text x="65.8177%" y="303.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (58,272,831 samples, 0.56%)</title><rect x="66.2792%" y="277" width="0.5572%" height="15" fill="rgb(230,222,46)" fg:x="6931659315" fg:w="58272831"/><text x="66.5292%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (9,724,169 samples, 0.09%)</title><rect x="66.7434%" y="261" width="0.0930%" height="15" fill="rgb(215,135,32)" fg:x="6980207977" fg:w="9724169"/><text x="66.9934%" y="271.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (206,106,272 samples, 1.97%)</title><rect x="65.0806%" y="325" width="1.9707%" height="15" fill="rgb(246,101,22)" fg:x="6806306162" fg:w="206106272"/><text x="65.3306%" y="335.50">p..</text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (22,480,288 samples, 0.21%)</title><rect x="66.8364%" y="309" width="0.2150%" height="15" fill="rgb(206,107,13)" fg:x="6989932146" fg:w="22480288"/><text x="67.0864%" y="319.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (9,750,531 samples, 0.09%)</title><rect x="66.9581%" y="293" width="0.0932%" height="15" fill="rgb(250,100,44)" fg:x="7002661903" fg:w="9750531"/><text x="67.2081%" y="303.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (9,750,531 samples, 0.09%)</title><rect x="66.9581%" y="277" width="0.0932%" height="15" fill="rgb(231,147,38)" fg:x="7002661903" fg:w="9750531"/><text x="67.2081%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,288,908 samples, 0.03%)</title><rect x="67.0847%" y="293" width="0.0314%" height="15" fill="rgb(229,8,40)" fg:x="7015899105" fg:w="3288908"/><text x="67.3347%" y="303.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val::{{closure}} (3,288,908 samples, 0.03%)</title><rect x="67.0847%" y="277" width="0.0314%" height="15" fill="rgb(221,135,30)" fg:x="7015899105" fg:w="3288908"/><text x="67.3347%" y="287.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::val (3,288,908 samples, 0.03%)</title><rect x="67.0847%" y="261" width="0.0314%" height="15" fill="rgb(249,193,18)" fg:x="7015899105" fg:w="3288908"/><text x="67.3347%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,288,908 samples, 0.03%)</title><rect x="67.0847%" y="245" width="0.0314%" height="15" fill="rgb(209,133,39)" fg:x="7015899105" fg:w="3288908"/><text x="67.3347%" y="255.50"></text></g><g><title>pathmap::zipper::node_along_path (297,592,283 samples, 2.85%)</title><rect x="64.4878%" y="341" width="2.8455%" height="15" fill="rgb(232,100,14)" fg:x="6744312509" fg:w="297592283"/><text x="64.7378%" y="351.50">pa..</text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_val (29,492,358 samples, 0.28%)</title><rect x="67.0513%" y="325" width="0.2820%" height="15" fill="rgb(224,185,1)" fg:x="7012412434" fg:w="29492358"/><text x="67.3013%" y="335.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val (26,005,687 samples, 0.25%)</title><rect x="67.0847%" y="309" width="0.2487%" height="15" fill="rgb(223,139,8)" fg:x="7015899105" fg:w="26005687"/><text x="67.3347%" y="319.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (22,716,779 samples, 0.22%)</title><rect x="67.1161%" y="293" width="0.2172%" height="15" fill="rgb(232,213,38)" fg:x="7019188013" fg:w="22716779"/><text x="67.3661%" y="303.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (12,797,159 samples, 0.12%)</title><rect x="67.2110%" y="277" width="0.1224%" height="15" fill="rgb(207,94,22)" fg:x="7029107633" fg:w="12797159"/><text x="67.4610%" y="287.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (26,413,210 samples, 0.25%)</title><rect x="67.4935%" y="325" width="0.2526%" height="15" fill="rgb(219,183,54)" fg:x="7058659125" fg:w="26413210"/><text x="67.7435%" y="335.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (26,413,210 samples, 0.25%)</title><rect x="67.4935%" y="309" width="0.2526%" height="15" fill="rgb(216,185,54)" fg:x="7058659125" fg:w="26413210"/><text x="67.7435%" y="319.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (26,413,210 samples, 0.25%)</title><rect x="67.4935%" y="293" width="0.2526%" height="15" fill="rgb(254,217,39)" fg:x="7058659125" fg:w="26413210"/><text x="67.7435%" y="303.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (16,582,476 samples, 0.16%)</title><rect x="67.5875%" y="277" width="0.1586%" height="15" fill="rgb(240,178,23)" fg:x="7068489859" fg:w="16582476"/><text x="67.8375%" y="287.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (9,642,341 samples, 0.09%)</title><rect x="67.6539%" y="261" width="0.0922%" height="15" fill="rgb(218,11,47)" fg:x="7075429994" fg:w="9642341"/><text x="67.9039%" y="271.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (563,990,289 samples, 5.39%)</title><rect x="62.4755%" y="389" width="5.3928%" height="15" fill="rgb(218,51,51)" fg:x="6533855430" fg:w="563990289"/><text x="62.7255%" y="399.50">pathmap..</text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (521,808,357 samples, 4.99%)</title><rect x="62.8788%" y="373" width="4.9894%" height="15" fill="rgb(238,126,27)" fg:x="6576037362" fg:w="521808357"/><text x="63.1288%" y="383.50">pathma..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (521,808,357 samples, 4.99%)</title><rect x="62.8788%" y="357" width="4.9894%" height="15" fill="rgb(249,202,22)" fg:x="6576037362" fg:w="521808357"/><text x="63.1288%" y="367.50">pathma..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (55,940,927 samples, 0.53%)</title><rect x="67.3333%" y="341" width="0.5349%" height="15" fill="rgb(254,195,49)" fg:x="7041904792" fg:w="55940927"/><text x="67.5833%" y="351.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (12,773,384 samples, 0.12%)</title><rect x="67.7461%" y="325" width="0.1221%" height="15" fill="rgb(208,123,14)" fg:x="7085072335" fg:w="12773384"/><text x="67.9961%" y="335.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (9,363,417 samples, 0.09%)</title><rect x="67.7787%" y="309" width="0.0895%" height="15" fill="rgb(224,200,8)" fg:x="7088482302" fg:w="9363417"/><text x="68.0287%" y="319.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (6,229,257 samples, 0.06%)</title><rect x="67.8087%" y="293" width="0.0596%" height="15" fill="rgb(217,61,36)" fg:x="7091616462" fg:w="6229257"/><text x="68.0587%" y="303.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (6,229,257 samples, 0.06%)</title><rect x="67.8087%" y="277" width="0.0596%" height="15" fill="rgb(206,35,45)" fg:x="7091616462" fg:w="6229257"/><text x="68.0587%" y="287.50"></text></g><g><title>[libc.so.6] (16,279,550 samples, 0.16%)</title><rect x="67.8682%" y="181" width="0.1557%" height="15" fill="rgb(217,65,33)" fg:x="7097845719" fg:w="16279550"/><text x="68.1182%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="373" width="0.1878%" height="15" fill="rgb(222,158,48)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="357" width="0.1878%" height="15" fill="rgb(254,2,54)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="341" width="0.1878%" height="15" fill="rgb(250,143,38)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="325" width="0.1878%" height="15" fill="rgb(248,25,0)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="309" width="0.1878%" height="15" fill="rgb(206,152,27)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="293" width="0.1878%" height="15" fill="rgb(240,77,30)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="277" width="0.1878%" height="15" fill="rgb(231,5,3)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="261" width="0.1878%" height="15" fill="rgb(207,226,32)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="245" width="0.1878%" height="15" fill="rgb(222,207,47)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="229" width="0.1878%" height="15" fill="rgb(229,115,45)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="213" width="0.1878%" height="15" fill="rgb(224,191,6)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (19,645,655 samples, 0.19%)</title><rect x="67.8682%" y="197" width="0.1878%" height="15" fill="rgb(230,227,24)" fg:x="7097845719" fg:w="19645655"/><text x="68.1182%" y="207.50"></text></g><g><title>cfree (3,366,105 samples, 0.03%)</title><rect x="68.0239%" y="181" width="0.0322%" height="15" fill="rgb(228,80,19)" fg:x="7114125269" fg:w="3366105"/><text x="68.2739%" y="191.50"></text></g><g><title>[libc.so.6] (3,411,594 samples, 0.03%)</title><rect x="68.0851%" y="325" width="0.0326%" height="15" fill="rgb(247,229,0)" fg:x="7120524317" fg:w="3411594"/><text x="68.3351%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (16,356,413 samples, 0.16%)</title><rect x="68.0851%" y="357" width="0.1564%" height="15" fill="rgb(237,194,15)" fg:x="7120524317" fg:w="16356413"/><text x="68.3351%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (16,356,413 samples, 0.16%)</title><rect x="68.0851%" y="341" width="0.1564%" height="15" fill="rgb(219,203,20)" fg:x="7120524317" fg:w="16356413"/><text x="68.3351%" y="351.50"></text></g><g><title>cfree (12,944,819 samples, 0.12%)</title><rect x="68.1177%" y="325" width="0.1238%" height="15" fill="rgb(234,128,8)" fg:x="7123935911" fg:w="12944819"/><text x="68.3677%" y="335.50"></text></g><g><title>[libc.so.6] (3,442,611 samples, 0.03%)</title><rect x="68.2415%" y="309" width="0.0329%" height="15" fill="rgb(248,202,8)" fg:x="7136880730" fg:w="3442611"/><text x="68.4915%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (6,882,424 samples, 0.07%)</title><rect x="68.2415%" y="357" width="0.0658%" height="15" fill="rgb(206,104,37)" fg:x="7136880730" fg:w="6882424"/><text x="68.4915%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (6,882,424 samples, 0.07%)</title><rect x="68.2415%" y="341" width="0.0658%" height="15" fill="rgb(223,8,27)" fg:x="7136880730" fg:w="6882424"/><text x="68.4915%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,882,424 samples, 0.07%)</title><rect x="68.2415%" y="325" width="0.0658%" height="15" fill="rgb(216,217,28)" fg:x="7136880730" fg:w="6882424"/><text x="68.4915%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3,439,813 samples, 0.03%)</title><rect x="68.2744%" y="309" width="0.0329%" height="15" fill="rgb(249,199,1)" fg:x="7140323341" fg:w="3439813"/><text x="68.5244%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (3,439,813 samples, 0.03%)</title><rect x="68.2744%" y="293" width="0.0329%" height="15" fill="rgb(240,85,17)" fg:x="7140323341" fg:w="3439813"/><text x="68.5244%" y="303.50"></text></g><g><title>[libc.so.6] (25,702,008 samples, 0.25%)</title><rect x="68.3073%" y="213" width="0.2458%" height="15" fill="rgb(206,108,45)" fg:x="7143763154" fg:w="25702008"/><text x="68.5573%" y="223.50"></text></g><g><title>profile::main (104,203,650 samples, 1.00%)</title><rect x="67.8682%" y="389" width="0.9964%" height="15" fill="rgb(245,210,41)" fg:x="7097845719" fg:w="104203650"/><text x="68.1182%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (84,557,995 samples, 0.81%)</title><rect x="68.0561%" y="373" width="0.8085%" height="15" fill="rgb(206,13,37)" fg:x="7117491374" fg:w="84557995"/><text x="68.3061%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="357" width="0.5573%" height="15" fill="rgb(250,61,18)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="341" width="0.5573%" height="15" fill="rgb(235,172,48)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="325" width="0.5573%" height="15" fill="rgb(249,201,17)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="309" width="0.5573%" height="15" fill="rgb(219,208,6)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="293" width="0.5573%" height="15" fill="rgb(248,31,23)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="277" width="0.5573%" height="15" fill="rgb(245,15,42)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="261" width="0.5573%" height="15" fill="rgb(222,217,39)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="271.50"></text></g><g><title>__rustc::__rdl_dealloc (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="245" width="0.5573%" height="15" fill="rgb(210,219,27)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (58,286,215 samples, 0.56%)</title><rect x="68.3073%" y="229" width="0.5573%" height="15" fill="rgb(252,166,36)" fg:x="7143763154" fg:w="58286215"/><text x="68.5573%" y="239.50"></text></g><g><title>cfree (32,584,207 samples, 0.31%)</title><rect x="68.5531%" y="213" width="0.3116%" height="15" fill="rgb(245,132,34)" fg:x="7169465162" fg:w="32584207"/><text x="68.8031%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3,077,699 samples, 0.03%)</title><rect x="68.8646%" y="373" width="0.0294%" height="15" fill="rgb(236,54,3)" fg:x="7202049369" fg:w="3077699"/><text x="69.1146%" y="383.50"></text></g><g><title>core::intrinsics::unlikely (3,077,699 samples, 0.03%)</title><rect x="68.8646%" y="357" width="0.0294%" height="15" fill="rgb(241,173,43)" fg:x="7202049369" fg:w="3077699"/><text x="69.1146%" y="367.50"></text></g><g><title>alloc::alloc::alloc (9,742,266 samples, 0.09%)</title><rect x="68.8940%" y="357" width="0.0932%" height="15" fill="rgb(215,190,9)" fg:x="7205127068" fg:w="9742266"/><text x="69.1440%" y="367.50"></text></g><g><title>__rustc::__rdl_alloc (9,742,266 samples, 0.09%)</title><rect x="68.8940%" y="341" width="0.0932%" height="15" fill="rgb(242,101,16)" fg:x="7205127068" fg:w="9742266"/><text x="69.1440%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9,742,266 samples, 0.09%)</title><rect x="68.8940%" y="325" width="0.0932%" height="15" fill="rgb(223,190,21)" fg:x="7205127068" fg:w="9742266"/><text x="69.1440%" y="335.50"></text></g><g><title>malloc (9,742,266 samples, 0.09%)</title><rect x="68.8940%" y="309" width="0.0932%" height="15" fill="rgb(215,228,25)" fg:x="7205127068" fg:w="9742266"/><text x="69.1440%" y="319.50"></text></g><g><title>[unknown] (3,139,108,862 samples, 30.02%)</title><rect x="39.0031%" y="405" width="30.0156%" height="15" fill="rgb(225,36,22)" fg:x="4079051121" fg:w="3139108862"/><text x="39.2531%" y="415.50">[unknown]</text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (16,110,614 samples, 0.15%)</title><rect x="68.8646%" y="389" width="0.1540%" height="15" fill="rgb(251,106,46)" fg:x="7202049369" fg:w="16110614"/><text x="69.1146%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_grow (13,032,915 samples, 0.12%)</title><rect x="68.8940%" y="373" width="0.1246%" height="15" fill="rgb(208,90,1)" fg:x="7205127068" fg:w="13032915"/><text x="69.1440%" y="383.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,290,649 samples, 0.03%)</title><rect x="68.9872%" y="357" width="0.0315%" height="15" fill="rgb(243,10,4)" fg:x="7214869334" fg:w="3290649"/><text x="69.2372%" y="367.50"></text></g><g><title>[libc.so.6] (15,942,504 samples, 0.15%)</title><rect x="69.0491%" y="341" width="0.1524%" height="15" fill="rgb(212,137,27)" fg:x="7221343968" fg:w="15942504"/><text x="69.2991%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (32,055,727 samples, 0.31%)</title><rect x="69.0491%" y="373" width="0.3065%" height="15" fill="rgb(231,220,49)" fg:x="7221343968" fg:w="32055727"/><text x="69.2991%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (32,055,727 samples, 0.31%)</title><rect x="69.0491%" y="357" width="0.3065%" height="15" fill="rgb(237,96,20)" fg:x="7221343968" fg:w="32055727"/><text x="69.2991%" y="367.50"></text></g><g><title>cfree (16,113,223 samples, 0.15%)</title><rect x="69.2015%" y="341" width="0.1541%" height="15" fill="rgb(239,229,30)" fg:x="7237286472" fg:w="16113223"/><text x="69.4515%" y="351.50"></text></g><g><title>[libc.so.6] (31,315,153 samples, 0.30%)</title><rect x="69.3556%" y="325" width="0.2994%" height="15" fill="rgb(219,65,33)" fg:x="7253399695" fg:w="31315153"/><text x="69.6056%" y="335.50"></text></g><g><title>cfree (39,318,933 samples, 0.38%)</title><rect x="69.6550%" y="325" width="0.3760%" height="15" fill="rgb(243,134,7)" fg:x="7284714848" fg:w="39318933"/><text x="69.9050%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (77,100,556 samples, 0.74%)</title><rect x="69.3556%" y="357" width="0.7372%" height="15" fill="rgb(216,177,54)" fg:x="7253399695" fg:w="77100556"/><text x="69.6056%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77,100,556 samples, 0.74%)</title><rect x="69.3556%" y="341" width="0.7372%" height="15" fill="rgb(211,160,20)" fg:x="7253399695" fg:w="77100556"/><text x="69.6056%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6,466,470 samples, 0.06%)</title><rect x="70.0310%" y="325" width="0.0618%" height="15" fill="rgb(239,85,39)" fg:x="7324033781" fg:w="6466470"/><text x="70.2810%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (6,466,470 samples, 0.06%)</title><rect x="70.0310%" y="309" width="0.0618%" height="15" fill="rgb(232,125,22)" fg:x="7324033781" fg:w="6466470"/><text x="70.2810%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (97,125,978 samples, 0.93%)</title><rect x="69.3556%" y="373" width="0.9287%" height="15" fill="rgb(244,57,34)" fg:x="7253399695" fg:w="97125978"/><text x="69.6056%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (20,025,422 samples, 0.19%)</title><rect x="70.0928%" y="357" width="0.1915%" height="15" fill="rgb(214,203,32)" fg:x="7330500251" fg:w="20025422"/><text x="70.3428%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,025,422 samples, 0.19%)</title><rect x="70.0928%" y="341" width="0.1915%" height="15" fill="rgb(207,58,43)" fg:x="7330500251" fg:w="20025422"/><text x="70.3428%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20,025,422 samples, 0.19%)</title><rect x="70.0928%" y="325" width="0.1915%" height="15" fill="rgb(215,193,15)" fg:x="7330500251" fg:w="20025422"/><text x="70.3428%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (20,025,422 samples, 0.19%)</title><rect x="70.0928%" y="309" width="0.1915%" height="15" fill="rgb(232,15,44)" fg:x="7330500251" fg:w="20025422"/><text x="70.3428%" y="319.50"></text></g><g><title>[libc.so.6] (55,522,396 samples, 0.53%)</title><rect x="70.2843%" y="229" width="0.5309%" height="15" fill="rgb(212,3,48)" fg:x="7350525673" fg:w="55522396"/><text x="70.5343%" y="239.50"></text></g><g><title>[libc.so.6] (25,829,922 samples, 0.25%)</title><rect x="70.5682%" y="213" width="0.2470%" height="15" fill="rgb(218,128,7)" fg:x="7380218147" fg:w="25829922"/><text x="70.8182%" y="223.50"></text></g><g><title>[libc.so.6] (19,157,779 samples, 0.18%)</title><rect x="70.6320%" y="197" width="0.1832%" height="15" fill="rgb(226,216,39)" fg:x="7386890290" fg:w="19157779"/><text x="70.8820%" y="207.50"></text></g><g><title>[libc.so.6] (3,038,112 samples, 0.03%)</title><rect x="70.7862%" y="181" width="0.0290%" height="15" fill="rgb(243,47,51)" fg:x="7403009957" fg:w="3038112"/><text x="71.0362%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81,777,276 samples, 0.78%)</title><rect x="70.2843%" y="293" width="0.7819%" height="15" fill="rgb(241,183,40)" fg:x="7350525673" fg:w="81777276"/><text x="70.5343%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (81,777,276 samples, 0.78%)</title><rect x="70.2843%" y="277" width="0.7819%" height="15" fill="rgb(231,217,32)" fg:x="7350525673" fg:w="81777276"/><text x="70.5343%" y="287.50"></text></g><g><title>__rustc::__rdl_dealloc (81,777,276 samples, 0.78%)</title><rect x="70.2843%" y="261" width="0.7819%" height="15" fill="rgb(229,61,38)" fg:x="7350525673" fg:w="81777276"/><text x="70.5343%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (81,777,276 samples, 0.78%)</title><rect x="70.2843%" y="245" width="0.7819%" height="15" fill="rgb(225,210,5)" fg:x="7350525673" fg:w="81777276"/><text x="70.5343%" y="255.50"></text></g><g><title>cfree (26,254,880 samples, 0.25%)</title><rect x="70.8152%" y="229" width="0.2510%" height="15" fill="rgb(231,79,45)" fg:x="7406048069" fg:w="26254880"/><text x="71.0652%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (220,356,161 samples, 2.11%)</title><rect x="69.0187%" y="389" width="2.1070%" height="15" fill="rgb(224,100,7)" fg:x="7218159983" fg:w="220356161"/><text x="69.2687%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (87,990,471 samples, 0.84%)</title><rect x="70.2843%" y="373" width="0.8413%" height="15" fill="rgb(241,198,18)" fg:x="7350525673" fg:w="87990471"/><text x="70.5343%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (87,990,471 samples, 0.84%)</title><rect x="70.2843%" y="357" width="0.8413%" height="15" fill="rgb(252,97,53)" fg:x="7350525673" fg:w="87990471"/><text x="70.5343%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (87,990,471 samples, 0.84%)</title><rect x="70.2843%" y="341" width="0.8413%" height="15" fill="rgb(220,88,7)" fg:x="7350525673" fg:w="87990471"/><text x="70.5343%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87,990,471 samples, 0.84%)</title><rect x="70.2843%" y="325" width="0.8413%" height="15" fill="rgb(213,176,14)" fg:x="7350525673" fg:w="87990471"/><text x="70.5343%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (87,990,471 samples, 0.84%)</title><rect x="70.2843%" y="309" width="0.8413%" height="15" fill="rgb(246,73,7)" fg:x="7350525673" fg:w="87990471"/><text x="70.5343%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (6,213,195 samples, 0.06%)</title><rect x="71.0663%" y="293" width="0.0594%" height="15" fill="rgb(245,64,36)" fg:x="7432302949" fg:w="6213195"/><text x="71.3163%" y="303.50"></text></g><g><title>__openat64_2 (223,717,727 samples, 2.14%)</title><rect x="69.0187%" y="405" width="2.1391%" height="15" fill="rgb(245,80,10)" fg:x="7218159983" fg:w="223717727"/><text x="69.2687%" y="415.50">_..</text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (3,361,566 samples, 0.03%)</title><rect x="71.1257%" y="389" width="0.0321%" height="15" fill="rgb(232,107,50)" fg:x="7438516144" fg:w="3361566"/><text x="71.3757%" y="399.50"></text></g><g><title>__rustc::__rust_alloc (3,017,174 samples, 0.03%)</title><rect x="71.1578%" y="405" width="0.0288%" height="15" fill="rgb(253,3,0)" fg:x="7441877710" fg:w="3017174"/><text x="71.4078%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,264,352 samples, 0.03%)</title><rect x="71.3110%" y="357" width="0.0312%" height="15" fill="rgb(212,99,53)" fg:x="7457900169" fg:w="3264352"/><text x="71.5610%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (3,091,623 samples, 0.03%)</title><rect x="71.3422%" y="357" width="0.0296%" height="15" fill="rgb(249,111,54)" fg:x="7461164521" fg:w="3091623"/><text x="71.5922%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (53,205,075 samples, 0.51%)</title><rect x="71.5206%" y="341" width="0.5087%" height="15" fill="rgb(249,55,30)" fg:x="7479819751" fg:w="53205075"/><text x="71.7706%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (53,205,075 samples, 0.51%)</title><rect x="71.5206%" y="325" width="0.5087%" height="15" fill="rgb(237,47,42)" fg:x="7479819751" fg:w="53205075"/><text x="71.7706%" y="335.50"></text></g><g><title>alloc::alloc::realloc (53,205,075 samples, 0.51%)</title><rect x="71.5206%" y="309" width="0.5087%" height="15" fill="rgb(211,20,18)" fg:x="7479819751" fg:w="53205075"/><text x="71.7706%" y="319.50"></text></g><g><title>__rustc::__rdl_realloc (53,205,075 samples, 0.51%)</title><rect x="71.5206%" y="293" width="0.5087%" height="15" fill="rgb(231,203,46)" fg:x="7479819751" fg:w="53205075"/><text x="71.7706%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (53,205,075 samples, 0.51%)</title><rect x="71.5206%" y="277" width="0.5087%" height="15" fill="rgb(237,142,3)" fg:x="7479819751" fg:w="53205075"/><text x="71.7706%" y="287.50"></text></g><g><title>realloc (50,046,294 samples, 0.48%)</title><rect x="71.5508%" y="261" width="0.4785%" height="15" fill="rgb(241,107,1)" fg:x="7482978532" fg:w="50046294"/><text x="71.8008%" y="271.50"></text></g><g><title>[libc.so.6] (34,378,655 samples, 0.33%)</title><rect x="71.7006%" y="245" width="0.3287%" height="15" fill="rgb(229,83,13)" fg:x="7498646171" fg:w="34378655"/><text x="71.9506%" y="255.50"></text></g><g><title>[libc.so.6] (21,647,780 samples, 0.21%)</title><rect x="71.8223%" y="229" width="0.2070%" height="15" fill="rgb(241,91,40)" fg:x="7511377046" fg:w="21647780"/><text x="72.0723%" y="239.50"></text></g><g><title>[libc.so.6] (6,002,597 samples, 0.06%)</title><rect x="71.9719%" y="213" width="0.0574%" height="15" fill="rgb(225,3,45)" fg:x="7527022229" fg:w="6002597"/><text x="72.2219%" y="223.50"></text></g><g><title>[libc.so.6] (2,977,017 samples, 0.03%)</title><rect x="72.0009%" y="197" width="0.0285%" height="15" fill="rgb(244,223,14)" fg:x="7530047809" fg:w="2977017"/><text x="72.2509%" y="207.50"></text></g><g><title>[libc.so.6] (42,032,543 samples, 0.40%)</title><rect x="72.0293%" y="341" width="0.4019%" height="15" fill="rgb(224,124,37)" fg:x="7533024826" fg:w="42032543"/><text x="72.2793%" y="351.50"></text></g><g><title>[libc.so.6] (35,471,450 samples, 0.34%)</title><rect x="72.0921%" y="325" width="0.3392%" height="15" fill="rgb(251,171,30)" fg:x="7539585919" fg:w="35471450"/><text x="72.3421%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,245,949 samples, 0.03%)</title><rect x="72.4312%" y="341" width="0.0310%" height="15" fill="rgb(236,46,54)" fg:x="7575057369" fg:w="3245949"/><text x="72.6812%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (127,582,494 samples, 1.22%)</title><rect x="71.3718%" y="357" width="1.2199%" height="15" fill="rgb(245,213,5)" fg:x="7464256144" fg:w="127582494"/><text x="71.6218%" y="367.50"></text></g><g><title>malloc (13,535,320 samples, 0.13%)</title><rect x="72.4623%" y="341" width="0.1294%" height="15" fill="rgb(230,144,27)" fg:x="7578303318" fg:w="13535320"/><text x="72.7123%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (150,361,097 samples, 1.44%)</title><rect x="71.1867%" y="405" width="1.4377%" height="15" fill="rgb(220,86,6)" fg:x="7444894884" fg:w="150361097"/><text x="71.4367%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (143,935,993 samples, 1.38%)</title><rect x="71.2481%" y="389" width="1.3763%" height="15" fill="rgb(240,20,13)" fg:x="7451319988" fg:w="143935993"/><text x="71.4981%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (143,935,993 samples, 1.38%)</title><rect x="71.2481%" y="373" width="1.3763%" height="15" fill="rgb(217,89,34)" fg:x="7451319988" fg:w="143935993"/><text x="71.4981%" y="383.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (3,417,343 samples, 0.03%)</title><rect x="72.5917%" y="357" width="0.0327%" height="15" fill="rgb(229,13,5)" fg:x="7591838638" fg:w="3417343"/><text x="72.8417%" y="367.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,417,343 samples, 0.03%)</title><rect x="72.5917%" y="341" width="0.0327%" height="15" fill="rgb(244,67,35)" fg:x="7591838638" fg:w="3417343"/><text x="72.8417%" y="351.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,417,343 samples, 0.03%)</title><rect x="72.5917%" y="325" width="0.0327%" height="15" fill="rgb(221,40,2)" fg:x="7591838638" fg:w="3417343"/><text x="72.8417%" y="335.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (3,417,343 samples, 0.03%)</title><rect x="72.5917%" y="309" width="0.0327%" height="15" fill="rgb(237,157,21)" fg:x="7591838638" fg:w="3417343"/><text x="72.8417%" y="319.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (3,417,343 samples, 0.03%)</title><rect x="72.5917%" y="293" width="0.0327%" height="15" fill="rgb(222,94,11)" fg:x="7591838638" fg:w="3417343"/><text x="72.8417%" y="303.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (3,417,343 samples, 0.03%)</title><rect x="72.5917%" y="277" width="0.0327%" height="15" fill="rgb(249,113,6)" fg:x="7591838638" fg:w="3417343"/><text x="72.8417%" y="287.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (3,417,343 samples, 0.03%)</title><rect x="72.5917%" y="261" width="0.0327%" height="15" fill="rgb(238,137,36)" fg:x="7591838638" fg:w="3417343"/><text x="72.8417%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (115,814,580 samples, 1.11%)</title><rect x="72.6244%" y="405" width="1.1074%" height="15" fill="rgb(210,102,26)" fg:x="7595255981" fg:w="115814580"/><text x="72.8744%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="389" width="0.9578%" height="15" fill="rgb(218,30,30)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="373" width="0.9578%" height="15" fill="rgb(214,67,26)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="383.50"></text></g><g><title>alloc::alloc::realloc (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="357" width="0.9578%" height="15" fill="rgb(251,9,53)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="367.50"></text></g><g><title>__rustc::__rdl_realloc (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="341" width="0.9578%" height="15" fill="rgb(228,204,25)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="325" width="0.9578%" height="15" fill="rgb(207,153,8)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="335.50"></text></g><g><title>realloc (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="309" width="0.9578%" height="15" fill="rgb(242,9,16)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="319.50"></text></g><g><title>[libc.so.6] (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="293" width="0.9578%" height="15" fill="rgb(217,211,10)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="303.50"></text></g><g><title>[libc.so.6] (100,170,225 samples, 0.96%)</title><rect x="72.7740%" y="277" width="0.9578%" height="15" fill="rgb(219,228,52)" fg:x="7610900336" fg:w="100170225"/><text x="73.0240%" y="287.50"></text></g><g><title>[libc.so.6] (93,947,767 samples, 0.90%)</title><rect x="72.8335%" y="261" width="0.8983%" height="15" fill="rgb(231,92,29)" fg:x="7617122794" fg:w="93947767"/><text x="73.0835%" y="271.50"></text></g><g><title>[libc.so.6] (34,897,579 samples, 0.33%)</title><rect x="73.3981%" y="245" width="0.3337%" height="15" fill="rgb(232,8,23)" fg:x="7676172982" fg:w="34897579"/><text x="73.6481%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (6,157,600 samples, 0.06%)</title><rect x="73.7318%" y="405" width="0.0589%" height="15" fill="rgb(216,211,34)" fg:x="7711070561" fg:w="6157600"/><text x="73.9818%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;alloc::vec::Vec&lt;u8&gt;,&amp;alloc::alloc::Global&gt;&gt; (6,211,994 samples, 0.06%)</title><rect x="73.7907%" y="389" width="0.0594%" height="15" fill="rgb(236,151,0)" fg:x="7717228161" fg:w="6211994"/><text x="74.0407%" y="399.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,211,994 samples, 0.06%)</title><rect x="73.7907%" y="373" width="0.0594%" height="15" fill="rgb(209,168,3)" fg:x="7717228161" fg:w="6211994"/><text x="74.0407%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6,211,994 samples, 0.06%)</title><rect x="73.7907%" y="357" width="0.0594%" height="15" fill="rgb(208,129,28)" fg:x="7717228161" fg:w="6211994"/><text x="74.0407%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (6,211,994 samples, 0.06%)</title><rect x="73.7907%" y="341" width="0.0594%" height="15" fill="rgb(229,78,22)" fg:x="7717228161" fg:w="6211994"/><text x="74.0407%" y="351.50"></text></g><g><title>[libc.so.6] (3,080,005 samples, 0.03%)</title><rect x="73.9070%" y="261" width="0.0295%" height="15" fill="rgb(228,187,13)" fg:x="7729397011" fg:w="3080005"/><text x="74.1570%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51,686,977 samples, 0.49%)</title><rect x="73.8501%" y="325" width="0.4942%" height="15" fill="rgb(240,119,24)" fg:x="7723440155" fg:w="51686977"/><text x="74.1001%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (51,686,977 samples, 0.49%)</title><rect x="73.8501%" y="309" width="0.4942%" height="15" fill="rgb(209,194,42)" fg:x="7723440155" fg:w="51686977"/><text x="74.1001%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (51,686,977 samples, 0.49%)</title><rect x="73.8501%" y="293" width="0.4942%" height="15" fill="rgb(247,200,46)" fg:x="7723440155" fg:w="51686977"/><text x="74.1001%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (51,686,977 samples, 0.49%)</title><rect x="73.8501%" y="277" width="0.4942%" height="15" fill="rgb(218,76,16)" fg:x="7723440155" fg:w="51686977"/><text x="74.1001%" y="287.50"></text></g><g><title>cfree (42,650,116 samples, 0.41%)</title><rect x="73.9365%" y="261" width="0.4078%" height="15" fill="rgb(225,21,48)" fg:x="7732477016" fg:w="42650116"/><text x="74.1865%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (61,092,109 samples, 0.58%)</title><rect x="73.7907%" y="405" width="0.5842%" height="15" fill="rgb(239,223,50)" fg:x="7717228161" fg:w="61092109"/><text x="74.0407%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (54,880,115 samples, 0.52%)</title><rect x="73.8501%" y="389" width="0.5248%" height="15" fill="rgb(244,45,21)" fg:x="7723440155" fg:w="54880115"/><text x="74.1001%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (54,880,115 samples, 0.52%)</title><rect x="73.8501%" y="373" width="0.5248%" height="15" fill="rgb(232,33,43)" fg:x="7723440155" fg:w="54880115"/><text x="74.1001%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54,880,115 samples, 0.52%)</title><rect x="73.8501%" y="357" width="0.5248%" height="15" fill="rgb(209,8,3)" fg:x="7723440155" fg:w="54880115"/><text x="74.1001%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (54,880,115 samples, 0.52%)</title><rect x="73.8501%" y="341" width="0.5248%" height="15" fill="rgb(214,25,53)" fg:x="7723440155" fg:w="54880115"/><text x="74.1001%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,193,138 samples, 0.03%)</title><rect x="74.3443%" y="325" width="0.0305%" height="15" fill="rgb(254,186,54)" fg:x="7775127132" fg:w="3193138"/><text x="74.5943%" y="335.50"></text></g><g><title>cfree (6,855,871 samples, 0.07%)</title><rect x="74.3748%" y="405" width="0.0656%" height="15" fill="rgb(208,174,49)" fg:x="7778320270" fg:w="6855871"/><text x="74.6248%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,131,114 samples, 0.03%)</title><rect x="74.4404%" y="405" width="0.0299%" height="15" fill="rgb(233,191,51)" fg:x="7785176141" fg:w="3131114"/><text x="74.6904%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,131,114 samples, 0.03%)</title><rect x="74.4404%" y="389" width="0.0299%" height="15" fill="rgb(222,134,10)" fg:x="7785176141" fg:w="3131114"/><text x="74.6904%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,131,114 samples, 0.03%)</title><rect x="74.4404%" y="373" width="0.0299%" height="15" fill="rgb(230,226,20)" fg:x="7785176141" fg:w="3131114"/><text x="74.6904%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,131,114 samples, 0.03%)</title><rect x="74.4404%" y="357" width="0.0299%" height="15" fill="rgb(251,111,25)" fg:x="7785176141" fg:w="3131114"/><text x="74.6904%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,131,114 samples, 0.03%)</title><rect x="74.4404%" y="341" width="0.0299%" height="15" fill="rgb(224,40,46)" fg:x="7785176141" fg:w="3131114"/><text x="74.6904%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,131,114 samples, 0.03%)</title><rect x="74.4404%" y="325" width="0.0299%" height="15" fill="rgb(236,108,47)" fg:x="7785176141" fg:w="3131114"/><text x="74.6904%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3,090,093 samples, 0.03%)</title><rect x="74.4703%" y="341" width="0.0295%" height="15" fill="rgb(234,93,0)" fg:x="7788307255" fg:w="3090093"/><text x="74.7203%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,090,093 samples, 0.03%)</title><rect x="74.4703%" y="325" width="0.0295%" height="15" fill="rgb(224,213,32)" fg:x="7788307255" fg:w="3090093"/><text x="74.7203%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (16,138,618 samples, 0.15%)</title><rect x="74.4703%" y="373" width="0.1543%" height="15" fill="rgb(251,11,48)" fg:x="7788307255" fg:w="16138618"/><text x="74.7203%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,138,618 samples, 0.15%)</title><rect x="74.4703%" y="357" width="0.1543%" height="15" fill="rgb(236,173,5)" fg:x="7788307255" fg:w="16138618"/><text x="74.7203%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13,048,525 samples, 0.12%)</title><rect x="74.4998%" y="341" width="0.1248%" height="15" fill="rgb(230,95,12)" fg:x="7791397348" fg:w="13048525"/><text x="74.7498%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (13,048,525 samples, 0.12%)</title><rect x="74.4998%" y="325" width="0.1248%" height="15" fill="rgb(232,209,1)" fg:x="7791397348" fg:w="13048525"/><text x="74.7498%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3,120,349 samples, 0.03%)</title><rect x="74.6246%" y="341" width="0.0298%" height="15" fill="rgb(232,6,1)" fg:x="7804445873" fg:w="3120349"/><text x="74.8746%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,120,349 samples, 0.03%)</title><rect x="74.6246%" y="325" width="0.0298%" height="15" fill="rgb(210,224,50)" fg:x="7804445873" fg:w="3120349"/><text x="74.8746%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;smallvec::IntoIter&lt;[u8: 8]&gt;,&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt;&gt; (26,037,019 samples, 0.25%)</title><rect x="74.4703%" y="405" width="0.2490%" height="15" fill="rgb(228,127,35)" fg:x="7788307255" fg:w="26037019"/><text x="74.7203%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt; (26,037,019 samples, 0.25%)</title><rect x="74.4703%" y="389" width="0.2490%" height="15" fill="rgb(245,102,45)" fg:x="7788307255" fg:w="26037019"/><text x="74.7203%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (9,898,401 samples, 0.09%)</title><rect x="74.6246%" y="373" width="0.0946%" height="15" fill="rgb(214,1,49)" fg:x="7804445873" fg:w="9898401"/><text x="74.8746%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,898,401 samples, 0.09%)</title><rect x="74.6246%" y="357" width="0.0946%" height="15" fill="rgb(226,163,40)" fg:x="7804445873" fg:w="9898401"/><text x="74.8746%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6,778,052 samples, 0.06%)</title><rect x="74.6545%" y="341" width="0.0648%" height="15" fill="rgb(239,212,28)" fg:x="7807566222" fg:w="6778052"/><text x="74.9045%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (6,778,052 samples, 0.06%)</title><rect x="74.6545%" y="325" width="0.0648%" height="15" fill="rgb(220,20,13)" fg:x="7807566222" fg:w="6778052"/><text x="74.9045%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,471,307 samples, 0.06%)</title><rect x="74.7193%" y="357" width="0.0619%" height="15" fill="rgb(210,164,35)" fg:x="7814344274" fg:w="6471307"/><text x="74.9693%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,471,307 samples, 0.06%)</title><rect x="74.7193%" y="341" width="0.0619%" height="15" fill="rgb(248,109,41)" fg:x="7814344274" fg:w="6471307"/><text x="74.9693%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (6,471,307 samples, 0.06%)</title><rect x="74.7193%" y="325" width="0.0619%" height="15" fill="rgb(238,23,50)" fg:x="7814344274" fg:w="6471307"/><text x="74.9693%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (6,471,307 samples, 0.06%)</title><rect x="74.7193%" y="309" width="0.0619%" height="15" fill="rgb(211,48,49)" fg:x="7814344274" fg:w="6471307"/><text x="74.9693%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,471,307 samples, 0.06%)</title><rect x="74.7193%" y="293" width="0.0619%" height="15" fill="rgb(223,36,21)" fg:x="7814344274" fg:w="6471307"/><text x="74.9693%" y="303.50"></text></g><g><title>[libc.so.6] (45,069,076 samples, 0.43%)</title><rect x="74.7811%" y="357" width="0.4309%" height="15" fill="rgb(207,123,46)" fg:x="7820815581" fg:w="45069076"/><text x="75.0311%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (157,875,491 samples, 1.51%)</title><rect x="74.7193%" y="389" width="1.5096%" height="15" fill="rgb(240,218,32)" fg:x="7814344274" fg:w="157875491"/><text x="74.9693%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (157,875,491 samples, 1.51%)</title><rect x="74.7193%" y="373" width="1.5096%" height="15" fill="rgb(252,5,43)" fg:x="7814344274" fg:w="157875491"/><text x="74.9693%" y="383.50"></text></g><g><title>cfree (106,335,108 samples, 1.02%)</title><rect x="75.2121%" y="357" width="1.0168%" height="15" fill="rgb(252,84,19)" fg:x="7865884657" fg:w="106335108"/><text x="75.4621%" y="367.50"></text></g><g><title>[libc.so.6] (3,507,307 samples, 0.03%)</title><rect x="76.2595%" y="341" width="0.0335%" height="15" fill="rgb(243,152,39)" fg:x="7975427936" fg:w="3507307"/><text x="76.5095%" y="351.50"></text></g><g><title>cfree (6,852,314 samples, 0.07%)</title><rect x="76.2930%" y="341" width="0.0655%" height="15" fill="rgb(234,160,15)" fg:x="7978935243" fg:w="6852314"/><text x="76.5430%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (54,663,387 samples, 0.52%)</title><rect x="76.2288%" y="373" width="0.5227%" height="15" fill="rgb(237,34,20)" fg:x="7972219765" fg:w="54663387"/><text x="76.4788%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54,663,387 samples, 0.52%)</title><rect x="76.2288%" y="357" width="0.5227%" height="15" fill="rgb(229,97,13)" fg:x="7972219765" fg:w="54663387"/><text x="76.4788%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (41,095,595 samples, 0.39%)</title><rect x="76.3586%" y="341" width="0.3929%" height="15" fill="rgb(234,71,50)" fg:x="7985787557" fg:w="41095595"/><text x="76.6086%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (41,095,595 samples, 0.39%)</title><rect x="76.3586%" y="325" width="0.3929%" height="15" fill="rgb(253,155,4)" fg:x="7985787557" fg:w="41095595"/><text x="76.6086%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (83,924,200 samples, 0.80%)</title><rect x="76.2288%" y="389" width="0.8025%" height="15" fill="rgb(222,185,37)" fg:x="7972219765" fg:w="83924200"/><text x="76.4788%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (29,260,813 samples, 0.28%)</title><rect x="76.7515%" y="373" width="0.2798%" height="15" fill="rgb(251,177,13)" fg:x="8026883152" fg:w="29260813"/><text x="77.0015%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29,260,813 samples, 0.28%)</title><rect x="76.7515%" y="357" width="0.2798%" height="15" fill="rgb(250,179,40)" fg:x="8026883152" fg:w="29260813"/><text x="77.0015%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (26,356,022 samples, 0.25%)</title><rect x="76.7793%" y="341" width="0.2520%" height="15" fill="rgb(242,44,2)" fg:x="8029787943" fg:w="26356022"/><text x="77.0293%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (26,356,022 samples, 0.25%)</title><rect x="76.7793%" y="325" width="0.2520%" height="15" fill="rgb(216,177,13)" fg:x="8029787943" fg:w="26356022"/><text x="77.0293%" y="335.50"></text></g><g><title>[libc.so.6] (261,068,556 samples, 2.50%)</title><rect x="77.1526%" y="245" width="2.4963%" height="15" fill="rgb(216,106,43)" fg:x="8068830981" fg:w="261068556"/><text x="77.4026%" y="255.50">[l..</text></g><g><title>[libc.so.6] (76,755,153 samples, 0.73%)</title><rect x="78.9150%" y="229" width="0.7339%" height="15" fill="rgb(216,183,2)" fg:x="8253144384" fg:w="76755153"/><text x="79.1650%" y="239.50"></text></g><g><title>[libc.so.6] (25,934,952 samples, 0.25%)</title><rect x="79.4009%" y="213" width="0.2480%" height="15" fill="rgb(249,75,3)" fg:x="8303964585" fg:w="25934952"/><text x="79.6509%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (465,318,308 samples, 4.45%)</title><rect x="77.0313%" y="309" width="4.4493%" height="15" fill="rgb(219,67,39)" fg:x="8056143965" fg:w="465318308"/><text x="77.2813%" y="319.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (465,318,308 samples, 4.45%)</title><rect x="77.0313%" y="293" width="4.4493%" height="15" fill="rgb(253,228,2)" fg:x="8056143965" fg:w="465318308"/><text x="77.2813%" y="303.50">alloc..</text></g><g><title>__rustc::__rdl_dealloc (465,318,308 samples, 4.45%)</title><rect x="77.0313%" y="277" width="4.4493%" height="15" fill="rgb(235,138,27)" fg:x="8056143965" fg:w="465318308"/><text x="77.2813%" y="287.50">__rus..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (465,318,308 samples, 4.45%)</title><rect x="77.0313%" y="261" width="4.4493%" height="15" fill="rgb(236,97,51)" fg:x="8056143965" fg:w="465318308"/><text x="77.2813%" y="271.50">std::..</text></g><g><title>cfree (191,562,736 samples, 1.83%)</title><rect x="79.6489%" y="245" width="1.8317%" height="15" fill="rgb(240,80,30)" fg:x="8329899537" fg:w="191562736"/><text x="79.8989%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (723,150,166 samples, 6.91%)</title><rect x="74.7193%" y="405" width="6.9146%" height="15" fill="rgb(230,178,19)" fg:x="7814344274" fg:w="723150166"/><text x="74.9693%" y="415.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (481,350,475 samples, 4.60%)</title><rect x="77.0313%" y="389" width="4.6026%" height="15" fill="rgb(210,190,27)" fg:x="8056143965" fg:w="481350475"/><text x="77.2813%" y="399.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (481,350,475 samples, 4.60%)</title><rect x="77.0313%" y="373" width="4.6026%" height="15" fill="rgb(222,107,31)" fg:x="8056143965" fg:w="481350475"/><text x="77.2813%" y="383.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (481,350,475 samples, 4.60%)</title><rect x="77.0313%" y="357" width="4.6026%" height="15" fill="rgb(216,127,34)" fg:x="8056143965" fg:w="481350475"/><text x="77.2813%" y="367.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (481,350,475 samples, 4.60%)</title><rect x="77.0313%" y="341" width="4.6026%" height="15" fill="rgb(234,116,52)" fg:x="8056143965" fg:w="481350475"/><text x="77.2813%" y="351.50">&lt;allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (481,350,475 samples, 4.60%)</title><rect x="77.0313%" y="325" width="4.6026%" height="15" fill="rgb(222,124,15)" fg:x="8056143965" fg:w="481350475"/><text x="77.2813%" y="335.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (16,032,167 samples, 0.15%)</title><rect x="81.4806%" y="309" width="0.1533%" height="15" fill="rgb(231,179,28)" fg:x="8521462273" fg:w="16032167"/><text x="81.7306%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="389" width="0.0883%" height="15" fill="rgb(226,93,45)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="373" width="0.0883%" height="15" fill="rgb(215,8,51)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="357" width="0.0883%" height="15" fill="rgb(223,106,5)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="341" width="0.0883%" height="15" fill="rgb(250,191,5)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="325" width="0.0883%" height="15" fill="rgb(242,132,44)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="309" width="0.0883%" height="15" fill="rgb(251,152,29)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="293" width="0.0883%" height="15" fill="rgb(218,179,5)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,237,930 samples, 0.09%)</title><rect x="81.7241%" y="277" width="0.0883%" height="15" fill="rgb(227,67,19)" fg:x="8546928665" fg:w="9237930"/><text x="81.9741%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (86,320,765 samples, 0.83%)</title><rect x="81.8124%" y="325" width="0.8254%" height="15" fill="rgb(233,119,31)" fg:x="8556166595" fg:w="86320765"/><text x="82.0624%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (86,320,765 samples, 0.83%)</title><rect x="81.8124%" y="309" width="0.8254%" height="15" fill="rgb(241,120,22)" fg:x="8556166595" fg:w="86320765"/><text x="82.0624%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (86,320,765 samples, 0.83%)</title><rect x="81.8124%" y="293" width="0.8254%" height="15" fill="rgb(224,102,30)" fg:x="8556166595" fg:w="86320765"/><text x="82.0624%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (86,320,765 samples, 0.83%)</title><rect x="81.8124%" y="277" width="0.8254%" height="15" fill="rgb(210,164,37)" fg:x="8556166595" fg:w="86320765"/><text x="82.0624%" y="287.50"></text></g><g><title>cfree (86,320,765 samples, 0.83%)</title><rect x="81.8124%" y="261" width="0.8254%" height="15" fill="rgb(226,191,16)" fg:x="8556166595" fg:w="86320765"/><text x="82.0624%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (89,405,409 samples, 0.85%)</title><rect x="81.8124%" y="389" width="0.8549%" height="15" fill="rgb(214,40,45)" fg:x="8556166595" fg:w="89405409"/><text x="82.0624%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (89,405,409 samples, 0.85%)</title><rect x="81.8124%" y="373" width="0.8549%" height="15" fill="rgb(244,29,26)" fg:x="8556166595" fg:w="89405409"/><text x="82.0624%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89,405,409 samples, 0.85%)</title><rect x="81.8124%" y="357" width="0.8549%" height="15" fill="rgb(216,16,5)" fg:x="8556166595" fg:w="89405409"/><text x="82.0624%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (89,405,409 samples, 0.85%)</title><rect x="81.8124%" y="341" width="0.8549%" height="15" fill="rgb(249,76,35)" fg:x="8556166595" fg:w="89405409"/><text x="82.0624%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,084,644 samples, 0.03%)</title><rect x="82.6378%" y="325" width="0.0295%" height="15" fill="rgb(207,11,44)" fg:x="8642487360" fg:w="3084644"/><text x="82.8878%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (111,331,010 samples, 1.06%)</title><rect x="81.6339%" y="405" width="1.0645%" height="15" fill="rgb(228,190,49)" fg:x="8537494440" fg:w="111331010"/><text x="81.8839%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::OwnedOrBorrowed&lt;pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;(),()&gt;&gt;&gt; (3,253,446 samples, 0.03%)</title><rect x="82.6673%" y="389" width="0.0311%" height="15" fill="rgb(214,173,12)" fg:x="8645572004" fg:w="3253446"/><text x="82.9173%" y="399.50"></text></g><g><title>liblevenshtein::transducer::Transducer&lt;D&gt;::query (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="405" width="0.0293%" height="15" fill="rgb(218,26,35)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="415.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::new (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="389" width="0.0293%" height="15" fill="rgb(220,200,19)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="373" width="0.0293%" height="15" fill="rgb(239,95,49)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="357" width="0.0293%" height="15" fill="rgb(235,85,53)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="341" width="0.0293%" height="15" fill="rgb(233,133,31)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="325" width="0.0293%" height="15" fill="rgb(218,25,20)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="335.50"></text></g><g><title>alloc::alloc::alloc (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="309" width="0.0293%" height="15" fill="rgb(252,210,38)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="293" width="0.0293%" height="15" fill="rgb(242,134,21)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="277" width="0.0293%" height="15" fill="rgb(213,28,48)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="287.50"></text></g><g><title>malloc (3,065,817 samples, 0.03%)</title><rect x="82.6984%" y="261" width="0.0293%" height="15" fill="rgb(250,196,2)" fg:x="8648825450" fg:w="3065817"/><text x="82.9484%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,471,592 samples, 0.03%)</title><rect x="82.9485%" y="357" width="0.0332%" height="15" fill="rgb(227,5,17)" fg:x="8674977307" fg:w="3471592"/><text x="83.1985%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3,471,592 samples, 0.03%)</title><rect x="82.9485%" y="341" width="0.0332%" height="15" fill="rgb(221,226,24)" fg:x="8674977307" fg:w="3471592"/><text x="83.1985%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,471,592 samples, 0.03%)</title><rect x="82.9485%" y="325" width="0.0332%" height="15" fill="rgb(211,5,48)" fg:x="8674977307" fg:w="3471592"/><text x="83.1985%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,501,013 samples, 0.03%)</title><rect x="82.9817%" y="357" width="0.0335%" height="15" fill="rgb(219,150,6)" fg:x="8678448899" fg:w="3501013"/><text x="83.2317%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,501,013 samples, 0.03%)</title><rect x="82.9817%" y="341" width="0.0335%" height="15" fill="rgb(251,46,16)" fg:x="8678448899" fg:w="3501013"/><text x="83.2317%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3,501,013 samples, 0.03%)</title><rect x="82.9817%" y="325" width="0.0335%" height="15" fill="rgb(220,204,40)" fg:x="8678448899" fg:w="3501013"/><text x="83.2317%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,501,013 samples, 0.03%)</title><rect x="82.9817%" y="309" width="0.0335%" height="15" fill="rgb(211,85,2)" fg:x="8678448899" fg:w="3501013"/><text x="83.2317%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,501,013 samples, 0.03%)</title><rect x="82.9817%" y="293" width="0.0335%" height="15" fill="rgb(229,17,7)" fg:x="8678448899" fg:w="3501013"/><text x="83.2317%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,501,013 samples, 0.03%)</title><rect x="82.9817%" y="277" width="0.0335%" height="15" fill="rgb(239,72,28)" fg:x="8678448899" fg:w="3501013"/><text x="83.2317%" y="287.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (9,856,028 samples, 0.09%)</title><rect x="83.0151%" y="357" width="0.0942%" height="15" fill="rgb(230,47,54)" fg:x="8681949912" fg:w="9856028"/><text x="83.2651%" y="367.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (9,856,028 samples, 0.09%)</title><rect x="83.0151%" y="341" width="0.0942%" height="15" fill="rgb(214,50,8)" fg:x="8681949912" fg:w="9856028"/><text x="83.2651%" y="351.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (9,856,028 samples, 0.09%)</title><rect x="83.0151%" y="325" width="0.0942%" height="15" fill="rgb(216,198,43)" fg:x="8681949912" fg:w="9856028"/><text x="83.2651%" y="335.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_branches_mask (9,856,028 samples, 0.09%)</title><rect x="83.0151%" y="309" width="0.0942%" height="15" fill="rgb(234,20,35)" fg:x="8681949912" fg:w="9856028"/><text x="83.2651%" y="319.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_branches_mask (6,934,425 samples, 0.07%)</title><rect x="83.0431%" y="293" width="0.0663%" height="15" fill="rgb(254,45,19)" fg:x="8684871515" fg:w="6934425"/><text x="83.2931%" y="303.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::get_both_keys (6,934,425 samples, 0.07%)</title><rect x="83.0431%" y="277" width="0.0663%" height="15" fill="rgb(219,14,44)" fg:x="8684871515" fg:w="6934425"/><text x="83.2931%" y="287.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::is_used (6,934,425 samples, 0.07%)</title><rect x="83.0431%" y="261" width="0.0663%" height="15" fill="rgb(217,220,26)" fg:x="8684871515" fg:w="6934425"/><text x="83.2931%" y="271.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (20,138,575 samples, 0.19%)</title><rect x="82.9485%" y="389" width="0.1926%" height="15" fill="rgb(213,158,28)" fg:x="8674977307" fg:w="20138575"/><text x="83.1985%" y="399.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (20,138,575 samples, 0.19%)</title><rect x="82.9485%" y="373" width="0.1926%" height="15" fill="rgb(252,51,52)" fg:x="8674977307" fg:w="20138575"/><text x="83.1985%" y="383.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (3,309,942 samples, 0.03%)</title><rect x="83.1094%" y="357" width="0.0316%" height="15" fill="rgb(246,89,16)" fg:x="8691805940" fg:w="3309942"/><text x="83.3594%" y="367.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (3,309,942 samples, 0.03%)</title><rect x="83.1094%" y="341" width="0.0316%" height="15" fill="rgb(216,158,49)" fg:x="8691805940" fg:w="3309942"/><text x="83.3594%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (3,309,942 samples, 0.03%)</title><rect x="83.1094%" y="325" width="0.0316%" height="15" fill="rgb(236,107,19)" fg:x="8691805940" fg:w="3309942"/><text x="83.3594%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3,309,942 samples, 0.03%)</title><rect x="83.1094%" y="309" width="0.0316%" height="15" fill="rgb(228,185,30)" fg:x="8691805940" fg:w="3309942"/><text x="83.3594%" y="319.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,566,052 samples, 0.06%)</title><rect x="83.1410%" y="325" width="0.0628%" height="15" fill="rgb(246,134,8)" fg:x="8695115882" fg:w="6566052"/><text x="83.3910%" y="335.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (16,541,985 samples, 0.16%)</title><rect x="83.1410%" y="389" width="0.1582%" height="15" fill="rgb(214,143,50)" fg:x="8695115882" fg:w="16541985"/><text x="83.3910%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,541,985 samples, 0.16%)</title><rect x="83.1410%" y="373" width="0.1582%" height="15" fill="rgb(228,75,8)" fg:x="8695115882" fg:w="16541985"/><text x="83.3910%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (16,541,985 samples, 0.16%)</title><rect x="83.1410%" y="357" width="0.1582%" height="15" fill="rgb(207,175,4)" fg:x="8695115882" fg:w="16541985"/><text x="83.3910%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16,541,985 samples, 0.16%)</title><rect x="83.1410%" y="341" width="0.1582%" height="15" fill="rgb(205,108,24)" fg:x="8695115882" fg:w="16541985"/><text x="83.3910%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (9,975,933 samples, 0.10%)</title><rect x="83.2038%" y="325" width="0.0954%" height="15" fill="rgb(244,120,49)" fg:x="8701681934" fg:w="9975933"/><text x="83.4538%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6,764,508 samples, 0.06%)</title><rect x="83.2345%" y="309" width="0.0647%" height="15" fill="rgb(223,47,38)" fg:x="8704893359" fg:w="6764508"/><text x="83.4845%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9,579,040 samples, 0.09%)</title><rect x="83.4285%" y="341" width="0.0916%" height="15" fill="rgb(229,179,11)" fg:x="8725180133" fg:w="9579040"/><text x="83.6785%" y="351.50"></text></g><g><title>liblevenshtein::transducer::pool::StatePool::acquire (25,933,719 samples, 0.25%)</title><rect x="83.2992%" y="373" width="0.2480%" height="15" fill="rgb(231,122,1)" fg:x="8711657867" fg:w="25933719"/><text x="83.5492%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (15,929,829 samples, 0.15%)</title><rect x="83.3949%" y="357" width="0.1523%" height="15" fill="rgb(245,119,9)" fg:x="8721661757" fg:w="15929829"/><text x="83.6449%" y="367.50"></text></g><g><title>core::ptr::read (2,832,413 samples, 0.03%)</title><rect x="83.5201%" y="341" width="0.0271%" height="15" fill="rgb(241,163,25)" fg:x="8734759173" fg:w="2832413"/><text x="83.7701%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,117,625 samples, 0.03%)</title><rect x="83.5709%" y="341" width="0.0298%" height="15" fill="rgb(217,214,3)" fg:x="8740068173" fg:w="3117625"/><text x="83.8209%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,117,625 samples, 0.03%)</title><rect x="83.5709%" y="325" width="0.0298%" height="15" fill="rgb(240,86,28)" fg:x="8740068173" fg:w="3117625"/><text x="83.8209%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7,241,706 samples, 0.07%)</title><rect x="83.6007%" y="309" width="0.0692%" height="15" fill="rgb(215,47,9)" fg:x="8743185798" fg:w="7241706"/><text x="83.8507%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7,241,706 samples, 0.07%)</title><rect x="83.6007%" y="293" width="0.0692%" height="15" fill="rgb(252,25,45)" fg:x="8743185798" fg:w="7241706"/><text x="83.8507%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (7,241,706 samples, 0.07%)</title><rect x="83.6007%" y="277" width="0.0692%" height="15" fill="rgb(251,164,9)" fg:x="8743185798" fg:w="7241706"/><text x="83.8507%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7,241,706 samples, 0.07%)</title><rect x="83.6007%" y="261" width="0.0692%" height="15" fill="rgb(233,194,0)" fg:x="8743185798" fg:w="7241706"/><text x="83.8507%" y="271.50"></text></g><g><title>liblevenshtein::transducer::state::State::copy_from (16,108,899 samples, 0.15%)</title><rect x="83.5472%" y="357" width="0.1540%" height="15" fill="rgb(249,111,24)" fg:x="8737591586" fg:w="16108899"/><text x="83.7972%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10,514,687 samples, 0.10%)</title><rect x="83.6007%" y="341" width="0.1005%" height="15" fill="rgb(250,223,3)" fg:x="8743185798" fg:w="10514687"/><text x="83.8507%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (10,514,687 samples, 0.10%)</title><rect x="83.6007%" y="325" width="0.1005%" height="15" fill="rgb(236,178,37)" fg:x="8743185798" fg:w="10514687"/><text x="83.8507%" y="335.50"></text></g><g><title>core::ptr::write (3,272,981 samples, 0.03%)</title><rect x="83.6699%" y="309" width="0.0313%" height="15" fill="rgb(241,158,50)" fg:x="8750427504" fg:w="3272981"/><text x="83.9199%" y="319.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::clone::Clone&gt;::clone (12,867,803 samples, 0.12%)</title><rect x="83.9857%" y="341" width="0.1230%" height="15" fill="rgb(213,121,41)" fg:x="8783455534" fg:w="12867803"/><text x="84.2357%" y="351.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (20,125,170 samples, 0.19%)</title><rect x="84.1088%" y="325" width="0.1924%" height="15" fill="rgb(240,92,3)" fg:x="8796323337" fg:w="20125170"/><text x="84.3588%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (20,125,170 samples, 0.19%)</title><rect x="84.1088%" y="309" width="0.1924%" height="15" fill="rgb(205,123,3)" fg:x="8796323337" fg:w="20125170"/><text x="84.3588%" y="319.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (36,449,453 samples, 0.35%)</title><rect x="84.1088%" y="341" width="0.3485%" height="15" fill="rgb(205,97,47)" fg:x="8796323337" fg:w="36449453"/><text x="84.3588%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16,324,283 samples, 0.16%)</title><rect x="84.3012%" y="325" width="0.1561%" height="15" fill="rgb(247,152,14)" fg:x="8816448507" fg:w="16324283"/><text x="84.5512%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16,324,283 samples, 0.16%)</title><rect x="84.3012%" y="309" width="0.1561%" height="15" fill="rgb(248,195,53)" fg:x="8816448507" fg:w="16324283"/><text x="84.5512%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[liblevenshtein::transducer::position::Position: 8]&gt;&gt; (3,313,114 samples, 0.03%)</title><rect x="84.4573%" y="341" width="0.0317%" height="15" fill="rgb(226,201,16)" fg:x="8832772790" fg:w="3313114"/><text x="84.7073%" y="351.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (3,313,114 samples, 0.03%)</title><rect x="84.4573%" y="325" width="0.0317%" height="15" fill="rgb(205,98,0)" fg:x="8832772790" fg:w="3313114"/><text x="84.7073%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (28,398,700 samples, 0.27%)</title><rect x="84.4890%" y="293" width="0.2715%" height="15" fill="rgb(214,191,48)" fg:x="8836085904" fg:w="28398700"/><text x="84.7390%" y="303.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::PartialEq&gt;::eq (28,398,700 samples, 0.27%)</title><rect x="84.4890%" y="277" width="0.2715%" height="15" fill="rgb(237,112,39)" fg:x="8836085904" fg:w="28398700"/><text x="84.7390%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (41,221,087 samples, 0.39%)</title><rect x="84.4890%" y="341" width="0.3941%" height="15" fill="rgb(247,203,27)" fg:x="8836085904" fg:w="41221087"/><text x="84.7390%" y="351.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (41,221,087 samples, 0.39%)</title><rect x="84.4890%" y="325" width="0.3941%" height="15" fill="rgb(235,124,28)" fg:x="8836085904" fg:w="41221087"/><text x="84.7390%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (41,221,087 samples, 0.39%)</title><rect x="84.4890%" y="309" width="0.3941%" height="15" fill="rgb(208,207,46)" fg:x="8836085904" fg:w="41221087"/><text x="84.7390%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12,822,387 samples, 0.12%)</title><rect x="84.7605%" y="293" width="0.1226%" height="15" fill="rgb(234,176,4)" fg:x="8864484604" fg:w="12822387"/><text x="85.0105%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (12,822,387 samples, 0.12%)</title><rect x="84.7605%" y="277" width="0.1226%" height="15" fill="rgb(230,133,28)" fg:x="8864484604" fg:w="12822387"/><text x="85.0105%" y="287.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (3,053,154 samples, 0.03%)</title><rect x="84.8831%" y="341" width="0.0292%" height="15" fill="rgb(211,137,40)" fg:x="8877306991" fg:w="3053154"/><text x="85.1331%" y="351.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (22,370,440 samples, 0.21%)</title><rect x="84.9123%" y="341" width="0.2139%" height="15" fill="rgb(254,35,13)" fg:x="8880360145" fg:w="22370440"/><text x="85.1623%" y="351.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (22,370,440 samples, 0.21%)</title><rect x="84.9123%" y="325" width="0.2139%" height="15" fill="rgb(225,49,51)" fg:x="8880360145" fg:w="22370440"/><text x="85.1623%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (6,187,347 samples, 0.06%)</title><rect x="85.0670%" y="309" width="0.0592%" height="15" fill="rgb(251,10,15)" fg:x="8896543238" fg:w="6187347"/><text x="85.3170%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,245,229 samples, 0.03%)</title><rect x="85.4694%" y="325" width="0.0310%" height="15" fill="rgb(228,207,15)" fg:x="8938626383" fg:w="3245229"/><text x="85.7194%" y="335.50"></text></g><g><title>core::ptr::write (33,141,948 samples, 0.32%)</title><rect x="85.5005%" y="325" width="0.3169%" height="15" fill="rgb(241,99,19)" fg:x="8941871612" fg:w="33141948"/><text x="85.7505%" y="335.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (364,819,746 samples, 3.49%)</title><rect x="82.7277%" y="405" width="3.4883%" height="15" fill="rgb(207,104,49)" fg:x="8651891267" fg:w="364819746"/><text x="82.9777%" y="415.50">lib..</text></g><g><title>liblevenshtein::transducer::transition::transition_state_pooled (305,053,146 samples, 2.92%)</title><rect x="83.2992%" y="389" width="2.9169%" height="15" fill="rgb(234,99,18)" fg:x="8711657867" fg:w="305053146"/><text x="83.5492%" y="399.50">li..</text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_into (279,119,427 samples, 2.67%)</title><rect x="83.5472%" y="373" width="2.6689%" height="15" fill="rgb(213,191,49)" fg:x="8737591586" fg:w="279119427"/><text x="83.7972%" y="383.50">li..</text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_mut (263,010,528 samples, 2.51%)</title><rect x="83.7012%" y="357" width="2.5149%" height="15" fill="rgb(210,226,19)" fg:x="8753700485" fg:w="263010528"/><text x="83.9512%" y="367.50">li..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (113,980,428 samples, 1.09%)</title><rect x="85.1262%" y="341" width="1.0899%" height="15" fill="rgb(229,97,18)" fg:x="8902730585" fg:w="113980428"/><text x="85.3762%" y="351.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (41,697,453 samples, 0.40%)</title><rect x="85.8174%" y="325" width="0.3987%" height="15" fill="rgb(211,167,15)" fg:x="8975013560" fg:w="41697453"/><text x="86.0674%" y="335.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (15,742,685 samples, 0.15%)</title><rect x="86.0655%" y="309" width="0.1505%" height="15" fill="rgb(210,169,34)" fg:x="9000968328" fg:w="15742685"/><text x="86.3155%" y="319.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25,596,673 samples, 0.24%)</title><rect x="86.4550%" y="389" width="0.2448%" height="15" fill="rgb(241,121,31)" fg:x="9041698573" fg:w="25596673"/><text x="86.7050%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (25,596,673 samples, 0.24%)</title><rect x="86.4550%" y="373" width="0.2448%" height="15" fill="rgb(232,40,11)" fg:x="9041698573" fg:w="25596673"/><text x="86.7050%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (25,596,673 samples, 0.24%)</title><rect x="86.4550%" y="357" width="0.2448%" height="15" fill="rgb(205,86,26)" fg:x="9041698573" fg:w="25596673"/><text x="86.7050%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22,172,936 samples, 0.21%)</title><rect x="86.4877%" y="341" width="0.2120%" height="15" fill="rgb(231,126,28)" fg:x="9045122310" fg:w="22172936"/><text x="86.7377%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (22,172,936 samples, 0.21%)</title><rect x="86.4877%" y="325" width="0.2120%" height="15" fill="rgb(219,221,18)" fg:x="9045122310" fg:w="22172936"/><text x="86.7377%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (22,172,936 samples, 0.21%)</title><rect x="86.4877%" y="309" width="0.2120%" height="15" fill="rgb(211,40,0)" fg:x="9045122310" fg:w="22172936"/><text x="86.7377%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (22,172,936 samples, 0.21%)</title><rect x="86.4877%" y="293" width="0.2120%" height="15" fill="rgb(239,85,43)" fg:x="9045122310" fg:w="22172936"/><text x="86.7377%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (80,163,827 samples, 0.77%)</title><rect x="86.6997%" y="389" width="0.7665%" height="15" fill="rgb(231,55,21)" fg:x="9067295246" fg:w="80163827"/><text x="86.9497%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5,956,949 samples, 0.06%)</title><rect x="87.4093%" y="373" width="0.0570%" height="15" fill="rgb(225,184,43)" fg:x="9141502124" fg:w="5956949"/><text x="87.6593%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (3,140,998 samples, 0.03%)</title><rect x="87.4663%" y="389" width="0.0300%" height="15" fill="rgb(251,158,41)" fg:x="9147459073" fg:w="3140998"/><text x="87.7163%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert_mut (3,140,998 samples, 0.03%)</title><rect x="87.4663%" y="373" width="0.0300%" height="15" fill="rgb(234,159,37)" fg:x="9147459073" fg:w="3140998"/><text x="87.7163%" y="383.50"></text></g><g><title>core::ptr::copy (3,140,998 samples, 0.03%)</title><rect x="87.4663%" y="357" width="0.0300%" height="15" fill="rgb(216,204,22)" fg:x="9147459073" fg:w="3140998"/><text x="87.7163%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (15,692,549 samples, 0.15%)</title><rect x="87.8000%" y="341" width="0.1500%" height="15" fill="rgb(214,17,3)" fg:x="9182364361" fg:w="15692549"/><text x="88.0500%" y="351.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert::{{closure}} (15,692,549 samples, 0.15%)</title><rect x="87.8000%" y="325" width="0.1500%" height="15" fill="rgb(212,111,17)" fg:x="9182364361" fg:w="15692549"/><text x="88.0500%" y="335.50"></text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (15,692,549 samples, 0.15%)</title><rect x="87.8000%" y="309" width="0.1500%" height="15" fill="rgb(221,157,24)" fg:x="9182364361" fg:w="15692549"/><text x="88.0500%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (50,535,682 samples, 0.48%)</title><rect x="87.4963%" y="389" width="0.4832%" height="15" fill="rgb(252,16,13)" fg:x="9150600071" fg:w="50535682"/><text x="87.7463%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (50,535,682 samples, 0.48%)</title><rect x="87.4963%" y="373" width="0.4832%" height="15" fill="rgb(221,62,2)" fg:x="9150600071" fg:w="50535682"/><text x="87.7463%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (50,535,682 samples, 0.48%)</title><rect x="87.4963%" y="357" width="0.4832%" height="15" fill="rgb(247,87,22)" fg:x="9150600071" fg:w="50535682"/><text x="87.7463%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,078,843 samples, 0.03%)</title><rect x="87.9501%" y="341" width="0.0294%" height="15" fill="rgb(215,73,9)" fg:x="9198056910" fg:w="3078843"/><text x="88.2001%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (10,050,245 samples, 0.10%)</title><rect x="87.9795%" y="389" width="0.0961%" height="15" fill="rgb(207,175,33)" fg:x="9201135753" fg:w="10050245"/><text x="88.2295%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (10,050,245 samples, 0.10%)</title><rect x="87.9795%" y="373" width="0.0961%" height="15" fill="rgb(243,129,54)" fg:x="9201135753" fg:w="10050245"/><text x="88.2295%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search::{{closure}} (10,050,245 samples, 0.10%)</title><rect x="87.9795%" y="357" width="0.0961%" height="15" fill="rgb(227,119,45)" fg:x="9201135753" fg:w="10050245"/><text x="88.2295%" y="367.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::Ord&gt;::cmp (10,050,245 samples, 0.10%)</title><rect x="87.9795%" y="341" width="0.0961%" height="15" fill="rgb(205,109,36)" fg:x="9201135753" fg:w="10050245"/><text x="88.2295%" y="351.50"></text></g><g><title>liblevenshtein::transducer::position::Position::compare (10,050,245 samples, 0.10%)</title><rect x="87.9795%" y="325" width="0.0961%" height="15" fill="rgb(205,6,39)" fg:x="9201135753" fg:w="10050245"/><text x="88.2295%" y="335.50"></text></g><g><title>core::cmp::Ordering::then_with (6,622,201 samples, 0.06%)</title><rect x="88.0123%" y="309" width="0.0633%" height="15" fill="rgb(221,32,16)" fg:x="9204563797" fg:w="6622201"/><text x="88.2623%" y="319.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (197,850,832 samples, 1.89%)</title><rect x="86.2161%" y="405" width="1.8918%" height="15" fill="rgb(228,144,50)" fg:x="9016711013" fg:w="197850832"/><text x="86.4661%" y="415.50">l..</text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (3,375,847 samples, 0.03%)</title><rect x="88.0756%" y="389" width="0.0323%" height="15" fill="rgb(229,201,53)" fg:x="9211185998" fg:w="3375847"/><text x="88.3256%" y="399.50"></text></g><g><title>malloc (2,988,133 samples, 0.03%)</title><rect x="88.1079%" y="405" width="0.0286%" height="15" fill="rgb(249,153,27)" fg:x="9214561845" fg:w="2988133"/><text x="88.3579%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (6,577,112 samples, 0.06%)</title><rect x="89.0850%" y="357" width="0.0629%" height="15" fill="rgb(227,106,25)" fg:x="9316755245" fg:w="6577112"/><text x="89.3350%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6,577,112 samples, 0.06%)</title><rect x="89.0850%" y="341" width="0.0629%" height="15" fill="rgb(230,65,29)" fg:x="9316755245" fg:w="6577112"/><text x="89.3350%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6,577,112 samples, 0.06%)</title><rect x="89.0850%" y="325" width="0.0629%" height="15" fill="rgb(221,57,46)" fg:x="9316755245" fg:w="6577112"/><text x="89.3350%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (6,577,112 samples, 0.06%)</title><rect x="89.0850%" y="309" width="0.0629%" height="15" fill="rgb(229,161,17)" fg:x="9316755245" fg:w="6577112"/><text x="89.3350%" y="319.50"></text></g><g><title>[libc.so.6] (9,434,964 samples, 0.09%)</title><rect x="89.2100%" y="197" width="0.0902%" height="15" fill="rgb(222,213,11)" fg:x="9329824647" fg:w="9434964"/><text x="89.4600%" y="207.50"></text></g><g><title>[libc.so.6] (9,434,964 samples, 0.09%)</title><rect x="89.2100%" y="181" width="0.0902%" height="15" fill="rgb(235,35,13)" fg:x="9329824647" fg:w="9434964"/><text x="89.4600%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="357" width="0.7215%" height="15" fill="rgb(233,158,34)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="341" width="0.7215%" height="15" fill="rgb(215,151,48)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="325" width="0.7215%" height="15" fill="rgb(229,84,14)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="309" width="0.7215%" height="15" fill="rgb(229,68,14)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="293" width="0.7215%" height="15" fill="rgb(243,106,26)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="277" width="0.7215%" height="15" fill="rgb(206,45,38)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="261" width="0.7215%" height="15" fill="rgb(226,6,15)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="271.50"></text></g><g><title>alloc::alloc::alloc (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="245" width="0.7215%" height="15" fill="rgb(232,22,54)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="255.50"></text></g><g><title>__rustc::__rdl_alloc (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="229" width="0.7215%" height="15" fill="rgb(229,222,32)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (75,456,884 samples, 0.72%)</title><rect x="89.1479%" y="213" width="0.7215%" height="15" fill="rgb(228,62,29)" fg:x="9323332357" fg:w="75456884"/><text x="89.3979%" y="223.50"></text></g><g><title>malloc (59,529,630 samples, 0.57%)</title><rect x="89.3002%" y="197" width="0.5692%" height="15" fill="rgb(251,103,34)" fg:x="9339259611" fg:w="59529630"/><text x="89.5502%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18,488,922 samples, 0.18%)</title><rect x="89.9006%" y="341" width="0.1768%" height="15" fill="rgb(233,12,30)" fg:x="9402048384" fg:w="18488922"/><text x="90.1506%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18,488,922 samples, 0.18%)</title><rect x="89.9006%" y="325" width="0.1768%" height="15" fill="rgb(238,52,0)" fg:x="9402048384" fg:w="18488922"/><text x="90.1506%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (18,488,922 samples, 0.18%)</title><rect x="89.9006%" y="309" width="0.1768%" height="15" fill="rgb(223,98,5)" fg:x="9402048384" fg:w="18488922"/><text x="90.1506%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (18,488,922 samples, 0.18%)</title><rect x="89.9006%" y="293" width="0.1768%" height="15" fill="rgb(228,75,37)" fg:x="9402048384" fg:w="18488922"/><text x="90.1506%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (18,488,922 samples, 0.18%)</title><rect x="89.9006%" y="277" width="0.1768%" height="15" fill="rgb(205,115,49)" fg:x="9402048384" fg:w="18488922"/><text x="90.1506%" y="287.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (57,183,487 samples, 0.55%)</title><rect x="90.0774%" y="341" width="0.5468%" height="15" fill="rgb(250,154,43)" fg:x="9420537306" fg:w="57183487"/><text x="90.3274%" y="351.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (57,183,487 samples, 0.55%)</title><rect x="90.0774%" y="325" width="0.5468%" height="15" fill="rgb(226,43,29)" fg:x="9420537306" fg:w="57183487"/><text x="90.3274%" y="335.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (57,183,487 samples, 0.55%)</title><rect x="90.0774%" y="309" width="0.5468%" height="15" fill="rgb(249,228,39)" fg:x="9420537306" fg:w="57183487"/><text x="90.3274%" y="319.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (54,176,719 samples, 0.52%)</title><rect x="90.1061%" y="293" width="0.5180%" height="15" fill="rgb(216,79,43)" fg:x="9423544074" fg:w="54176719"/><text x="90.3561%" y="303.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (22,320,761 samples, 0.21%)</title><rect x="90.4107%" y="277" width="0.2134%" height="15" fill="rgb(228,95,12)" fg:x="9455400032" fg:w="22320761"/><text x="90.6607%" y="287.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (6,580,552 samples, 0.06%)</title><rect x="90.8702%" y="293" width="0.0629%" height="15" fill="rgb(249,221,15)" fg:x="9503451860" fg:w="6580552"/><text x="91.1202%" y="303.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (6,580,552 samples, 0.06%)</title><rect x="90.8702%" y="277" width="0.0629%" height="15" fill="rgb(233,34,13)" fg:x="9503451860" fg:w="6580552"/><text x="91.1202%" y="287.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (12,880,928 samples, 0.12%)</title><rect x="90.8407%" y="325" width="0.1232%" height="15" fill="rgb(214,103,39)" fg:x="9500371133" fg:w="12880928"/><text x="91.0907%" y="335.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (9,800,201 samples, 0.09%)</title><rect x="90.8702%" y="309" width="0.0937%" height="15" fill="rgb(251,126,39)" fg:x="9503451860" fg:w="9800201"/><text x="91.1202%" y="319.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (3,219,649 samples, 0.03%)</title><rect x="90.9331%" y="293" width="0.0308%" height="15" fill="rgb(214,216,36)" fg:x="9510032412" fg:w="3219649"/><text x="91.1831%" y="303.50"></text></g><g><title>[libc.so.6] (98,046,743 samples, 0.94%)</title><rect x="91.1231%" y="261" width="0.9375%" height="15" fill="rgb(220,221,8)" fg:x="9529898363" fg:w="98046743"/><text x="91.3731%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (131,565,121 samples, 1.26%)</title><rect x="90.9974%" y="309" width="1.2580%" height="15" fill="rgb(240,216,3)" fg:x="9516752378" fg:w="131565121"/><text x="91.2474%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (131,565,121 samples, 1.26%)</title><rect x="90.9974%" y="293" width="1.2580%" height="15" fill="rgb(232,218,17)" fg:x="9516752378" fg:w="131565121"/><text x="91.2474%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (131,565,121 samples, 1.26%)</title><rect x="90.9974%" y="277" width="1.2580%" height="15" fill="rgb(229,163,45)" fg:x="9516752378" fg:w="131565121"/><text x="91.2474%" y="287.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="261" width="0.1948%" height="15" fill="rgb(231,110,42)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="271.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="245" width="0.1948%" height="15" fill="rgb(208,170,48)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="255.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="229" width="0.1948%" height="15" fill="rgb(239,116,25)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="239.50"></text></g><g><title>pathmap::zipper::node_along_path (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="213" width="0.1948%" height="15" fill="rgb(219,200,50)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="223.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="197" width="0.1948%" height="15" fill="rgb(245,200,0)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="207.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="181" width="0.1948%" height="15" fill="rgb(245,119,33)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="165" width="0.1948%" height="15" fill="rgb(231,125,12)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="149" width="0.1948%" height="15" fill="rgb(216,96,41)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (20,372,393 samples, 0.19%)</title><rect x="92.0606%" y="133" width="0.1948%" height="15" fill="rgb(248,43,45)" fg:x="9627945106" fg:w="20372393"/><text x="92.3106%" y="143.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::child_in_slot (12,879,018 samples, 0.12%)</title><rect x="92.2554%" y="309" width="0.1231%" height="15" fill="rgb(217,222,7)" fg:x="9648317499" fg:w="12879018"/><text x="92.5054%" y="319.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::ops::deref::Deref&gt;::deref (12,879,018 samples, 0.12%)</title><rect x="92.2554%" y="293" width="0.1231%" height="15" fill="rgb(233,28,6)" fg:x="9648317499" fg:w="12879018"/><text x="92.5054%" y="303.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (197,076,847 samples, 1.88%)</title><rect x="90.6241%" y="341" width="1.8844%" height="15" fill="rgb(231,218,15)" fg:x="9477720793" fg:w="197076847"/><text x="90.8741%" y="351.50">p..</text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (161,545,579 samples, 1.54%)</title><rect x="90.9639%" y="325" width="1.5447%" height="15" fill="rgb(226,171,48)" fg:x="9513252061" fg:w="161545579"/><text x="91.2139%" y="335.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (13,601,123 samples, 0.13%)</title><rect x="92.3785%" y="309" width="0.1301%" height="15" fill="rgb(235,201,9)" fg:x="9661196517" fg:w="13601123"/><text x="92.6285%" y="319.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (3,450,620 samples, 0.03%)</title><rect x="92.4756%" y="293" width="0.0330%" height="15" fill="rgb(217,80,15)" fg:x="9671347020" fg:w="3450620"/><text x="92.7256%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6,471,332 samples, 0.06%)</title><rect x="92.6006%" y="309" width="0.0619%" height="15" fill="rgb(219,152,8)" fg:x="9684419409" fg:w="6471332"/><text x="92.8506%" y="319.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val::{{closure}} (6,471,332 samples, 0.06%)</title><rect x="92.6006%" y="293" width="0.0619%" height="15" fill="rgb(243,107,38)" fg:x="9684419409" fg:w="6471332"/><text x="92.8506%" y="303.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::val (6,471,332 samples, 0.06%)</title><rect x="92.6006%" y="277" width="0.0619%" height="15" fill="rgb(231,17,5)" fg:x="9684419409" fg:w="6471332"/><text x="92.8506%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (6,471,332 samples, 0.06%)</title><rect x="92.6006%" y="261" width="0.0619%" height="15" fill="rgb(209,25,54)" fg:x="9684419409" fg:w="6471332"/><text x="92.8506%" y="271.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (3,414,731 samples, 0.03%)</title><rect x="92.6931%" y="293" width="0.0327%" height="15" fill="rgb(219,0,2)" fg:x="9694099855" fg:w="3414731"/><text x="92.9431%" y="303.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (3,414,731 samples, 0.03%)</title><rect x="92.6931%" y="277" width="0.0327%" height="15" fill="rgb(246,9,5)" fg:x="9694099855" fg:w="3414731"/><text x="92.9431%" y="287.50"></text></g><g><title>pathmap::zipper::node_along_path (314,468,932 samples, 3.01%)</title><rect x="89.8694%" y="357" width="3.0069%" height="15" fill="rgb(226,159,4)" fg:x="9398789241" fg:w="314468932"/><text x="90.1194%" y="367.50">pat..</text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_val (38,460,533 samples, 0.37%)</title><rect x="92.5086%" y="341" width="0.3678%" height="15" fill="rgb(219,175,34)" fg:x="9674797640" fg:w="38460533"/><text x="92.7586%" y="351.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val (31,979,003 samples, 0.31%)</title><rect x="92.5705%" y="325" width="0.3058%" height="15" fill="rgb(236,10,46)" fg:x="9681279170" fg:w="31979003"/><text x="92.8205%" y="335.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (22,367,432 samples, 0.21%)</title><rect x="92.6624%" y="309" width="0.2139%" height="15" fill="rgb(240,211,16)" fg:x="9690890741" fg:w="22367432"/><text x="92.9124%" y="319.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (15,743,587 samples, 0.15%)</title><rect x="92.7258%" y="293" width="0.1505%" height="15" fill="rgb(205,3,43)" fg:x="9697514586" fg:w="15743587"/><text x="92.9758%" y="303.50"></text></g><g><title>pathmap::zipper::SliceOrLen::len (8,541,393 samples, 0.08%)</title><rect x="93.2523%" y="341" width="0.0817%" height="15" fill="rgb(245,7,22)" fg:x="9752577048" fg:w="8541393"/><text x="93.5023%" y="351.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::make_static_path (67,482,337 samples, 0.65%)</title><rect x="92.8763%" y="357" width="0.6453%" height="15" fill="rgb(239,132,32)" fg:x="9713258173" fg:w="67482337"/><text x="93.1263%" y="367.50"></text></g><g><title>pathmap::zipper::SliceOrLen::new_owned (19,622,069 samples, 0.19%)</title><rect x="93.3339%" y="341" width="0.1876%" height="15" fill="rgb(228,202,34)" fg:x="9761118441" fg:w="19622069"/><text x="93.5839%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,892,485 samples, 0.03%)</title><rect x="93.8246%" y="309" width="0.0277%" height="15" fill="rgb(254,200,22)" fg:x="9812436736" fg:w="2892485"/><text x="94.0746%" y="319.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (2,892,485 samples, 0.03%)</title><rect x="93.8246%" y="293" width="0.0277%" height="15" fill="rgb(219,10,39)" fg:x="9812436736" fg:w="2892485"/><text x="94.0746%" y="303.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (2,892,485 samples, 0.03%)</title><rect x="93.8246%" y="277" width="0.0277%" height="15" fill="rgb(226,210,39)" fg:x="9812436736" fg:w="2892485"/><text x="94.0746%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2,892,485 samples, 0.03%)</title><rect x="93.8246%" y="261" width="0.0277%" height="15" fill="rgb(208,219,16)" fg:x="9812436736" fg:w="2892485"/><text x="94.0746%" y="271.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (601,149,988 samples, 5.75%)</title><rect x="88.1364%" y="405" width="5.7481%" height="15" fill="rgb(216,158,51)" fg:x="9217549978" fg:w="601149988"/><text x="88.3864%" y="415.50">pathmap..</text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (550,390,632 samples, 5.26%)</title><rect x="88.6218%" y="389" width="5.2627%" height="15" fill="rgb(233,14,44)" fg:x="9268309334" fg:w="550390632"/><text x="88.8718%" y="399.50">pathma..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (543,898,723 samples, 5.20%)</title><rect x="88.6839%" y="373" width="5.2007%" height="15" fill="rgb(237,97,39)" fg:x="9274801243" fg:w="543898723"/><text x="88.9339%" y="383.50">pathma..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (37,959,456 samples, 0.36%)</title><rect x="93.5216%" y="357" width="0.3630%" height="15" fill="rgb(218,198,43)" fg:x="9780740510" fg:w="37959456"/><text x="93.7716%" y="367.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (6,263,230 samples, 0.06%)</title><rect x="93.8246%" y="341" width="0.0599%" height="15" fill="rgb(231,104,20)" fg:x="9812436736" fg:w="6263230"/><text x="94.0746%" y="351.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (6,263,230 samples, 0.06%)</title><rect x="93.8246%" y="325" width="0.0599%" height="15" fill="rgb(254,36,13)" fg:x="9812436736" fg:w="6263230"/><text x="94.0746%" y="335.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (3,370,745 samples, 0.03%)</title><rect x="93.8523%" y="309" width="0.0322%" height="15" fill="rgb(248,14,50)" fg:x="9815329221" fg:w="3370745"/><text x="94.1023%" y="319.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (3,370,745 samples, 0.03%)</title><rect x="93.8523%" y="293" width="0.0322%" height="15" fill="rgb(217,107,29)" fg:x="9815329221" fg:w="3370745"/><text x="94.1023%" y="303.50"></text></g><g><title>pathmap::trie_node::node_along_path_mut (1,113,155 samples, 0.01%)</title><rect x="93.8845%" y="405" width="0.0106%" height="15" fill="rgb(251,169,33)" fg:x="9818699966" fg:w="1113155"/><text x="94.1345%" y="415.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::make_mut (1,113,155 samples, 0.01%)</title><rect x="93.8845%" y="389" width="0.0106%" height="15" fill="rgb(217,108,32)" fg:x="9818699966" fg:w="1113155"/><text x="94.1345%" y="399.50"></text></g><g><title>[libc.so.6] (5,795,943 samples, 0.06%)</title><rect x="93.8952%" y="197" width="0.0554%" height="15" fill="rgb(219,66,42)" fg:x="9819813121" fg:w="5795943"/><text x="94.1452%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="373" width="0.0844%" height="15" fill="rgb(206,180,7)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="357" width="0.0844%" height="15" fill="rgb(208,226,31)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="341" width="0.0844%" height="15" fill="rgb(218,26,49)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="325" width="0.0844%" height="15" fill="rgb(233,197,48)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="309" width="0.0844%" height="15" fill="rgb(252,181,51)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="293" width="0.0844%" height="15" fill="rgb(253,90,19)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="277" width="0.0844%" height="15" fill="rgb(215,171,30)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="261" width="0.0844%" height="15" fill="rgb(214,222,9)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="245" width="0.0844%" height="15" fill="rgb(223,3,22)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="229" width="0.0844%" height="15" fill="rgb(225,196,46)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8,828,068 samples, 0.08%)</title><rect x="93.8952%" y="213" width="0.0844%" height="15" fill="rgb(209,110,37)" fg:x="9819813121" fg:w="8828068"/><text x="94.1452%" y="223.50"></text></g><g><title>cfree (3,032,125 samples, 0.03%)</title><rect x="93.9506%" y="197" width="0.0290%" height="15" fill="rgb(249,89,12)" fg:x="9825609064" fg:w="3032125"/><text x="94.2006%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (527,863,815 samples, 5.05%)</title><rect x="93.8952%" y="389" width="5.0473%" height="15" fill="rgb(226,27,33)" fg:x="9819813121" fg:w="527863815"/><text x="94.1452%" y="399.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="373" width="4.9629%" height="15" fill="rgb(213,82,22)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="383.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="357" width="4.9629%" height="15" fill="rgb(248,140,0)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="367.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="341" width="4.9629%" height="15" fill="rgb(228,106,3)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="351.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="325" width="4.9629%" height="15" fill="rgb(209,23,37)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="335.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="309" width="4.9629%" height="15" fill="rgb(241,93,50)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="319.50">alloc:..</text></g><g><title>__rustc::__rdl_dealloc (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="293" width="4.9629%" height="15" fill="rgb(253,46,43)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="303.50">__rust..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="277" width="4.9629%" height="15" fill="rgb(226,206,43)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="287.50">std::s..</text></g><g><title>[libc.so.6] (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="261" width="4.9629%" height="15" fill="rgb(217,54,7)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="271.50">[libc...</text></g><g><title>[libc.so.6] (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="245" width="4.9629%" height="15" fill="rgb(223,5,52)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="255.50">[libc...</text></g><g><title>[libc.so.6] (519,035,747 samples, 4.96%)</title><rect x="93.9796%" y="229" width="4.9629%" height="15" fill="rgb(206,52,46)" fg:x="9828641189" fg:w="519035747"/><text x="94.2296%" y="239.50">[libc...</text></g><g><title>[libc.so.6] (158,434,869 samples, 1.51%)</title><rect x="97.4276%" y="213" width="1.5149%" height="15" fill="rgb(253,136,11)" fg:x="10189242067" fg:w="158434869"/><text x="97.6776%" y="223.50"></text></g><g><title>[libc.so.6] (2,925,626 samples, 0.03%)</title><rect x="98.9425%" y="341" width="0.0280%" height="15" fill="rgb(208,106,33)" fg:x="10347676936" fg:w="2925626"/><text x="99.1925%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (6,090,370 samples, 0.06%)</title><rect x="98.9425%" y="373" width="0.0582%" height="15" fill="rgb(206,54,4)" fg:x="10347676936" fg:w="6090370"/><text x="99.1925%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (6,090,370 samples, 0.06%)</title><rect x="98.9425%" y="357" width="0.0582%" height="15" fill="rgb(213,3,15)" fg:x="10347676936" fg:w="6090370"/><text x="99.1925%" y="367.50"></text></g><g><title>cfree (3,164,744 samples, 0.03%)</title><rect x="98.9705%" y="341" width="0.0303%" height="15" fill="rgb(252,211,39)" fg:x="10350602562" fg:w="3164744"/><text x="99.2205%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (2,911,317 samples, 0.03%)</title><rect x="99.0007%" y="357" width="0.0278%" height="15" fill="rgb(223,6,36)" fg:x="10353767306" fg:w="2911317"/><text x="99.2507%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,911,317 samples, 0.03%)</title><rect x="99.0007%" y="341" width="0.0278%" height="15" fill="rgb(252,169,45)" fg:x="10353767306" fg:w="2911317"/><text x="99.2507%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2,911,317 samples, 0.03%)</title><rect x="99.0007%" y="325" width="0.0278%" height="15" fill="rgb(212,48,26)" fg:x="10353767306" fg:w="2911317"/><text x="99.2507%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (2,911,317 samples, 0.03%)</title><rect x="99.0007%" y="309" width="0.0278%" height="15" fill="rgb(251,102,48)" fg:x="10353767306" fg:w="2911317"/><text x="99.2507%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (9,403,182 samples, 0.09%)</title><rect x="99.0007%" y="373" width="0.0899%" height="15" fill="rgb(243,208,16)" fg:x="10353767306" fg:w="9403182"/><text x="99.2507%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (6,491,865 samples, 0.06%)</title><rect x="99.0286%" y="357" width="0.0621%" height="15" fill="rgb(219,96,24)" fg:x="10356678623" fg:w="6491865"/><text x="99.2786%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,491,865 samples, 0.06%)</title><rect x="99.0286%" y="341" width="0.0621%" height="15" fill="rgb(219,33,29)" fg:x="10356678623" fg:w="6491865"/><text x="99.2786%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6,491,865 samples, 0.06%)</title><rect x="99.0286%" y="325" width="0.0621%" height="15" fill="rgb(223,176,5)" fg:x="10356678623" fg:w="6491865"/><text x="99.2786%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (6,491,865 samples, 0.06%)</title><rect x="99.0286%" y="309" width="0.0621%" height="15" fill="rgb(228,140,14)" fg:x="10356678623" fg:w="6491865"/><text x="99.2786%" y="319.50"></text></g><g><title>[libc.so.6] (44,029,560 samples, 0.42%)</title><rect x="99.0906%" y="229" width="0.4210%" height="15" fill="rgb(217,179,31)" fg:x="10363170488" fg:w="44029560"/><text x="99.3406%" y="239.50"></text></g><g><title>[libc.so.6] (22,193,319 samples, 0.21%)</title><rect x="99.2994%" y="213" width="0.2122%" height="15" fill="rgb(230,9,30)" fg:x="10385006729" fg:w="22193319"/><text x="99.5494%" y="223.50"></text></g><g><title>[libc.so.6] (9,542,523 samples, 0.09%)</title><rect x="99.4204%" y="197" width="0.0912%" height="15" fill="rgb(230,136,20)" fg:x="10397657525" fg:w="9542523"/><text x="99.6704%" y="207.50"></text></g><g><title>profile::main (625,167,903 samples, 5.98%)</title><rect x="93.8952%" y="405" width="5.9777%" height="15" fill="rgb(215,210,22)" fg:x="9819813121" fg:w="625167903"/><text x="94.1452%" y="415.50">profile:..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (97,304,088 samples, 0.93%)</title><rect x="98.9425%" y="389" width="0.9304%" height="15" fill="rgb(218,43,5)" fg:x="10347676936" fg:w="97304088"/><text x="99.1925%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="373" width="0.7823%" height="15" fill="rgb(216,11,5)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="357" width="0.7823%" height="15" fill="rgb(209,82,29)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="341" width="0.7823%" height="15" fill="rgb(244,115,12)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="325" width="0.7823%" height="15" fill="rgb(222,82,18)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="309" width="0.7823%" height="15" fill="rgb(249,227,8)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="293" width="0.7823%" height="15" fill="rgb(253,141,45)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="277" width="0.7823%" height="15" fill="rgb(234,184,4)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="287.50"></text></g><g><title>__rustc::__rdl_dealloc (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="261" width="0.7823%" height="15" fill="rgb(218,194,23)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (81,810,536 samples, 0.78%)</title><rect x="99.0906%" y="245" width="0.7823%" height="15" fill="rgb(235,66,41)" fg:x="10363170488" fg:w="81810536"/><text x="99.3406%" y="255.50"></text></g><g><title>cfree (37,780,976 samples, 0.36%)</title><rect x="99.5117%" y="229" width="0.3613%" height="15" fill="rgb(245,217,1)" fg:x="10407200048" fg:w="37780976"/><text x="99.7617%" y="239.50"></text></g><g><title>realloc (3,497,242 samples, 0.03%)</title><rect x="99.8729%" y="405" width="0.0334%" height="15" fill="rgb(229,91,1)" fg:x="10444981024" fg:w="3497242"/><text x="100.1229%" y="415.50"></text></g><g><title>[libc.so.6] (3,497,242 samples, 0.03%)</title><rect x="99.8729%" y="389" width="0.0334%" height="15" fill="rgb(207,101,30)" fg:x="10444981024" fg:w="3497242"/><text x="100.1229%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (3,380,890 samples, 0.03%)</title><rect x="99.9384%" y="389" width="0.0323%" height="15" fill="rgb(223,82,49)" fg:x="10451825480" fg:w="3380890"/><text x="100.1884%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (3,380,890 samples, 0.03%)</title><rect x="99.9384%" y="373" width="0.0323%" height="15" fill="rgb(218,167,17)" fg:x="10451825480" fg:w="3380890"/><text x="100.1884%" y="383.50"></text></g><g><title>all (10,458,272,804 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(208,103,14)" fg:x="0" fg:w="10458272804"/><text x="0.2500%" y="447.50"></text></g><g><title>profile (10,458,272,804 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(238,20,8)" fg:x="0" fg:w="10458272804"/><text x="0.2500%" y="431.50">profile</text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (9,794,538 samples, 0.09%)</title><rect x="99.9063%" y="405" width="0.0937%" height="15" fill="rgb(218,80,54)" fg:x="10448478266" fg:w="9794538"/><text x="100.1563%" y="415.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_grow (3,066,434 samples, 0.03%)</title><rect x="99.9707%" y="389" width="0.0293%" height="15" fill="rgb(240,144,17)" fg:x="10455206370" fg:w="3066434"/><text x="100.2207%" y="399.50"></text></g><g><title>alloc::alloc::alloc (3,066,434 samples, 0.03%)</title><rect x="99.9707%" y="373" width="0.0293%" height="15" fill="rgb(245,27,50)" fg:x="10455206370" fg:w="3066434"/><text x="100.2207%" y="383.50"></text></g><g><title>__rustc::__rdl_alloc (3,066,434 samples, 0.03%)</title><rect x="99.9707%" y="357" width="0.0293%" height="15" fill="rgb(251,51,7)" fg:x="10455206370" fg:w="3066434"/><text x="100.2207%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,066,434 samples, 0.03%)</title><rect x="99.9707%" y="341" width="0.0293%" height="15" fill="rgb(245,217,29)" fg:x="10455206370" fg:w="3066434"/><text x="100.2207%" y="351.50"></text></g><g><title>malloc (3,066,434 samples, 0.03%)</title><rect x="99.9707%" y="325" width="0.0293%" height="15" fill="rgb(221,176,29)" fg:x="10455206370" fg:w="3066434"/><text x="100.2207%" y="335.50"></text></g></svg></svg>