<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="245.00"> </text><svg id="frames" x="10" width="1180" total_samples="2007494708"><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (3,016,586 samples, 0.15%)</title><rect x="0.0000%" y="181" width="0.1503%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3016586"/><text x="0.2500%" y="191.50"></text></g><g><title>[libc.so.6] (146,425,630 samples, 7.29%)</title><rect x="5.6347%" y="165" width="7.2939%" height="15" fill="rgb(217,0,24)" fg:x="113116991" fg:w="146425630"/><text x="5.8847%" y="175.50">[libc.so.6]</text></g><g><title>[libc.so.6] (122,060,389 samples, 6.08%)</title><rect x="6.8484%" y="149" width="6.0802%" height="15" fill="rgb(221,193,54)" fg:x="137482232" fg:w="122060389"/><text x="7.0984%" y="159.50">[libc.so..</text></g><g><title>&lt;liblevenshtein::transducer::intersection::Intersection&lt;N&gt; as core::clone::Clone&gt;::clone (322,273,276 samples, 16.05%)</title><rect x="0.1503%" y="181" width="16.0535%" height="15" fill="rgb(248,212,6)" fg:x="3016586" fg:w="322273276"/><text x="0.4003%" y="191.50">&lt;liblevenshtein::transduc..</text></g><g><title>malloc (65,747,241 samples, 3.28%)</title><rect x="12.9287%" y="165" width="3.2751%" height="15" fill="rgb(208,68,35)" fg:x="259542621" fg:w="65747241"/><text x="13.1787%" y="175.50">mal..</text></g><g><title>[libc.so.6] (9,684,075 samples, 0.48%)</title><rect x="17.1654%" y="165" width="0.4824%" height="15" fill="rgb(232,128,0)" fg:x="344594923" fg:w="9684075"/><text x="17.4154%" y="175.50"></text></g><g><title>[libc.so.6] (3,433,864 samples, 0.17%)</title><rect x="17.4768%" y="149" width="0.1711%" height="15" fill="rgb(207,160,47)" fg:x="350845134" fg:w="3433864"/><text x="17.7268%" y="159.50"></text></g><g><title>cfree (3,301,086 samples, 0.16%)</title><rect x="17.6478%" y="165" width="0.1644%" height="15" fill="rgb(228,23,34)" fg:x="354278998" fg:w="3301086"/><text x="17.8978%" y="175.50"></text></g><g><title>&lt;liblevenshtein::transducer::query::CandidateIterator&lt;N&gt; as core::iter::traits::iterator::Iterator&gt;::next (38,902,096 samples, 1.94%)</title><rect x="16.2038%" y="181" width="1.9378%" height="15" fill="rgb(218,30,26)" fg:x="325289862" fg:w="38902096"/><text x="16.4538%" y="191.50">&lt;..</text></g><g><title>malloc (6,611,874 samples, 0.33%)</title><rect x="17.8123%" y="165" width="0.3294%" height="15" fill="rgb(220,122,19)" fg:x="357580084" fg:w="6611874"/><text x="18.0623%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,366,834 samples, 0.07%)</title><rect x="18.1416%" y="101" width="0.0681%" height="15" fill="rgb(250,228,42)" fg:x="364191958" fg:w="1366834"/><text x="18.3916%" y="111.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,868,338 samples, 0.09%)</title><rect x="18.1416%" y="181" width="0.0931%" height="15" fill="rgb(240,193,28)" fg:x="364191958" fg:w="1868338"/><text x="18.3916%" y="191.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,868,338 samples, 0.09%)</title><rect x="18.1416%" y="165" width="0.0931%" height="15" fill="rgb(216,20,37)" fg:x="364191958" fg:w="1868338"/><text x="18.3916%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,868,338 samples, 0.09%)</title><rect x="18.1416%" y="149" width="0.0931%" height="15" fill="rgb(206,188,39)" fg:x="364191958" fg:w="1868338"/><text x="18.3916%" y="159.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,868,338 samples, 0.09%)</title><rect x="18.1416%" y="133" width="0.0931%" height="15" fill="rgb(217,207,13)" fg:x="364191958" fg:w="1868338"/><text x="18.3916%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,868,338 samples, 0.09%)</title><rect x="18.1416%" y="117" width="0.0931%" height="15" fill="rgb(231,73,38)" fg:x="364191958" fg:w="1868338"/><text x="18.3916%" y="127.50"></text></g><g><title>_dl_catch_exception (501,504 samples, 0.02%)</title><rect x="18.2097%" y="101" width="0.0250%" height="15" fill="rgb(225,20,46)" fg:x="365558792" fg:w="501504"/><text x="18.4597%" y="111.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.02%)</title><rect x="18.2097%" y="85" width="0.0250%" height="15" fill="rgb(210,31,41)" fg:x="365558792" fg:w="501504"/><text x="18.4597%" y="95.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.02%)</title><rect x="18.2097%" y="69" width="0.0250%" height="15" fill="rgb(221,200,47)" fg:x="365558792" fg:w="501504"/><text x="18.4597%" y="79.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.02%)</title><rect x="18.2097%" y="53" width="0.0250%" height="15" fill="rgb(226,26,5)" fg:x="365558792" fg:w="501504"/><text x="18.4597%" y="63.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.02%)</title><rect x="18.2097%" y="37" width="0.0250%" height="15" fill="rgb(249,33,26)" fg:x="365558792" fg:w="501504"/><text x="18.4597%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (107,097,154 samples, 5.33%)</title><rect x="18.7062%" y="165" width="5.3349%" height="15" fill="rgb(235,183,28)" fg:x="375526673" fg:w="107097154"/><text x="18.9562%" y="175.50">alloc::..</text></g><g><title>realloc (107,097,154 samples, 5.33%)</title><rect x="18.7062%" y="149" width="5.3349%" height="15" fill="rgb(221,5,38)" fg:x="375526673" fg:w="107097154"/><text x="18.9562%" y="159.50">realloc</text></g><g><title>[libc.so.6] (107,097,154 samples, 5.33%)</title><rect x="18.7062%" y="133" width="5.3349%" height="15" fill="rgb(247,18,42)" fg:x="375526673" fg:w="107097154"/><text x="18.9562%" y="143.50">[libc.s..</text></g><g><title>[libc.so.6] (107,097,154 samples, 5.33%)</title><rect x="18.7062%" y="117" width="5.3349%" height="15" fill="rgb(241,131,45)" fg:x="375526673" fg:w="107097154"/><text x="18.9562%" y="127.50">[libc.s..</text></g><g><title>[libc.so.6] (97,608,340 samples, 4.86%)</title><rect x="19.1789%" y="101" width="4.8622%" height="15" fill="rgb(249,31,29)" fg:x="385015487" fg:w="97608340"/><text x="19.4289%" y="111.50">[libc...</text></g><g><title>[libc.so.6] (28,287,191 samples, 1.41%)</title><rect x="22.6320%" y="85" width="1.4091%" height="15" fill="rgb(225,111,53)" fg:x="454336636" fg:w="28287191"/><text x="22.8820%" y="95.50"></text></g><g><title>cfree (6,120,687 samples, 0.30%)</title><rect x="24.3437%" y="149" width="0.3049%" height="15" fill="rgb(238,160,17)" fg:x="488699438" fg:w="6120687"/><text x="24.5937%" y="159.50"></text></g><g><title>[libc.so.6] (3,114,732 samples, 0.16%)</title><rect x="24.7954%" y="133" width="0.1552%" height="15" fill="rgb(214,148,48)" fg:x="497766652" fg:w="3114732"/><text x="25.0454%" y="143.50"></text></g><g><title>cfree (12,711,986 samples, 0.63%)</title><rect x="24.9506%" y="133" width="0.6332%" height="15" fill="rgb(232,36,49)" fg:x="500881384" fg:w="12711986"/><text x="25.2006%" y="143.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::advance (34,261,503 samples, 1.71%)</title><rect x="24.0411%" y="165" width="1.7067%" height="15" fill="rgb(209,103,24)" fg:x="482623827" fg:w="34261503"/><text x="24.2911%" y="175.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (22,065,205 samples, 1.10%)</title><rect x="24.6486%" y="149" width="1.0991%" height="15" fill="rgb(229,88,8)" fg:x="494820125" fg:w="22065205"/><text x="24.8986%" y="159.50"></text></g><g><title>malloc (3,291,960 samples, 0.16%)</title><rect x="25.5838%" y="133" width="0.1640%" height="15" fill="rgb(213,181,19)" fg:x="513593370" fg:w="3291960"/><text x="25.8338%" y="143.50"></text></g><g><title>[libc.so.6] (157,160,505 samples, 7.83%)</title><rect x="18.2347%" y="181" width="7.8287%" height="15" fill="rgb(254,191,54)" fg:x="366060296" fg:w="157160505"/><text x="18.4847%" y="191.50">[libc.so.6]</text></g><g><title>liblevenshtein::transducer::transition::transition_standard (6,335,471 samples, 0.32%)</title><rect x="25.7478%" y="165" width="0.3156%" height="15" fill="rgb(241,83,37)" fg:x="516885330" fg:w="6335471"/><text x="25.9978%" y="175.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (16,105,320 samples, 0.80%)</title><rect x="26.0634%" y="165" width="0.8023%" height="15" fill="rgb(233,36,39)" fg:x="523220801" fg:w="16105320"/><text x="26.3134%" y="175.50"></text></g><g><title>[libc.so.6] (6,229,203 samples, 0.31%)</title><rect x="26.8656%" y="165" width="0.3103%" height="15" fill="rgb(226,3,54)" fg:x="539326121" fg:w="6229203"/><text x="27.1156%" y="175.50"></text></g><g><title>[unknown] (2,994,178 samples, 0.15%)</title><rect x="27.1759%" y="165" width="0.1491%" height="15" fill="rgb(245,192,40)" fg:x="545555324" fg:w="2994178"/><text x="27.4259%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,994,178 samples, 0.15%)</title><rect x="27.1759%" y="149" width="0.1491%" height="15" fill="rgb(238,167,29)" fg:x="545555324" fg:w="2994178"/><text x="27.4259%" y="159.50"></text></g><g><title>__rustc::__rust_realloc (6,345,759 samples, 0.32%)</title><rect x="27.3251%" y="165" width="0.3161%" height="15" fill="rgb(232,182,51)" fg:x="548549502" fg:w="6345759"/><text x="27.5751%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (3,188,027 samples, 0.16%)</title><rect x="27.9685%" y="149" width="0.1588%" height="15" fill="rgb(231,60,39)" fg:x="561467075" fg:w="3188027"/><text x="28.2185%" y="159.50"></text></g><g><title>cfree (3,188,027 samples, 0.16%)</title><rect x="27.9685%" y="133" width="0.1588%" height="15" fill="rgb(208,69,12)" fg:x="561467075" fg:w="3188027"/><text x="28.2185%" y="143.50"></text></g><g><title>malloc (3,302,786 samples, 0.16%)</title><rect x="28.1274%" y="149" width="0.1645%" height="15" fill="rgb(235,93,37)" fg:x="564655102" fg:w="3302786"/><text x="28.3774%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (57,341,649 samples, 2.86%)</title><rect x="27.6412%" y="165" width="2.8564%" height="15" fill="rgb(213,116,39)" fg:x="554895261" fg:w="57341649"/><text x="27.8912%" y="175.50">al..</text></g><g><title>realloc (44,279,022 samples, 2.21%)</title><rect x="28.2919%" y="149" width="2.2057%" height="15" fill="rgb(222,207,29)" fg:x="567957888" fg:w="44279022"/><text x="28.5419%" y="159.50">r..</text></g><g><title>[libc.so.6] (44,279,022 samples, 2.21%)</title><rect x="28.2919%" y="133" width="2.2057%" height="15" fill="rgb(206,96,30)" fg:x="567957888" fg:w="44279022"/><text x="28.5419%" y="143.50">[..</text></g><g><title>[libc.so.6] (37,856,938 samples, 1.89%)</title><rect x="28.6118%" y="117" width="1.8858%" height="15" fill="rgb(218,138,4)" fg:x="574379972" fg:w="37856938"/><text x="28.8618%" y="127.50">[..</text></g><g><title>[libc.so.6] (25,135,652 samples, 1.25%)</title><rect x="29.2455%" y="101" width="1.2521%" height="15" fill="rgb(250,191,14)" fg:x="587101258" fg:w="25135652"/><text x="29.4955%" y="111.50"></text></g><g><title>[libc.so.6] (6,542,078 samples, 0.33%)</title><rect x="30.1717%" y="85" width="0.3259%" height="15" fill="rgb(239,60,40)" fg:x="605694832" fg:w="6542078"/><text x="30.4217%" y="95.50"></text></g><g><title>[libc.so.6] (12,847,360 samples, 0.64%)</title><rect x="36.2801%" y="149" width="0.6400%" height="15" fill="rgb(206,27,48)" fg:x="728321828" fg:w="12847360"/><text x="36.5301%" y="159.50"></text></g><g><title>[libc.so.6] (12,847,360 samples, 0.64%)</title><rect x="36.2801%" y="133" width="0.6400%" height="15" fill="rgb(225,35,8)" fg:x="728321828" fg:w="12847360"/><text x="36.5301%" y="143.50"></text></g><g><title>cfree (6,047,158 samples, 0.30%)</title><rect x="36.9201%" y="149" width="0.3012%" height="15" fill="rgb(250,213,24)" fg:x="741169188" fg:w="6047158"/><text x="37.1701%" y="159.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (138,275,213 samples, 6.89%)</title><rect x="30.4976%" y="165" width="6.8879%" height="15" fill="rgb(247,123,22)" fg:x="612236910" fg:w="138275213"/><text x="30.7476%" y="175.50">core::ite..</text></g><g><title>malloc (3,295,777 samples, 0.16%)</title><rect x="37.2213%" y="149" width="0.1642%" height="15" fill="rgb(231,138,38)" fg:x="747216346" fg:w="3295777"/><text x="37.4713%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,309,762 samples, 0.16%)</title><rect x="37.3855%" y="165" width="0.1649%" height="15" fill="rgb(231,145,46)" fg:x="750512123" fg:w="3309762"/><text x="37.6355%" y="175.50"></text></g><g><title>[libc.so.6] (3,309,762 samples, 0.16%)</title><rect x="37.3855%" y="149" width="0.1649%" height="15" fill="rgb(251,118,11)" fg:x="750512123" fg:w="3309762"/><text x="37.6355%" y="159.50"></text></g><g><title>[libc.so.6] (37,441,705 samples, 1.87%)</title><rect x="38.3193%" y="149" width="1.8651%" height="15" fill="rgb(217,147,25)" fg:x="769257122" fg:w="37441705"/><text x="38.5693%" y="159.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (80,871,024 samples, 4.03%)</title><rect x="37.5504%" y="165" width="4.0285%" height="15" fill="rgb(247,81,37)" fg:x="753821885" fg:w="80871024"/><text x="37.8004%" y="175.50">core..</text></g><g><title>cfree (27,994,082 samples, 1.39%)</title><rect x="40.1844%" y="149" width="1.3945%" height="15" fill="rgb(209,12,38)" fg:x="806698827" fg:w="27994082"/><text x="40.4344%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (3,025,397 samples, 0.15%)</title><rect x="41.5788%" y="165" width="0.1507%" height="15" fill="rgb(227,1,9)" fg:x="834692909" fg:w="3025397"/><text x="41.8288%" y="175.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (54,137,691 samples, 2.70%)</title><rect x="41.7295%" y="165" width="2.6968%" height="15" fill="rgb(248,47,43)" fg:x="837718306" fg:w="54137691"/><text x="41.9795%" y="175.50">li..</text></g><g><title>malloc (13,022,290 samples, 0.65%)</title><rect x="43.7776%" y="149" width="0.6487%" height="15" fill="rgb(221,10,30)" fg:x="878833707" fg:w="13022290"/><text x="44.0276%" y="159.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (3,282,888 samples, 0.16%)</title><rect x="44.4263%" y="149" width="0.1635%" height="15" fill="rgb(210,229,1)" fg:x="891855997" fg:w="3282888"/><text x="44.6763%" y="159.50"></text></g><g><title>[libc.so.6] (3,143,935 samples, 0.16%)</title><rect x="44.5899%" y="149" width="0.1566%" height="15" fill="rgb(222,148,37)" fg:x="895138885" fg:w="3143935"/><text x="44.8399%" y="159.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (9,670,574 samples, 0.48%)</title><rect x="44.4263%" y="165" width="0.4817%" height="15" fill="rgb(234,67,33)" fg:x="891855997" fg:w="9670574"/><text x="44.6763%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (3,243,751 samples, 0.16%)</title><rect x="44.7465%" y="149" width="0.1616%" height="15" fill="rgb(247,98,35)" fg:x="898282820" fg:w="3243751"/><text x="44.9965%" y="159.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_standard (6,501,272 samples, 0.32%)</title><rect x="44.9080%" y="165" width="0.3239%" height="15" fill="rgb(247,138,52)" fg:x="901526571" fg:w="6501272"/><text x="45.1580%" y="175.50"></text></g><g><title>malloc (3,296,998 samples, 0.16%)</title><rect x="45.2319%" y="165" width="0.1642%" height="15" fill="rgb(213,79,30)" fg:x="908027843" fg:w="3296998"/><text x="45.4819%" y="175.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (49,952,060 samples, 2.49%)</title><rect x="45.3961%" y="165" width="2.4883%" height="15" fill="rgb(246,177,23)" fg:x="911324841" fg:w="49952060"/><text x="45.6461%" y="175.50">pa..</text></g><g><title>malloc (3,160,325 samples, 0.16%)</title><rect x="47.7270%" y="149" width="0.1574%" height="15" fill="rgb(230,62,27)" fg:x="958116576" fg:w="3160325"/><text x="47.9770%" y="159.50"></text></g><g><title>[unknown] (441,326,934 samples, 21.98%)</title><rect x="26.0634%" y="181" width="21.9840%" height="15" fill="rgb(216,154,8)" fg:x="523220801" fg:w="441326934"/><text x="26.3134%" y="191.50">[unknown]</text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_val (3,270,834 samples, 0.16%)</title><rect x="47.8844%" y="165" width="0.1629%" height="15" fill="rgb(244,35,45)" fg:x="961276901" fg:w="3270834"/><text x="48.1344%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9,722,034 samples, 0.48%)</title><rect x="48.0473%" y="181" width="0.4843%" height="15" fill="rgb(251,115,12)" fg:x="964547735" fg:w="9722034"/><text x="48.2973%" y="191.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (3,177,155 samples, 0.16%)</title><rect x="48.3734%" y="165" width="0.1583%" height="15" fill="rgb(240,54,50)" fg:x="971092614" fg:w="3177155"/><text x="48.6234%" y="175.50"></text></g><g><title>cfree (3,177,155 samples, 0.16%)</title><rect x="48.3734%" y="149" width="0.1583%" height="15" fill="rgb(233,84,52)" fg:x="971092614" fg:w="3177155"/><text x="48.6234%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,185,609 samples, 0.06%)</title><rect x="48.5316%" y="181" width="0.0591%" height="15" fill="rgb(207,117,47)" fg:x="974269769" fg:w="1185609"/><text x="48.7816%" y="191.50"></text></g><g><title>realloc (1,185,609 samples, 0.06%)</title><rect x="48.5316%" y="165" width="0.0591%" height="15" fill="rgb(249,43,39)" fg:x="974269769" fg:w="1185609"/><text x="48.7816%" y="175.50"></text></g><g><title>[libc.so.6] (9,244,824 samples, 0.46%)</title><rect x="49.1698%" y="165" width="0.4605%" height="15" fill="rgb(209,38,44)" fg:x="987081255" fg:w="9244824"/><text x="49.4198%" y="175.50"></text></g><g><title>[libc.so.6] (9,244,824 samples, 0.46%)</title><rect x="49.1698%" y="149" width="0.4605%" height="15" fill="rgb(236,212,23)" fg:x="987081255" fg:w="9244824"/><text x="49.4198%" y="159.50"></text></g><g><title>malloc (6,382,121 samples, 0.32%)</title><rect x="49.6303%" y="165" width="0.3179%" height="15" fill="rgb(242,79,21)" fg:x="996326079" fg:w="6382121"/><text x="49.8803%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (62,887,227 samples, 3.13%)</title><rect x="48.5907%" y="181" width="3.1326%" height="15" fill="rgb(211,96,35)" fg:x="975455378" fg:w="62887227"/><text x="48.8407%" y="191.50">all..</text></g><g><title>realloc (35,634,405 samples, 1.78%)</title><rect x="49.9482%" y="165" width="1.7751%" height="15" fill="rgb(253,215,40)" fg:x="1002708200" fg:w="35634405"/><text x="50.1982%" y="175.50">r..</text></g><g><title>[libc.so.6] (22,768,980 samples, 1.13%)</title><rect x="50.5891%" y="149" width="1.1342%" height="15" fill="rgb(211,81,21)" fg:x="1015573625" fg:w="22768980"/><text x="50.8391%" y="159.50"></text></g><g><title>[libc.so.6] (13,058,126 samples, 0.65%)</title><rect x="51.0728%" y="133" width="0.6505%" height="15" fill="rgb(208,190,38)" fg:x="1025284479" fg:w="13058126"/><text x="51.3228%" y="143.50"></text></g><g><title>[libc.so.6] (3,327,521 samples, 0.17%)</title><rect x="51.5575%" y="117" width="0.1658%" height="15" fill="rgb(235,213,38)" fg:x="1035015084" fg:w="3327521"/><text x="51.8075%" y="127.50"></text></g><g><title>[libc.so.6] (3,327,521 samples, 0.17%)</title><rect x="51.5575%" y="101" width="0.1658%" height="15" fill="rgb(237,122,38)" fg:x="1035015084" fg:w="3327521"/><text x="51.8075%" y="111.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (204,272,353 samples, 10.18%)</title><rect x="51.7233%" y="181" width="10.1755%" height="15" fill="rgb(244,218,35)" fg:x="1038342605" fg:w="204272353"/><text x="51.9733%" y="191.50">core::iter::ada..</text></g><g><title>[libc.so.6] (9,805,694 samples, 0.49%)</title><rect x="61.4103%" y="165" width="0.4885%" height="15" fill="rgb(240,68,47)" fg:x="1232809264" fg:w="9805694"/><text x="61.6603%" y="175.50"></text></g><g><title>[libc.so.6] (9,805,694 samples, 0.49%)</title><rect x="61.4103%" y="149" width="0.4885%" height="15" fill="rgb(210,16,53)" fg:x="1232809264" fg:w="9805694"/><text x="61.6603%" y="159.50"></text></g><g><title>[libc.so.6] (40,497,682 samples, 2.02%)</title><rect x="62.7180%" y="165" width="2.0173%" height="15" fill="rgb(235,124,12)" fg:x="1259061360" fg:w="40497682"/><text x="62.9680%" y="175.50">[..</text></g><g><title>cfree (25,994,474 samples, 1.29%)</title><rect x="64.7354%" y="165" width="1.2949%" height="15" fill="rgb(224,169,11)" fg:x="1299559042" fg:w="25994474"/><text x="64.9854%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (104,808,045 samples, 5.22%)</title><rect x="61.8988%" y="181" width="5.2208%" height="15" fill="rgb(250,166,2)" fg:x="1242614958" fg:w="104808045"/><text x="62.1488%" y="191.50">core::..</text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (21,869,487 samples, 1.09%)</title><rect x="66.0302%" y="165" width="1.0894%" height="15" fill="rgb(242,216,29)" fg:x="1325553516" fg:w="21869487"/><text x="66.2802%" y="175.50"></text></g><g><title>malloc (2,949,648 samples, 0.15%)</title><rect x="66.9727%" y="149" width="0.1469%" height="15" fill="rgb(230,116,27)" fg:x="1344473355" fg:w="2949648"/><text x="67.2227%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (22,450,752 samples, 1.12%)</title><rect x="67.1196%" y="181" width="1.1183%" height="15" fill="rgb(228,99,48)" fg:x="1347423003" fg:w="22450752"/><text x="67.3696%" y="191.50"></text></g><g><title>cfree (19,227,082 samples, 0.96%)</title><rect x="67.2802%" y="165" width="0.9578%" height="15" fill="rgb(253,11,6)" fg:x="1350646673" fg:w="19227082"/><text x="67.5302%" y="175.50"></text></g><g><title>[libc.so.6] (34,724,337 samples, 1.73%)</title><rect x="71.2631%" y="149" width="1.7297%" height="15" fill="rgb(247,143,39)" fg:x="1430603429" fg:w="34724337"/><text x="71.5131%" y="159.50"></text></g><g><title>[libc.so.6] (31,491,279 samples, 1.57%)</title><rect x="71.4242%" y="133" width="1.5687%" height="15" fill="rgb(236,97,10)" fg:x="1433836487" fg:w="31491279"/><text x="71.6742%" y="143.50"></text></g><g><title>[libc.so.6] (5,958,620 samples, 0.30%)</title><rect x="72.6960%" y="117" width="0.2968%" height="15" fill="rgb(233,208,19)" fg:x="1459369146" fg:w="5958620"/><text x="72.9460%" y="127.50"></text></g><g><title>cfree (19,069,572 samples, 0.95%)</title><rect x="72.9929%" y="149" width="0.9499%" height="15" fill="rgb(216,164,2)" fg:x="1465327766" fg:w="19069572"/><text x="73.2429%" y="159.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::advance (133,759,389 samples, 6.66%)</title><rect x="68.2380%" y="181" width="6.6630%" height="15" fill="rgb(220,129,5)" fg:x="1369873755" fg:w="133759389"/><text x="68.4880%" y="191.50">liblevens..</text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (117,294,979 samples, 5.84%)</title><rect x="69.0581%" y="165" width="5.8429%" height="15" fill="rgb(242,17,10)" fg:x="1386338165" fg:w="117294979"/><text x="69.3081%" y="175.50">libleve..</text></g><g><title>malloc (19,235,806 samples, 0.96%)</title><rect x="73.9428%" y="149" width="0.9582%" height="15" fill="rgb(242,107,0)" fg:x="1484397338" fg:w="19235806"/><text x="74.1928%" y="159.50"></text></g><g><title>[libc.so.6] (18,595,536 samples, 0.93%)</title><rect x="87.8545%" y="149" width="0.9263%" height="15" fill="rgb(251,28,31)" fg:x="1763674055" fg:w="18595536"/><text x="88.1045%" y="159.50"></text></g><g><title>[libc.so.6] (27,503,901 samples, 1.37%)</title><rect x="87.5510%" y="165" width="1.3701%" height="15" fill="rgb(233,223,10)" fg:x="1757582154" fg:w="27503901"/><text x="87.8010%" y="175.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (2,816,464 samples, 0.14%)</title><rect x="88.7808%" y="149" width="0.1403%" height="15" fill="rgb(215,21,27)" fg:x="1782269591" fg:w="2816464"/><text x="89.0308%" y="159.50"></text></g><g><title>cfree (6,600,195 samples, 0.33%)</title><rect x="88.9211%" y="165" width="0.3288%" height="15" fill="rgb(232,23,21)" fg:x="1785086055" fg:w="6600195"/><text x="89.1711%" y="175.50"></text></g><g><title>malloc (28,366,241 samples, 1.41%)</title><rect x="89.2499%" y="165" width="1.4130%" height="15" fill="rgb(244,5,23)" fg:x="1791686250" fg:w="28366241"/><text x="89.4999%" y="175.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (319,668,942 samples, 15.92%)</title><rect x="74.9010%" y="181" width="15.9238%" height="15" fill="rgb(226,81,46)" fg:x="1503633144" fg:w="319668942"/><text x="75.1510%" y="191.50">liblevenshtein::transduc..</text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (3,249,595 samples, 0.16%)</title><rect x="90.6629%" y="165" width="0.1619%" height="15" fill="rgb(247,70,30)" fg:x="1820052491" fg:w="3249595"/><text x="90.9129%" y="175.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (6,372,015 samples, 0.32%)</title><rect x="90.8248%" y="181" width="0.3174%" height="15" fill="rgb(212,68,19)" fg:x="1823302086" fg:w="6372015"/><text x="91.0748%" y="191.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_standard (3,184,409 samples, 0.16%)</title><rect x="91.1422%" y="181" width="0.1586%" height="15" fill="rgb(240,187,13)" fg:x="1829674101" fg:w="3184409"/><text x="91.3922%" y="191.50"></text></g><g><title>malloc (3,188,286 samples, 0.16%)</title><rect x="91.3008%" y="181" width="0.1588%" height="15" fill="rgb(223,113,26)" fg:x="1832858510" fg:w="3188286"/><text x="91.5508%" y="191.50"></text></g><g><title>[libc.so.6] (15,768,166 samples, 0.79%)</title><rect x="96.3668%" y="165" width="0.7855%" height="15" fill="rgb(206,192,2)" fg:x="1934559054" fg:w="15768166"/><text x="96.6168%" y="175.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (120,775,056 samples, 6.02%)</title><rect x="91.4596%" y="181" width="6.0162%" height="15" fill="rgb(241,108,4)" fg:x="1836046796" fg:w="120775056"/><text x="91.7096%" y="191.50">pathmap:..</text></g><g><title>malloc (6,494,632 samples, 0.32%)</title><rect x="97.1523%" y="165" width="0.3235%" height="15" fill="rgb(247,173,49)" fg:x="1950327220" fg:w="6494632"/><text x="97.4023%" y="175.50"></text></g><g><title>pathmap::trie_node::node_along_path_mut (1,726,691 samples, 0.09%)</title><rect x="97.4758%" y="181" width="0.0860%" height="15" fill="rgb(224,114,35)" fg:x="1956821852" fg:w="1726691"/><text x="97.7258%" y="191.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_val (3,168,222 samples, 0.16%)</title><rect x="97.5618%" y="181" width="0.1578%" height="15" fill="rgb(245,159,27)" fg:x="1958548543" fg:w="3168222"/><text x="97.8118%" y="191.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (9,298,075 samples, 0.46%)</title><rect x="97.7196%" y="181" width="0.4632%" height="15" fill="rgb(245,172,44)" fg:x="1961716765" fg:w="9298075"/><text x="97.9696%" y="191.50"></text></g><g><title>[libc.so.6] (3,390,215 samples, 0.17%)</title><rect x="98.1828%" y="165" width="0.1689%" height="15" fill="rgb(236,23,11)" fg:x="1971014840" fg:w="3390215"/><text x="98.4328%" y="175.50"></text></g><g><title>malloc (3,251,924 samples, 0.16%)</title><rect x="98.3517%" y="149" width="0.1620%" height="15" fill="rgb(205,117,38)" fg:x="1974405055" fg:w="3251924"/><text x="98.6017%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (6,463,062 samples, 0.32%)</title><rect x="98.3517%" y="165" width="0.3219%" height="15" fill="rgb(237,72,25)" fg:x="1974405055" fg:w="6463062"/><text x="98.6017%" y="175.50"></text></g><g><title>realloc (3,211,138 samples, 0.16%)</title><rect x="98.5137%" y="149" width="0.1600%" height="15" fill="rgb(244,70,9)" fg:x="1977656979" fg:w="3211138"/><text x="98.7637%" y="159.50"></text></g><g><title>profile_workload::main (11,332,507 samples, 0.56%)</title><rect x="98.1828%" y="181" width="0.5645%" height="15" fill="rgb(217,125,39)" fg:x="1971014840" fg:w="11332507"/><text x="98.4328%" y="191.50"></text></g><g><title>cfree (1,479,230 samples, 0.07%)</title><rect x="98.6736%" y="165" width="0.0737%" height="15" fill="rgb(235,36,10)" fg:x="1980868117" fg:w="1479230"/><text x="98.9236%" y="175.50"></text></g><g><title>all (2,007,494,708 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="2007494708"/><text x="0.2500%" y="223.50"></text></g><g><title>profile_workloa (2,007,494,708 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="2007494708"/><text x="0.2500%" y="207.50">profile_workloa</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (25,147,361 samples, 1.25%)</title><rect x="98.7473%" y="181" width="1.2527%" height="15" fill="rgb(238,131,9)" fg:x="1982347347" fg:w="25147361"/><text x="98.9973%" y="191.50"></text></g><g><title>profile_workload::main (25,147,361 samples, 1.25%)</title><rect x="98.7473%" y="165" width="1.2527%" height="15" fill="rgb(211,50,8)" fg:x="1982347347" fg:w="25147361"/><text x="98.9973%" y="175.50"></text></g><g><title>realloc (25,147,361 samples, 1.25%)</title><rect x="98.7473%" y="149" width="1.2527%" height="15" fill="rgb(245,182,24)" fg:x="1982347347" fg:w="25147361"/><text x="98.9973%" y="159.50"></text></g><g><title>[libc.so.6] (25,147,361 samples, 1.25%)</title><rect x="98.7473%" y="133" width="1.2527%" height="15" fill="rgb(242,14,37)" fg:x="1982347347" fg:w="25147361"/><text x="98.9973%" y="143.50"></text></g><g><title>[libc.so.6] (25,147,361 samples, 1.25%)</title><rect x="98.7473%" y="117" width="1.2527%" height="15" fill="rgb(246,228,12)" fg:x="1982347347" fg:w="25147361"/><text x="98.9973%" y="127.50"></text></g><g><title>[libc.so.6] (22,164,350 samples, 1.10%)</title><rect x="98.8959%" y="101" width="1.1041%" height="15" fill="rgb(213,55,15)" fg:x="1985330358" fg:w="22164350"/><text x="99.1459%" y="111.50"></text></g><g><title>[libc.so.6] (3,202,027 samples, 0.16%)</title><rect x="99.8405%" y="85" width="0.1595%" height="15" fill="rgb(209,9,3)" fg:x="2004292681" fg:w="3202027"/><text x="100.0905%" y="95.50"></text></g></svg></svg>