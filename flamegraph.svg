<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="12064337717"><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (35,964,063 samples, 0.30%)</title><rect x="0.0000%" y="325" width="0.2981%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="35964063"/><text x="0.2500%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,708,617 samples, 0.06%)</title><rect x="0.6521%" y="309" width="0.0556%" height="15" fill="rgb(217,0,24)" fg:x="78670817" fg:w="6708617"/><text x="0.9021%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6,708,617 samples, 0.06%)</title><rect x="0.6521%" y="293" width="0.0556%" height="15" fill="rgb(221,193,54)" fg:x="78670817" fg:w="6708617"/><text x="0.9021%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_add (6,708,617 samples, 0.06%)</title><rect x="0.6521%" y="277" width="0.0556%" height="15" fill="rgb(248,212,6)" fg:x="78670817" fg:w="6708617"/><text x="0.9021%" y="287.50"></text></g><g><title>[libc.so.6] (3,030,335 samples, 0.03%)</title><rect x="0.7359%" y="117" width="0.0251%" height="15" fill="rgb(208,68,35)" fg:x="88780931" fg:w="3030335"/><text x="0.9859%" y="127.50"></text></g><g><title>[libc.so.6] (3,030,335 samples, 0.03%)</title><rect x="0.7359%" y="101" width="0.0251%" height="15" fill="rgb(232,128,0)" fg:x="88780931" fg:w="3030335"/><text x="0.9859%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="261" width="0.1515%" height="15" fill="rgb(207,160,47)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="245" width="0.1515%" height="15" fill="rgb(228,23,34)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="229" width="0.1515%" height="15" fill="rgb(218,30,26)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="213" width="0.1515%" height="15" fill="rgb(220,122,19)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="197" width="0.1515%" height="15" fill="rgb(250,228,42)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="181" width="0.1515%" height="15" fill="rgb(240,193,28)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="191.50"></text></g><g><title>alloc::alloc::alloc (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="165" width="0.1515%" height="15" fill="rgb(216,20,37)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="175.50"></text></g><g><title>__rustc::__rdl_alloc (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="149" width="0.1515%" height="15" fill="rgb(206,188,39)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18,282,652 samples, 0.15%)</title><rect x="0.7077%" y="133" width="0.1515%" height="15" fill="rgb(217,207,13)" fg:x="85379434" fg:w="18282652"/><text x="0.9577%" y="143.50"></text></g><g><title>malloc (11,850,820 samples, 0.10%)</title><rect x="0.7610%" y="117" width="0.0982%" height="15" fill="rgb(231,73,38)" fg:x="91811266" fg:w="11850820"/><text x="1.0110%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34,386,251 samples, 0.29%)</title><rect x="0.7077%" y="309" width="0.2850%" height="15" fill="rgb(225,20,46)" fg:x="85379434" fg:w="34386251"/><text x="0.9577%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34,386,251 samples, 0.29%)</title><rect x="0.7077%" y="293" width="0.2850%" height="15" fill="rgb(210,31,41)" fg:x="85379434" fg:w="34386251"/><text x="0.9577%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (34,386,251 samples, 0.29%)</title><rect x="0.7077%" y="277" width="0.2850%" height="15" fill="rgb(221,200,47)" fg:x="85379434" fg:w="34386251"/><text x="0.9577%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16,103,599 samples, 0.13%)</title><rect x="0.8592%" y="261" width="0.1335%" height="15" fill="rgb(226,26,5)" fg:x="103662086" fg:w="16103599"/><text x="1.1092%" y="271.50"></text></g><g><title>core::ptr::copy_nonoverlapping (16,103,599 samples, 0.13%)</title><rect x="0.8592%" y="245" width="0.1335%" height="15" fill="rgb(249,33,26)" fg:x="103662086" fg:w="16103599"/><text x="1.1092%" y="255.50"></text></g><g><title>[libc.so.6] (16,103,599 samples, 0.13%)</title><rect x="0.8592%" y="229" width="0.1335%" height="15" fill="rgb(235,183,28)" fg:x="103662086" fg:w="16103599"/><text x="1.1092%" y="239.50"></text></g><g><title>fast_slice_utils::starts_with (6,115,725 samples, 0.05%)</title><rect x="1.0158%" y="245" width="0.0507%" height="15" fill="rgb(221,5,38)" fg:x="122546906" fg:w="6115725"/><text x="1.2658%" y="255.50"></text></g><g><title>fast_slice_utils::find_prefix_overlap (2,742,954 samples, 0.02%)</title><rect x="1.0437%" y="229" width="0.0227%" height="15" fill="rgb(247,18,42)" fg:x="125919677" fg:w="2742954"/><text x="1.2937%" y="239.50"></text></g><g><title>fast_slice_utils::count_shared_avx2 (2,742,954 samples, 0.02%)</title><rect x="1.0437%" y="213" width="0.0227%" height="15" fill="rgb(241,131,45)" fg:x="125919677" fg:w="2742954"/><text x="1.2937%" y="223.50"></text></g><g><title>core::core_arch::x86::bmi1::_tzcnt_u32 (2,742,954 samples, 0.02%)</title><rect x="1.0437%" y="197" width="0.0227%" height="15" fill="rgb(249,31,29)" fg:x="125919677" fg:w="2742954"/><text x="1.2937%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (2,742,954 samples, 0.02%)</title><rect x="1.0437%" y="181" width="0.0227%" height="15" fill="rgb(225,111,53)" fg:x="125919677" fg:w="2742954"/><text x="1.2937%" y="191.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_partial_key (9,120,472 samples, 0.08%)</title><rect x="1.0158%" y="277" width="0.0756%" height="15" fill="rgb(238,160,17)" fg:x="122546906" fg:w="9120472"/><text x="1.2658%" y="287.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_contains_partial_key (9,120,472 samples, 0.08%)</title><rect x="1.0158%" y="261" width="0.0756%" height="15" fill="rgb(214,148,48)" fg:x="122546906" fg:w="9120472"/><text x="1.2658%" y="271.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::get_both_keys (3,004,747 samples, 0.02%)</title><rect x="1.0665%" y="245" width="0.0249%" height="15" fill="rgb(232,36,49)" fg:x="128662631" fg:w="3004747"/><text x="1.3165%" y="255.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (14,996,822 samples, 0.12%)</title><rect x="0.9927%" y="309" width="0.1243%" height="15" fill="rgb(209,103,24)" fg:x="119765685" fg:w="14996822"/><text x="1.2427%" y="319.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (14,996,822 samples, 0.12%)</title><rect x="0.9927%" y="293" width="0.1243%" height="15" fill="rgb(229,88,8)" fg:x="119765685" fg:w="14996822"/><text x="1.2427%" y="303.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (3,095,129 samples, 0.03%)</title><rect x="1.0914%" y="277" width="0.0257%" height="15" fill="rgb(213,181,19)" fg:x="131667378" fg:w="3095129"/><text x="1.3414%" y="287.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (3,095,129 samples, 0.03%)</title><rect x="1.0914%" y="261" width="0.0257%" height="15" fill="rgb(254,191,54)" fg:x="131667378" fg:w="3095129"/><text x="1.3414%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3,095,129 samples, 0.03%)</title><rect x="1.0914%" y="245" width="0.0257%" height="15" fill="rgb(241,83,37)" fg:x="131667378" fg:w="3095129"/><text x="1.3414%" y="255.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperPathBuffer&gt;::prepare_buffers (2,829,579 samples, 0.02%)</title><rect x="1.1170%" y="277" width="0.0235%" height="15" fill="rgb(233,36,39)" fg:x="134762507" fg:w="2829579"/><text x="1.3670%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (2,829,579 samples, 0.02%)</title><rect x="1.1170%" y="261" width="0.0235%" height="15" fill="rgb(226,3,54)" fg:x="134762507" fg:w="2829579"/><text x="1.3670%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2,829,579 samples, 0.02%)</title><rect x="1.1170%" y="245" width="0.0235%" height="15" fill="rgb(245,192,40)" fg:x="134762507" fg:w="2829579"/><text x="1.3670%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (2,829,579 samples, 0.02%)</title><rect x="1.1170%" y="229" width="0.0235%" height="15" fill="rgb(238,167,29)" fg:x="134762507" fg:w="2829579"/><text x="1.3670%" y="239.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (3,088,592 samples, 0.03%)</title><rect x="1.1653%" y="261" width="0.0256%" height="15" fill="rgb(232,182,51)" fg:x="140588083" fg:w="3088592"/><text x="1.4153%" y="271.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (3,088,592 samples, 0.03%)</title><rect x="1.1653%" y="245" width="0.0256%" height="15" fill="rgb(231,60,39)" fg:x="140588083" fg:w="3088592"/><text x="1.4153%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (3,088,592 samples, 0.03%)</title><rect x="1.1653%" y="229" width="0.0256%" height="15" fill="rgb(208,69,12)" fg:x="140588083" fg:w="3088592"/><text x="1.4153%" y="239.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (6,434,851 samples, 0.05%)</title><rect x="1.1909%" y="245" width="0.0533%" height="15" fill="rgb(235,93,37)" fg:x="143676675" fg:w="6434851"/><text x="1.4409%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,165,115 samples, 0.03%)</title><rect x="1.2180%" y="229" width="0.0262%" height="15" fill="rgb(213,116,39)" fg:x="146946411" fg:w="3165115"/><text x="1.4680%" y="239.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (3,165,115 samples, 0.03%)</title><rect x="1.2180%" y="213" width="0.0262%" height="15" fill="rgb(222,207,29)" fg:x="146946411" fg:w="3165115"/><text x="1.4680%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (3,165,115 samples, 0.03%)</title><rect x="1.2180%" y="197" width="0.0262%" height="15" fill="rgb(206,96,30)" fg:x="146946411" fg:w="3165115"/><text x="1.4680%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,165,115 samples, 0.03%)</title><rect x="1.2180%" y="181" width="0.0262%" height="15" fill="rgb(218,138,4)" fg:x="146946411" fg:w="3165115"/><text x="1.4680%" y="191.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (9,376,823 samples, 0.08%)</title><rect x="1.1909%" y="261" width="0.0777%" height="15" fill="rgb(250,191,14)" fg:x="143676675" fg:w="9376823"/><text x="1.4409%" y="271.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (2,941,972 samples, 0.02%)</title><rect x="1.2443%" y="245" width="0.0244%" height="15" fill="rgb(239,60,40)" fg:x="150111526" fg:w="2941972"/><text x="1.4943%" y="255.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (33,728,712 samples, 0.28%)</title><rect x="1.1170%" y="309" width="0.2796%" height="15" fill="rgb(206,27,48)" fg:x="134762507" fg:w="33728712"/><text x="1.3670%" y="319.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (33,728,712 samples, 0.28%)</title><rect x="1.1170%" y="293" width="0.2796%" height="15" fill="rgb(225,35,8)" fg:x="134762507" fg:w="33728712"/><text x="1.3670%" y="303.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::descend_to_internal (30,899,133 samples, 0.26%)</title><rect x="1.1405%" y="277" width="0.2561%" height="15" fill="rgb(250,213,24)" fg:x="137592086" fg:w="30899133"/><text x="1.3905%" y="287.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (15,437,721 samples, 0.13%)</title><rect x="1.2686%" y="261" width="0.1280%" height="15" fill="rgb(247,123,22)" fg:x="153053498" fg:w="15437721"/><text x="1.5186%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (9,416,048 samples, 0.08%)</title><rect x="1.3186%" y="245" width="0.0780%" height="15" fill="rgb(231,138,38)" fg:x="159075171" fg:w="9416048"/><text x="1.5686%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,153,933 samples, 0.03%)</title><rect x="1.3966%" y="309" width="0.0261%" height="15" fill="rgb(231,145,46)" fg:x="168491219" fg:w="3153933"/><text x="1.6466%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (3,153,933 samples, 0.03%)</title><rect x="1.3966%" y="293" width="0.0261%" height="15" fill="rgb(251,118,11)" fg:x="168491219" fg:w="3153933"/><text x="1.6466%" y="303.50"></text></g><g><title>core::ptr::write (3,153,933 samples, 0.03%)</title><rect x="1.3966%" y="277" width="0.0261%" height="15" fill="rgb(217,147,25)" fg:x="168491219" fg:w="3153933"/><text x="1.6466%" y="287.50"></text></g><g><title>cfree (3,188,267 samples, 0.03%)</title><rect x="1.4960%" y="293" width="0.0264%" height="15" fill="rgb(247,81,37)" fg:x="180478792" fg:w="3188267"/><text x="1.7460%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (15,050,402 samples, 0.12%)</title><rect x="1.4227%" y="309" width="0.1248%" height="15" fill="rgb(209,12,38)" fg:x="171645152" fg:w="15050402"/><text x="1.6727%" y="319.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (3,028,495 samples, 0.03%)</title><rect x="1.5224%" y="293" width="0.0251%" height="15" fill="rgb(227,1,9)" fg:x="183667059" fg:w="3028495"/><text x="1.7724%" y="303.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,028,495 samples, 0.03%)</title><rect x="1.5224%" y="277" width="0.0251%" height="15" fill="rgb(248,47,43)" fg:x="183667059" fg:w="3028495"/><text x="1.7724%" y="287.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (3,028,495 samples, 0.03%)</title><rect x="1.5224%" y="261" width="0.0251%" height="15" fill="rgb(221,10,30)" fg:x="183667059" fg:w="3028495"/><text x="1.7724%" y="271.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (3,028,495 samples, 0.03%)</title><rect x="1.5224%" y="245" width="0.0251%" height="15" fill="rgb(210,229,1)" fg:x="183667059" fg:w="3028495"/><text x="1.7724%" y="255.50"></text></g><g><title>std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt;::new (2,837,785 samples, 0.02%)</title><rect x="1.5475%" y="293" width="0.0235%" height="15" fill="rgb(222,148,37)" fg:x="186695554" fg:w="2837785"/><text x="1.7975%" y="303.50"></text></g><g><title>std::sync::poison::Flag::borrow (2,837,785 samples, 0.02%)</title><rect x="1.5475%" y="277" width="0.0235%" height="15" fill="rgb(234,67,33)" fg:x="186695554" fg:w="2837785"/><text x="1.7975%" y="287.50"></text></g><g><title>std::sync::poison::Flag::get (2,837,785 samples, 0.02%)</title><rect x="1.5475%" y="261" width="0.0235%" height="15" fill="rgb(247,98,35)" fg:x="186695554" fg:w="2837785"/><text x="1.7975%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2,837,785 samples, 0.02%)</title><rect x="1.5475%" y="245" width="0.0235%" height="15" fill="rgb(247,138,52)" fg:x="186695554" fg:w="2837785"/><text x="1.7975%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (2,837,785 samples, 0.02%)</title><rect x="1.5475%" y="229" width="0.0235%" height="15" fill="rgb(213,79,30)" fg:x="186695554" fg:w="2837785"/><text x="1.7975%" y="239.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (162,644,198 samples, 1.35%)</title><rect x="0.2981%" y="325" width="1.3481%" height="15" fill="rgb(246,177,23)" fg:x="35964063" fg:w="162644198"/><text x="0.5481%" y="335.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (11,912,707 samples, 0.10%)</title><rect x="1.5475%" y="309" width="0.0987%" height="15" fill="rgb(230,62,27)" fg:x="186695554" fg:w="11912707"/><text x="1.7975%" y="319.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (9,074,922 samples, 0.08%)</title><rect x="1.5710%" y="293" width="0.0752%" height="15" fill="rgb(216,154,8)" fg:x="189533339" fg:w="9074922"/><text x="1.8210%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (6,071,573 samples, 0.05%)</title><rect x="1.5959%" y="277" width="0.0503%" height="15" fill="rgb(244,35,45)" fg:x="192536688" fg:w="6071573"/><text x="1.8459%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6,071,573 samples, 0.05%)</title><rect x="1.5959%" y="261" width="0.0503%" height="15" fill="rgb(251,115,12)" fg:x="192536688" fg:w="6071573"/><text x="1.8459%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,028,287 samples, 0.03%)</title><rect x="1.7749%" y="293" width="0.0251%" height="15" fill="rgb(240,54,50)" fg:x="214131516" fg:w="3028287"/><text x="2.0249%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3,028,287 samples, 0.03%)</title><rect x="1.7749%" y="277" width="0.0251%" height="15" fill="rgb(233,84,52)" fg:x="214131516" fg:w="3028287"/><text x="2.0249%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,028,287 samples, 0.03%)</title><rect x="1.7749%" y="261" width="0.0251%" height="15" fill="rgb(207,117,47)" fg:x="214131516" fg:w="3028287"/><text x="2.0249%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (6,184,626 samples, 0.05%)</title><rect x="1.8000%" y="229" width="0.0513%" height="15" fill="rgb(249,43,39)" fg:x="217159803" fg:w="6184626"/><text x="2.0500%" y="239.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (2,892,937 samples, 0.02%)</title><rect x="1.8513%" y="181" width="0.0240%" height="15" fill="rgb(209,38,44)" fg:x="223344429" fg:w="2892937"/><text x="2.1013%" y="191.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (2,892,937 samples, 0.02%)</title><rect x="1.8513%" y="165" width="0.0240%" height="15" fill="rgb(236,212,23)" fg:x="223344429" fg:w="2892937"/><text x="2.1013%" y="175.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_val (5,653,932 samples, 0.05%)</title><rect x="1.8513%" y="229" width="0.0469%" height="15" fill="rgb(242,79,21)" fg:x="223344429" fg:w="5653932"/><text x="2.1013%" y="239.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_contains_val (5,653,932 samples, 0.05%)</title><rect x="1.8513%" y="213" width="0.0469%" height="15" fill="rgb(211,96,35)" fg:x="223344429" fg:w="5653932"/><text x="2.1013%" y="223.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (5,653,932 samples, 0.05%)</title><rect x="1.8513%" y="197" width="0.0469%" height="15" fill="rgb(253,215,40)" fg:x="223344429" fg:w="5653932"/><text x="2.1013%" y="207.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (2,760,995 samples, 0.02%)</title><rect x="1.8753%" y="181" width="0.0229%" height="15" fill="rgb(211,81,21)" fg:x="226237366" fg:w="2760995"/><text x="2.1253%" y="191.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (21,215,407 samples, 0.18%)</title><rect x="1.8000%" y="277" width="0.1759%" height="15" fill="rgb(208,190,38)" fg:x="217159803" fg:w="21215407"/><text x="2.0500%" y="287.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (21,215,407 samples, 0.18%)</title><rect x="1.8000%" y="261" width="0.1759%" height="15" fill="rgb(235,213,38)" fg:x="217159803" fg:w="21215407"/><text x="2.0500%" y="271.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::is_val_internal (21,215,407 samples, 0.18%)</title><rect x="1.8000%" y="245" width="0.1759%" height="15" fill="rgb(237,122,38)" fg:x="217159803" fg:w="21215407"/><text x="2.0500%" y="255.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (9,376,849 samples, 0.08%)</title><rect x="1.8981%" y="229" width="0.0777%" height="15" fill="rgb(244,218,35)" fg:x="228998361" fg:w="9376849"/><text x="2.1481%" y="239.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final::{{closure}} (36,071,733 samples, 0.30%)</title><rect x="1.8000%" y="293" width="0.2990%" height="15" fill="rgb(240,68,47)" fg:x="217159803" fg:w="36071733"/><text x="2.0500%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (14,856,326 samples, 0.12%)</title><rect x="1.9759%" y="277" width="0.1231%" height="15" fill="rgb(210,16,53)" fg:x="238375210" fg:w="14856326"/><text x="2.2259%" y="287.50"></text></g><g><title>cfree (11,898,408 samples, 0.10%)</title><rect x="2.0004%" y="261" width="0.0986%" height="15" fill="rgb(235,124,12)" fg:x="241333128" fg:w="11898408"/><text x="2.2504%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt; (8,439,687 samples, 0.07%)</title><rect x="2.0990%" y="293" width="0.0700%" height="15" fill="rgb(224,169,11)" fg:x="253231536" fg:w="8439687"/><text x="2.3490%" y="303.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8,439,687 samples, 0.07%)</title><rect x="2.0990%" y="277" width="0.0700%" height="15" fill="rgb(250,166,2)" fg:x="253231536" fg:w="8439687"/><text x="2.3490%" y="287.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (8,439,687 samples, 0.07%)</title><rect x="2.0990%" y="261" width="0.0700%" height="15" fill="rgb(242,216,29)" fg:x="253231536" fg:w="8439687"/><text x="2.3490%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (5,692,747 samples, 0.05%)</title><rect x="2.1218%" y="245" width="0.0472%" height="15" fill="rgb(230,116,27)" fg:x="255978476" fg:w="5692747"/><text x="2.3718%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (5,692,747 samples, 0.05%)</title><rect x="2.1218%" y="229" width="0.0472%" height="15" fill="rgb(228,99,48)" fg:x="255978476" fg:w="5692747"/><text x="2.3718%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (27,983,247 samples, 0.23%)</title><rect x="2.1924%" y="261" width="0.2320%" height="15" fill="rgb(253,11,6)" fg:x="264500449" fg:w="27983247"/><text x="2.4424%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (27,983,247 samples, 0.23%)</title><rect x="2.1924%" y="245" width="0.2320%" height="15" fill="rgb(247,143,39)" fg:x="264500449" fg:w="27983247"/><text x="2.4424%" y="255.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (105,618,676 samples, 0.88%)</title><rect x="1.6462%" y="325" width="0.8755%" height="15" fill="rgb(236,97,10)" fg:x="198608261" fg:w="105618676"/><text x="1.8962%" y="335.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (105,618,676 samples, 0.88%)</title><rect x="1.6462%" y="309" width="0.8755%" height="15" fill="rgb(233,208,19)" fg:x="198608261" fg:w="105618676"/><text x="1.8962%" y="319.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (42,555,714 samples, 0.35%)</title><rect x="2.1690%" y="293" width="0.3527%" height="15" fill="rgb(216,164,2)" fg:x="261671223" fg:w="42555714"/><text x="2.4190%" y="303.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (42,555,714 samples, 0.35%)</title><rect x="2.1690%" y="277" width="0.3527%" height="15" fill="rgb(220,129,5)" fg:x="261671223" fg:w="42555714"/><text x="2.4190%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (11,743,241 samples, 0.10%)</title><rect x="2.4244%" y="261" width="0.0973%" height="15" fill="rgb(242,17,10)" fg:x="292483696" fg:w="11743241"/><text x="2.6744%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (11,743,241 samples, 0.10%)</title><rect x="2.4244%" y="245" width="0.0973%" height="15" fill="rgb(242,107,0)" fg:x="292483696" fg:w="11743241"/><text x="2.6744%" y="255.50"></text></g><g><title>core::ptr::write (109,661,326 samples, 0.91%)</title><rect x="4.6978%" y="245" width="0.9090%" height="15" fill="rgb(251,28,31)" fg:x="566760452" fg:w="109661326"/><text x="4.9478%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,444,870 samples, 0.03%)</title><rect x="5.6303%" y="181" width="0.0286%" height="15" fill="rgb(233,223,10)" fg:x="679264072" fg:w="3444870"/><text x="5.8803%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,444,870 samples, 0.03%)</title><rect x="5.6303%" y="165" width="0.0286%" height="15" fill="rgb(215,21,27)" fg:x="679264072" fg:w="3444870"/><text x="5.8803%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,444,870 samples, 0.03%)</title><rect x="5.6303%" y="149" width="0.0286%" height="15" fill="rgb(232,23,21)" fg:x="679264072" fg:w="3444870"/><text x="5.8803%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,444,870 samples, 0.03%)</title><rect x="5.6303%" y="133" width="0.0286%" height="15" fill="rgb(244,5,23)" fg:x="679264072" fg:w="3444870"/><text x="5.8803%" y="143.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (3,444,870 samples, 0.03%)</title><rect x="5.6303%" y="117" width="0.0286%" height="15" fill="rgb(226,81,46)" fg:x="679264072" fg:w="3444870"/><text x="5.8803%" y="127.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (2,963,161 samples, 0.02%)</title><rect x="5.6589%" y="181" width="0.0246%" height="15" fill="rgb(247,70,30)" fg:x="682708942" fg:w="2963161"/><text x="5.9089%" y="191.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (2,963,161 samples, 0.02%)</title><rect x="5.6589%" y="165" width="0.0246%" height="15" fill="rgb(212,68,19)" fg:x="682708942" fg:w="2963161"/><text x="5.9089%" y="175.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (2,963,161 samples, 0.02%)</title><rect x="5.6589%" y="149" width="0.0246%" height="15" fill="rgb(240,187,13)" fg:x="682708942" fg:w="2963161"/><text x="5.9089%" y="159.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (2,963,161 samples, 0.02%)</title><rect x="5.6589%" y="133" width="0.0246%" height="15" fill="rgb(223,113,26)" fg:x="682708942" fg:w="2963161"/><text x="5.9089%" y="143.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (2,963,161 samples, 0.02%)</title><rect x="5.6589%" y="117" width="0.0246%" height="15" fill="rgb(206,192,2)" fg:x="682708942" fg:w="2963161"/><text x="5.9089%" y="127.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (27,591,184 samples, 0.23%)</title><rect x="5.6835%" y="181" width="0.2287%" height="15" fill="rgb(241,108,4)" fg:x="685672103" fg:w="27591184"/><text x="5.9335%" y="191.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (27,591,184 samples, 0.23%)</title><rect x="5.6835%" y="165" width="0.2287%" height="15" fill="rgb(247,173,49)" fg:x="685672103" fg:w="27591184"/><text x="5.9335%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15,326,065 samples, 0.13%)</title><rect x="5.7851%" y="149" width="0.1270%" height="15" fill="rgb(224,114,35)" fg:x="697937222" fg:w="15326065"/><text x="6.0351%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (15,326,065 samples, 0.13%)</title><rect x="5.7851%" y="133" width="0.1270%" height="15" fill="rgb(245,159,27)" fg:x="697937222" fg:w="15326065"/><text x="6.0351%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (15,326,065 samples, 0.13%)</title><rect x="5.7851%" y="117" width="0.1270%" height="15" fill="rgb(245,172,44)" fg:x="697937222" fg:w="15326065"/><text x="6.0351%" y="127.50"></text></g><g><title>[libc.so.6] (15,326,065 samples, 0.13%)</title><rect x="5.7851%" y="101" width="0.1270%" height="15" fill="rgb(236,23,11)" fg:x="697937222" fg:w="15326065"/><text x="6.0351%" y="111.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (3,160,624 samples, 0.03%)</title><rect x="5.9122%" y="133" width="0.0262%" height="15" fill="rgb(205,117,38)" fg:x="713263287" fg:w="3160624"/><text x="6.1622%" y="143.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (3,160,624 samples, 0.03%)</title><rect x="5.9122%" y="117" width="0.0262%" height="15" fill="rgb(237,72,25)" fg:x="713263287" fg:w="3160624"/><text x="6.1622%" y="127.50"></text></g><g><title>&lt;T as core::clone::CloneToUninit&gt;::clone_to_uninit (155,825,494 samples, 1.29%)</title><rect x="4.6709%" y="277" width="1.2916%" height="15" fill="rgb(244,70,9)" fg:x="563516833" fg:w="155825494"/><text x="4.9209%" y="287.50"></text></g><g><title>&lt;T as core::clone::uninit::CopySpec&gt;::clone_one (155,825,494 samples, 1.29%)</title><rect x="4.6709%" y="261" width="1.2916%" height="15" fill="rgb(217,125,39)" fg:x="563516833" fg:w="155825494"/><text x="4.9209%" y="271.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (42,920,549 samples, 0.36%)</title><rect x="5.6068%" y="245" width="0.3558%" height="15" fill="rgb(235,36,10)" fg:x="676421778" fg:w="42920549"/><text x="5.8568%" y="255.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (40,078,255 samples, 0.33%)</title><rect x="5.6303%" y="229" width="0.3322%" height="15" fill="rgb(251,123,47)" fg:x="679264072" fg:w="40078255"/><text x="5.8803%" y="239.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (40,078,255 samples, 0.33%)</title><rect x="5.6303%" y="213" width="0.3322%" height="15" fill="rgb(221,13,13)" fg:x="679264072" fg:w="40078255"/><text x="5.8803%" y="223.50"></text></g><g><title>pathmap::zipper::node_along_path (40,078,255 samples, 0.33%)</title><rect x="5.6303%" y="197" width="0.3322%" height="15" fill="rgb(238,131,9)" fg:x="679264072" fg:w="40078255"/><text x="5.8803%" y="207.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_val (6,079,040 samples, 0.05%)</title><rect x="5.9122%" y="181" width="0.0504%" height="15" fill="rgb(211,50,8)" fg:x="713263287" fg:w="6079040"/><text x="6.1622%" y="191.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val (6,079,040 samples, 0.05%)</title><rect x="5.9122%" y="165" width="0.0504%" height="15" fill="rgb(245,182,24)" fg:x="713263287" fg:w="6079040"/><text x="6.1622%" y="175.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (6,079,040 samples, 0.05%)</title><rect x="5.9122%" y="149" width="0.0504%" height="15" fill="rgb(242,14,37)" fg:x="713263287" fg:w="6079040"/><text x="6.1622%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2,918,416 samples, 0.02%)</title><rect x="5.9384%" y="133" width="0.0242%" height="15" fill="rgb(246,228,12)" fg:x="716423911" fg:w="2918416"/><text x="6.1884%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,918,416 samples, 0.02%)</title><rect x="5.9384%" y="117" width="0.0242%" height="15" fill="rgb(213,55,15)" fg:x="716423911" fg:w="2918416"/><text x="6.1884%" y="127.50"></text></g><g><title>[libc.so.6] (363,332,925 samples, 3.01%)</title><rect x="6.1437%" y="165" width="3.0116%" height="15" fill="rgb(209,9,3)" fg:x="741199821" fg:w="363332925"/><text x="6.3937%" y="175.50">[li..</text></g><g><title>[libc.so.6] (320,650,490 samples, 2.66%)</title><rect x="6.4975%" y="149" width="2.6578%" height="15" fill="rgb(230,59,30)" fg:x="783882256" fg:w="320650490"/><text x="6.7475%" y="159.50">[l..</text></g><g><title>[libc.so.6] (12,663,999 samples, 0.10%)</title><rect x="9.0504%" y="133" width="0.1050%" height="15" fill="rgb(209,121,21)" fg:x="1091868747" fg:w="12663999"/><text x="9.3004%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (661,327,632 samples, 5.48%)</title><rect x="4.5479%" y="309" width="5.4817%" height="15" fill="rgb(220,109,13)" fg:x="548672804" fg:w="661327632"/><text x="4.7979%" y="319.50">&lt;core::..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (652,707,694 samples, 5.41%)</title><rect x="4.6193%" y="293" width="5.4102%" height="15" fill="rgb(232,18,1)" fg:x="557292742" fg:w="652707694"/><text x="4.8693%" y="303.50">&lt;alloc:..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (490,658,109 samples, 4.07%)</title><rect x="5.9626%" y="277" width="4.0670%" height="15" fill="rgb(215,41,42)" fg:x="719342327" fg:w="490658109"/><text x="6.2126%" y="287.50">allo..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (478,104,533 samples, 3.96%)</title><rect x="6.0666%" y="261" width="3.9630%" height="15" fill="rgb(224,123,36)" fg:x="731895903" fg:w="478104533"/><text x="6.3166%" y="271.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (478,104,533 samples, 3.96%)</title><rect x="6.0666%" y="245" width="3.9630%" height="15" fill="rgb(240,125,3)" fg:x="731895903" fg:w="478104533"/><text x="6.3166%" y="255.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (478,104,533 samples, 3.96%)</title><rect x="6.0666%" y="229" width="3.9630%" height="15" fill="rgb(205,98,50)" fg:x="731895903" fg:w="478104533"/><text x="6.3166%" y="239.50">allo..</text></g><g><title>alloc::alloc::alloc (478,104,533 samples, 3.96%)</title><rect x="6.0666%" y="213" width="3.9630%" height="15" fill="rgb(205,185,37)" fg:x="731895903" fg:w="478104533"/><text x="6.3166%" y="223.50">allo..</text></g><g><title>__rustc::__rdl_alloc (478,104,533 samples, 3.96%)</title><rect x="6.0666%" y="197" width="3.9630%" height="15" fill="rgb(238,207,15)" fg:x="731895903" fg:w="478104533"/><text x="6.3166%" y="207.50">__ru..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (478,104,533 samples, 3.96%)</title><rect x="6.0666%" y="181" width="3.9630%" height="15" fill="rgb(213,199,42)" fg:x="731895903" fg:w="478104533"/><text x="6.3166%" y="191.50">std:..</text></g><g><title>malloc (105,467,690 samples, 0.87%)</title><rect x="9.1554%" y="165" width="0.8742%" height="15" fill="rgb(235,201,11)" fg:x="1104532746" fg:w="105467690"/><text x="9.4054%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (6,058,715 samples, 0.05%)</title><rect x="10.2837%" y="277" width="0.0502%" height="15" fill="rgb(207,46,11)" fg:x="1240665140" fg:w="6058715"/><text x="10.5337%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (6,058,715 samples, 0.05%)</title><rect x="10.2837%" y="261" width="0.0502%" height="15" fill="rgb(241,35,35)" fg:x="1240665140" fg:w="6058715"/><text x="10.5337%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (141,768,974 samples, 1.18%)</title><rect x="10.1793%" y="293" width="1.1751%" height="15" fill="rgb(243,32,47)" fg:x="1228066704" fg:w="141768974"/><text x="10.4293%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (123,111,823 samples, 1.02%)</title><rect x="10.3340%" y="277" width="1.0205%" height="15" fill="rgb(247,202,23)" fg:x="1246723855" fg:w="123111823"/><text x="10.5840%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (123,111,823 samples, 1.02%)</title><rect x="10.3340%" y="261" width="1.0205%" height="15" fill="rgb(219,102,11)" fg:x="1246723855" fg:w="123111823"/><text x="10.5840%" y="271.50"></text></g><g><title>[libc.so.6] (363,433,287 samples, 3.01%)</title><rect x="11.5377%" y="101" width="3.0125%" height="15" fill="rgb(243,110,44)" fg:x="1391951603" fg:w="363433287"/><text x="11.7877%" y="111.50">[li..</text></g><g><title>[libc.so.6] (338,879,890 samples, 2.81%)</title><rect x="11.7413%" y="85" width="2.8089%" height="15" fill="rgb(222,74,54)" fg:x="1416505000" fg:w="338879890"/><text x="11.9913%" y="95.50">[l..</text></g><g><title>[libc.so.6] (2,955,259 samples, 0.02%)</title><rect x="14.5257%" y="69" width="0.0245%" height="15" fill="rgb(216,99,12)" fg:x="1752429631" fg:w="2955259"/><text x="14.7757%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="245" width="4.2050%" height="15" fill="rgb(226,22,26)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="255.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="229" width="4.2050%" height="15" fill="rgb(217,163,10)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="239.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="213" width="4.2050%" height="15" fill="rgb(213,25,53)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="223.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="197" width="4.2050%" height="15" fill="rgb(252,105,26)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="207.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="181" width="4.2050%" height="15" fill="rgb(220,39,43)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="191.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="165" width="4.2050%" height="15" fill="rgb(229,68,48)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="175.50">alloc..</text></g><g><title>alloc::alloc::alloc (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="149" width="4.2050%" height="15" fill="rgb(252,8,32)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="159.50">alloc..</text></g><g><title>__rustc::__rdl_alloc (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="133" width="4.2050%" height="15" fill="rgb(223,20,43)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="143.50">__rus..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (507,299,509 samples, 4.20%)</title><rect x="11.3544%" y="117" width="4.2050%" height="15" fill="rgb(229,81,49)" fg:x="1369835678" fg:w="507299509"/><text x="11.6044%" y="127.50">std::..</text></g><g><title>malloc (121,750,297 samples, 1.01%)</title><rect x="14.5502%" y="101" width="1.0092%" height="15" fill="rgb(236,28,36)" fg:x="1755384890" fg:w="121750297"/><text x="14.8002%" y="111.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (773,729,681 samples, 6.41%)</title><rect x="10.0296%" y="309" width="6.4134%" height="15" fill="rgb(249,185,26)" fg:x="1210000436" fg:w="773729681"/><text x="10.2796%" y="319.50">&lt;libleve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (613,894,439 samples, 5.09%)</title><rect x="11.3544%" y="293" width="5.0885%" height="15" fill="rgb(249,174,33)" fg:x="1369835678" fg:w="613894439"/><text x="11.6044%" y="303.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (613,894,439 samples, 5.09%)</title><rect x="11.3544%" y="277" width="5.0885%" height="15" fill="rgb(233,201,37)" fg:x="1369835678" fg:w="613894439"/><text x="11.6044%" y="287.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (613,894,439 samples, 5.09%)</title><rect x="11.3544%" y="261" width="5.0885%" height="15" fill="rgb(221,78,26)" fg:x="1369835678" fg:w="613894439"/><text x="11.6044%" y="271.50">&lt;T as ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (106,594,930 samples, 0.88%)</title><rect x="15.5594%" y="245" width="0.8836%" height="15" fill="rgb(250,127,30)" fg:x="1877135187" fg:w="106594930"/><text x="15.8094%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (106,594,930 samples, 0.88%)</title><rect x="15.5594%" y="229" width="0.8836%" height="15" fill="rgb(230,49,44)" fg:x="1877135187" fg:w="106594930"/><text x="15.8094%" y="239.50"></text></g><g><title>[libc.so.6] (67,351,617 samples, 0.56%)</title><rect x="15.8847%" y="213" width="0.5583%" height="15" fill="rgb(229,67,23)" fg:x="1916378500" fg:w="67351617"/><text x="16.1347%" y="223.50"></text></g><g><title>[libc.so.6] (469,124,470 samples, 3.89%)</title><rect x="17.2726%" y="101" width="3.8885%" height="15" fill="rgb(249,83,47)" fg:x="2083821638" fg:w="469124470"/><text x="17.5226%" y="111.50">[lib..</text></g><g><title>[libc.so.6] (416,987,167 samples, 3.46%)</title><rect x="17.7047%" y="85" width="3.4564%" height="15" fill="rgb(215,43,3)" fg:x="2135958941" fg:w="416987167"/><text x="17.9547%" y="95.50">[li..</text></g><g><title>[libc.so.6] (24,996,962 samples, 0.21%)</title><rect x="20.9539%" y="69" width="0.2072%" height="15" fill="rgb(238,154,13)" fg:x="2527949146" fg:w="24996962"/><text x="21.2039%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (690,323,202 samples, 5.72%)</title><rect x="16.7504%" y="181" width="5.7220%" height="15" fill="rgb(219,56,2)" fg:x="2020829534" fg:w="690323202"/><text x="17.0004%" y="191.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (690,323,202 samples, 5.72%)</title><rect x="16.7504%" y="165" width="5.7220%" height="15" fill="rgb(233,0,4)" fg:x="2020829534" fg:w="690323202"/><text x="17.0004%" y="175.50">alloc::..</text></g><g><title>alloc::alloc::alloc (690,323,202 samples, 5.72%)</title><rect x="16.7504%" y="149" width="5.7220%" height="15" fill="rgb(235,30,7)" fg:x="2020829534" fg:w="690323202"/><text x="17.0004%" y="159.50">alloc::..</text></g><g><title>__rustc::__rdl_alloc (690,323,202 samples, 5.72%)</title><rect x="16.7504%" y="133" width="5.7220%" height="15" fill="rgb(250,79,13)" fg:x="2020829534" fg:w="690323202"/><text x="17.0004%" y="143.50">__rustc..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (690,323,202 samples, 5.72%)</title><rect x="16.7504%" y="117" width="5.7220%" height="15" fill="rgb(211,146,34)" fg:x="2020829534" fg:w="690323202"/><text x="17.0004%" y="127.50">std::sy..</text></g><g><title>malloc (158,206,628 samples, 1.31%)</title><rect x="21.1611%" y="101" width="1.3114%" height="15" fill="rgb(228,22,38)" fg:x="2552946108" fg:w="158206628"/><text x="21.4111%" y="111.50"></text></g><g><title>core::intrinsics::unlikely (2,962,984 samples, 0.02%)</title><rect x="22.4725%" y="117" width="0.0246%" height="15" fill="rgb(235,168,5)" fg:x="2711152736" fg:w="2962984"/><text x="22.7225%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (763,461,283 samples, 6.33%)</title><rect x="16.6704%" y="245" width="6.3282%" height="15" fill="rgb(221,155,16)" fg:x="2011176452" fg:w="763461283"/><text x="16.9204%" y="255.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (763,461,283 samples, 6.33%)</title><rect x="16.6704%" y="229" width="6.3282%" height="15" fill="rgb(215,215,53)" fg:x="2011176452" fg:w="763461283"/><text x="16.9204%" y="239.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (763,461,283 samples, 6.33%)</title><rect x="16.6704%" y="213" width="6.3282%" height="15" fill="rgb(223,4,10)" fg:x="2011176452" fg:w="763461283"/><text x="16.9204%" y="223.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (763,461,283 samples, 6.33%)</title><rect x="16.6704%" y="197" width="6.3282%" height="15" fill="rgb(234,103,6)" fg:x="2011176452" fg:w="763461283"/><text x="16.9204%" y="207.50">alloc::r..</text></g><g><title>alloc::raw_vec::layout_array (63,484,999 samples, 0.53%)</title><rect x="22.4725%" y="181" width="0.5262%" height="15" fill="rgb(227,97,0)" fg:x="2711152736" fg:w="63484999"/><text x="22.7225%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (63,484,999 samples, 0.53%)</title><rect x="22.4725%" y="165" width="0.5262%" height="15" fill="rgb(234,150,53)" fg:x="2711152736" fg:w="63484999"/><text x="22.7225%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (63,484,999 samples, 0.53%)</title><rect x="22.4725%" y="149" width="0.5262%" height="15" fill="rgb(228,201,54)" fg:x="2711152736" fg:w="63484999"/><text x="22.7225%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (63,484,999 samples, 0.53%)</title><rect x="22.4725%" y="133" width="0.5262%" height="15" fill="rgb(222,22,37)" fg:x="2711152736" fg:w="63484999"/><text x="22.7225%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (60,522,015 samples, 0.50%)</title><rect x="22.4970%" y="117" width="0.5017%" height="15" fill="rgb(237,53,32)" fg:x="2714115720" fg:w="60522015"/><text x="22.7470%" y="127.50"></text></g><g><title>&lt;liblevenshtein::transducer::intersection::Intersection&lt;N&gt; as core::clone::Clone&gt;::clone (2,563,132,092 samples, 21.25%)</title><rect x="2.5217%" y="325" width="21.2455%" height="15" fill="rgb(233,25,53)" fg:x="304226937" fg:w="2563132092"/><text x="2.7717%" y="335.50">&lt;liblevenshtein::transducer::inter..</text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (883,628,912 samples, 7.32%)</title><rect x="16.4429%" y="309" width="7.3243%" height="15" fill="rgb(210,40,34)" fg:x="1983730117" fg:w="883628912"/><text x="16.6929%" y="319.50">&lt;liblevens..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (864,859,866 samples, 7.17%)</title><rect x="16.5985%" y="293" width="7.1687%" height="15" fill="rgb(241,220,44)" fg:x="2002499163" fg:w="864859866"/><text x="16.8485%" y="303.50">&lt;alloc::ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (864,859,866 samples, 7.17%)</title><rect x="16.5985%" y="277" width="7.1687%" height="15" fill="rgb(235,28,35)" fg:x="2002499163" fg:w="864859866"/><text x="16.8485%" y="287.50">alloc::sli..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (864,859,866 samples, 7.17%)</title><rect x="16.5985%" y="261" width="7.1687%" height="15" fill="rgb(210,56,17)" fg:x="2002499163" fg:w="864859866"/><text x="16.8485%" y="271.50">&lt;T as allo..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (92,721,294 samples, 0.77%)</title><rect x="22.9987%" y="245" width="0.7686%" height="15" fill="rgb(224,130,29)" fg:x="2774637735" fg:w="92721294"/><text x="23.2487%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (92,721,294 samples, 0.77%)</title><rect x="22.9987%" y="229" width="0.7686%" height="15" fill="rgb(235,212,8)" fg:x="2774637735" fg:w="92721294"/><text x="23.2487%" y="239.50"></text></g><g><title>[libc.so.6] (84,041,696 samples, 0.70%)</title><rect x="23.0706%" y="213" width="0.6966%" height="15" fill="rgb(223,33,50)" fg:x="2783317333" fg:w="84041696"/><text x="23.3206%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (11,982,043 samples, 0.10%)</title><rect x="23.8912%" y="293" width="0.0993%" height="15" fill="rgb(219,149,13)" fg:x="2882318946" fg:w="11982043"/><text x="24.1412%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (5,795,480 samples, 0.05%)</title><rect x="23.9425%" y="277" width="0.0480%" height="15" fill="rgb(250,156,29)" fg:x="2888505509" fg:w="5795480"/><text x="24.1925%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (5,795,480 samples, 0.05%)</title><rect x="23.9425%" y="261" width="0.0480%" height="15" fill="rgb(216,193,19)" fg:x="2888505509" fg:w="5795480"/><text x="24.1925%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (5,795,480 samples, 0.05%)</title><rect x="23.9425%" y="245" width="0.0480%" height="15" fill="rgb(216,135,14)" fg:x="2888505509" fg:w="5795480"/><text x="24.1925%" y="255.50"></text></g><g><title>[libc.so.6] (6,305,092 samples, 0.05%)</title><rect x="24.0159%" y="197" width="0.0523%" height="15" fill="rgb(241,47,5)" fg:x="2897363855" fg:w="6305092"/><text x="24.2659%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,343,709 samples, 0.13%)</title><rect x="23.9906%" y="277" width="0.1272%" height="15" fill="rgb(233,42,35)" fg:x="2894300989" fg:w="15343709"/><text x="24.2406%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,343,709 samples, 0.13%)</title><rect x="23.9906%" y="261" width="0.1272%" height="15" fill="rgb(231,13,6)" fg:x="2894300989" fg:w="15343709"/><text x="24.2406%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (15,343,709 samples, 0.13%)</title><rect x="23.9906%" y="245" width="0.1272%" height="15" fill="rgb(207,181,40)" fg:x="2894300989" fg:w="15343709"/><text x="24.2406%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (15,343,709 samples, 0.13%)</title><rect x="23.9906%" y="229" width="0.1272%" height="15" fill="rgb(254,173,49)" fg:x="2894300989" fg:w="15343709"/><text x="24.2406%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (15,343,709 samples, 0.13%)</title><rect x="23.9906%" y="213" width="0.1272%" height="15" fill="rgb(221,1,38)" fg:x="2894300989" fg:w="15343709"/><text x="24.2406%" y="223.50"></text></g><g><title>cfree (5,975,751 samples, 0.05%)</title><rect x="24.0682%" y="197" width="0.0495%" height="15" fill="rgb(206,124,46)" fg:x="2903668947" fg:w="5975751"/><text x="24.3182%" y="207.50"></text></g><g><title>[libc.so.6] (18,072,977 samples, 0.15%)</title><rect x="24.1177%" y="277" width="0.1498%" height="15" fill="rgb(249,21,11)" fg:x="2909644698" fg:w="18072977"/><text x="24.3677%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (58,112,349 samples, 0.48%)</title><rect x="23.9906%" y="293" width="0.4817%" height="15" fill="rgb(222,201,40)" fg:x="2894300989" fg:w="58112349"/><text x="24.2406%" y="303.50"></text></g><g><title>cfree (24,695,663 samples, 0.20%)</title><rect x="24.2675%" y="277" width="0.2047%" height="15" fill="rgb(235,61,29)" fg:x="2927717675" fg:w="24695663"/><text x="24.5175%" y="287.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::is_final (9,596,894 samples, 0.08%)</title><rect x="24.4722%" y="293" width="0.0795%" height="15" fill="rgb(219,207,3)" fg:x="2952413338" fg:w="9596894"/><text x="24.7222%" y="303.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="277" width="0.0746%" height="15" fill="rgb(222,56,46)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="261" width="0.0746%" height="15" fill="rgb(239,76,54)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="245" width="0.0746%" height="15" fill="rgb(231,124,27)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="229" width="0.0746%" height="15" fill="rgb(249,195,6)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="213" width="0.0746%" height="15" fill="rgb(237,174,47)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="197" width="0.0746%" height="15" fill="rgb(206,201,31)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="181" width="0.0746%" height="15" fill="rgb(231,57,52)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="165" width="0.0746%" height="15" fill="rgb(248,177,22)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="149" width="0.0746%" height="15" fill="rgb(215,211,37)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,004,345 samples, 0.07%)</title><rect x="24.6710%" y="133" width="0.0746%" height="15" fill="rgb(241,128,51)" fg:x="2976391397" fg:w="9004345"/><text x="24.9210%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,887,453 samples, 0.05%)</title><rect x="24.6968%" y="117" width="0.0488%" height="15" fill="rgb(227,165,31)" fg:x="2979508289" fg:w="5887453"/><text x="24.9468%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,887,453 samples, 0.05%)</title><rect x="24.6968%" y="101" width="0.0488%" height="15" fill="rgb(228,167,24)" fg:x="2979508289" fg:w="5887453"/><text x="24.9468%" y="111.50"></text></g><g><title>alloc::alloc::alloc (5,887,453 samples, 0.05%)</title><rect x="24.6968%" y="85" width="0.0488%" height="15" fill="rgb(228,143,12)" fg:x="2979508289" fg:w="5887453"/><text x="24.9468%" y="95.50"></text></g><g><title>malloc (3,095,287 samples, 0.03%)</title><rect x="24.7200%" y="69" width="0.0257%" height="15" fill="rgb(249,149,8)" fg:x="2982300455" fg:w="3095287"/><text x="24.9700%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (6,214,154 samples, 0.05%)</title><rect x="24.7456%" y="277" width="0.0515%" height="15" fill="rgb(243,35,44)" fg:x="2985395742" fg:w="6214154"/><text x="24.9956%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="277" width="0.0496%" height="15" fill="rgb(246,89,9)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="261" width="0.0496%" height="15" fill="rgb(233,213,13)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="245" width="0.0496%" height="15" fill="rgb(233,141,41)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="229" width="0.0496%" height="15" fill="rgb(239,167,4)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="213" width="0.0496%" height="15" fill="rgb(209,217,16)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="197" width="0.0496%" height="15" fill="rgb(219,88,35)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="181" width="0.0496%" height="15" fill="rgb(220,193,23)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="165" width="0.0496%" height="15" fill="rgb(230,90,52)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="175.50"></text></g><g><title>cfree (5,987,142 samples, 0.05%)</title><rect x="24.7971%" y="149" width="0.0496%" height="15" fill="rgb(252,106,19)" fg:x="2991609896" fg:w="5987142"/><text x="25.0471%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (21,375,430 samples, 0.18%)</title><rect x="24.8468%" y="277" width="0.1772%" height="15" fill="rgb(206,74,20)" fg:x="2997597038" fg:w="21375430"/><text x="25.0968%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (18,294,308 samples, 0.15%)</title><rect x="24.8723%" y="261" width="0.1516%" height="15" fill="rgb(230,138,44)" fg:x="3000678160" fg:w="18294308"/><text x="25.1223%" y="271.50"></text></g><g><title>core::mem::swap (5,949,993 samples, 0.05%)</title><rect x="24.9746%" y="245" width="0.0493%" height="15" fill="rgb(235,182,43)" fg:x="3013022475" fg:w="5949993"/><text x="25.2246%" y="255.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::term (257,897,994 samples, 2.14%)</title><rect x="24.5518%" y="293" width="2.1377%" height="15" fill="rgb(242,16,51)" fg:x="2962010232" fg:w="257897994"/><text x="24.8018%" y="303.50">l..</text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::collect_path (200,935,758 samples, 1.67%)</title><rect x="25.0239%" y="277" width="1.6655%" height="15" fill="rgb(248,9,4)" fg:x="3018972468" fg:w="200935758"/><text x="25.2739%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15,481,045 samples, 0.13%)</title><rect x="26.5612%" y="261" width="0.1283%" height="15" fill="rgb(210,31,22)" fg:x="3204427181" fg:w="15481045"/><text x="26.8112%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (15,481,045 samples, 0.13%)</title><rect x="26.5612%" y="245" width="0.1283%" height="15" fill="rgb(239,54,39)" fg:x="3204427181" fg:w="15481045"/><text x="26.8112%" y="255.50"></text></g><g><title>core::ptr::write (9,222,332 samples, 0.08%)</title><rect x="26.6130%" y="229" width="0.0764%" height="15" fill="rgb(230,99,41)" fg:x="3210685894" fg:w="9222332"/><text x="26.8630%" y="239.50"></text></g><g><title>&lt;T as core::clone::CloneToUninit&gt;::clone_to_uninit (12,352,833 samples, 0.10%)</title><rect x="26.8593%" y="245" width="0.1024%" height="15" fill="rgb(253,106,12)" fg:x="3240394431" fg:w="12352833"/><text x="27.1093%" y="255.50"></text></g><g><title>&lt;T as core::clone::uninit::CopySpec&gt;::clone_one (12,352,833 samples, 0.10%)</title><rect x="26.8593%" y="229" width="0.1024%" height="15" fill="rgb(213,46,41)" fg:x="3240394431" fg:w="12352833"/><text x="27.1093%" y="239.50"></text></g><g><title>core::ptr::write (12,352,833 samples, 0.10%)</title><rect x="26.8593%" y="213" width="0.1024%" height="15" fill="rgb(215,133,35)" fg:x="3240394431" fg:w="12352833"/><text x="27.1093%" y="223.50"></text></g><g><title>[libc.so.6] (5,932,984 samples, 0.05%)</title><rect x="26.9617%" y="133" width="0.0492%" height="15" fill="rgb(213,28,5)" fg:x="3252747264" fg:w="5932984"/><text x="27.2117%" y="143.50"></text></g><g><title>[libc.so.6] (5,932,984 samples, 0.05%)</title><rect x="26.9617%" y="117" width="0.0492%" height="15" fill="rgb(215,77,49)" fg:x="3252747264" fg:w="5932984"/><text x="27.2117%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (30,342,359 samples, 0.25%)</title><rect x="26.8593%" y="277" width="0.2515%" height="15" fill="rgb(248,100,22)" fg:x="3240394431" fg:w="30342359"/><text x="27.1093%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (30,342,359 samples, 0.25%)</title><rect x="26.8593%" y="261" width="0.2515%" height="15" fill="rgb(208,67,9)" fg:x="3240394431" fg:w="30342359"/><text x="27.1093%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (17,989,526 samples, 0.15%)</title><rect x="26.9617%" y="245" width="0.1491%" height="15" fill="rgb(219,133,21)" fg:x="3252747264" fg:w="17989526"/><text x="27.2117%" y="255.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (17,989,526 samples, 0.15%)</title><rect x="26.9617%" y="229" width="0.1491%" height="15" fill="rgb(246,46,29)" fg:x="3252747264" fg:w="17989526"/><text x="27.2117%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17,989,526 samples, 0.15%)</title><rect x="26.9617%" y="213" width="0.1491%" height="15" fill="rgb(246,185,52)" fg:x="3252747264" fg:w="17989526"/><text x="27.2117%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17,989,526 samples, 0.15%)</title><rect x="26.9617%" y="197" width="0.1491%" height="15" fill="rgb(252,136,11)" fg:x="3252747264" fg:w="17989526"/><text x="27.2117%" y="207.50"></text></g><g><title>alloc::alloc::alloc (17,989,526 samples, 0.15%)</title><rect x="26.9617%" y="181" width="0.1491%" height="15" fill="rgb(219,138,53)" fg:x="3252747264" fg:w="17989526"/><text x="27.2117%" y="191.50"></text></g><g><title>__rustc::__rdl_alloc (17,989,526 samples, 0.15%)</title><rect x="26.9617%" y="165" width="0.1491%" height="15" fill="rgb(211,51,23)" fg:x="3252747264" fg:w="17989526"/><text x="27.2117%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17,989,526 samples, 0.15%)</title><rect x="26.9617%" y="149" width="0.1491%" height="15" fill="rgb(247,221,28)" fg:x="3252747264" fg:w="17989526"/><text x="27.2117%" y="159.50"></text></g><g><title>malloc (12,056,542 samples, 0.10%)</title><rect x="27.0109%" y="133" width="0.0999%" height="15" fill="rgb(251,222,45)" fg:x="3258680248" fg:w="12056542"/><text x="27.2609%" y="143.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (9,082,863 samples, 0.08%)</title><rect x="27.1108%" y="261" width="0.0753%" height="15" fill="rgb(217,162,53)" fg:x="3270736790" fg:w="9082863"/><text x="27.3608%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2,995,944 samples, 0.02%)</title><rect x="27.1612%" y="245" width="0.0248%" height="15" fill="rgb(229,93,14)" fg:x="3276823709" fg:w="2995944"/><text x="27.4112%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2,995,944 samples, 0.02%)</title><rect x="27.1612%" y="229" width="0.0248%" height="15" fill="rgb(209,67,49)" fg:x="3276823709" fg:w="2995944"/><text x="27.4112%" y="239.50"></text></g><g><title>[libc.so.6] (69,765,832 samples, 0.58%)</title><rect x="27.2935%" y="69" width="0.5783%" height="15" fill="rgb(213,87,29)" fg:x="3292784101" fg:w="69765832"/><text x="27.5435%" y="79.50"></text></g><g><title>[libc.so.6] (66,705,755 samples, 0.55%)</title><rect x="27.3189%" y="53" width="0.5529%" height="15" fill="rgb(205,151,52)" fg:x="3295844178" fg:w="66705755"/><text x="27.5689%" y="63.50"></text></g><g><title>[libc.so.6] (6,175,129 samples, 0.05%)</title><rect x="27.8206%" y="37" width="0.0512%" height="15" fill="rgb(253,215,39)" fg:x="3356374804" fg:w="6175129"/><text x="28.0706%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (116,304,482 samples, 0.96%)</title><rect x="27.1861%" y="213" width="0.9640%" height="15" fill="rgb(221,220,41)" fg:x="3279819653" fg:w="116304482"/><text x="27.4361%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (116,304,482 samples, 0.96%)</title><rect x="27.1861%" y="197" width="0.9640%" height="15" fill="rgb(218,133,21)" fg:x="3279819653" fg:w="116304482"/><text x="27.4361%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (116,304,482 samples, 0.96%)</title><rect x="27.1861%" y="181" width="0.9640%" height="15" fill="rgb(221,193,43)" fg:x="3279819653" fg:w="116304482"/><text x="27.4361%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (116,304,482 samples, 0.96%)</title><rect x="27.1861%" y="165" width="0.9640%" height="15" fill="rgb(240,128,52)" fg:x="3279819653" fg:w="116304482"/><text x="27.4361%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103,340,034 samples, 0.86%)</title><rect x="27.2935%" y="149" width="0.8566%" height="15" fill="rgb(253,114,12)" fg:x="3292784101" fg:w="103340034"/><text x="27.5435%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103,340,034 samples, 0.86%)</title><rect x="27.2935%" y="133" width="0.8566%" height="15" fill="rgb(215,223,47)" fg:x="3292784101" fg:w="103340034"/><text x="27.5435%" y="143.50"></text></g><g><title>alloc::alloc::alloc (103,340,034 samples, 0.86%)</title><rect x="27.2935%" y="117" width="0.8566%" height="15" fill="rgb(248,225,23)" fg:x="3292784101" fg:w="103340034"/><text x="27.5435%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (103,340,034 samples, 0.86%)</title><rect x="27.2935%" y="101" width="0.8566%" height="15" fill="rgb(250,108,0)" fg:x="3292784101" fg:w="103340034"/><text x="27.5435%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (103,340,034 samples, 0.86%)</title><rect x="27.2935%" y="85" width="0.8566%" height="15" fill="rgb(228,208,7)" fg:x="3292784101" fg:w="103340034"/><text x="27.5435%" y="95.50"></text></g><g><title>malloc (33,574,202 samples, 0.28%)</title><rect x="27.8718%" y="69" width="0.2783%" height="15" fill="rgb(244,45,10)" fg:x="3362549933" fg:w="33574202"/><text x="28.1218%" y="79.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (142,754,873 samples, 1.18%)</title><rect x="27.1108%" y="277" width="1.1833%" height="15" fill="rgb(207,125,25)" fg:x="3270736790" fg:w="142754873"/><text x="27.3608%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (133,672,010 samples, 1.11%)</title><rect x="27.1861%" y="261" width="1.1080%" height="15" fill="rgb(210,195,18)" fg:x="3279819653" fg:w="133672010"/><text x="27.4361%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (133,672,010 samples, 1.11%)</title><rect x="27.1861%" y="245" width="1.1080%" height="15" fill="rgb(249,80,12)" fg:x="3279819653" fg:w="133672010"/><text x="27.4361%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (133,672,010 samples, 1.11%)</title><rect x="27.1861%" y="229" width="1.1080%" height="15" fill="rgb(221,65,9)" fg:x="3279819653" fg:w="133672010"/><text x="27.4361%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17,367,528 samples, 0.14%)</title><rect x="28.1501%" y="213" width="0.1440%" height="15" fill="rgb(235,49,36)" fg:x="3396124135" fg:w="17367528"/><text x="28.4001%" y="223.50"></text></g><g><title>core::ptr::copy_nonoverlapping (17,367,528 samples, 0.14%)</title><rect x="28.1501%" y="197" width="0.1440%" height="15" fill="rgb(225,32,20)" fg:x="3396124135" fg:w="17367528"/><text x="28.4001%" y="207.50"></text></g><g><title>[libc.so.6] (8,827,254 samples, 0.07%)</title><rect x="28.2209%" y="181" width="0.0732%" height="15" fill="rgb(215,141,46)" fg:x="3404664409" fg:w="8827254"/><text x="28.4709%" y="191.50"></text></g><g><title>[libc.so.6] (77,087,756 samples, 0.64%)</title><rect x="28.3708%" y="69" width="0.6390%" height="15" fill="rgb(250,160,47)" fg:x="3422745220" fg:w="77087756"/><text x="28.6208%" y="79.50"></text></g><g><title>[libc.so.6] (70,850,747 samples, 0.59%)</title><rect x="28.4225%" y="53" width="0.5873%" height="15" fill="rgb(216,222,40)" fg:x="3428982229" fg:w="70850747"/><text x="28.6725%" y="63.50"></text></g><g><title>[libc.so.6] (9,077,249 samples, 0.08%)</title><rect x="28.9345%" y="37" width="0.0752%" height="15" fill="rgb(234,217,39)" fg:x="3490755727" fg:w="9077249"/><text x="29.1845%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (95,249,871 samples, 0.79%)</title><rect x="28.3440%" y="149" width="0.7895%" height="15" fill="rgb(207,178,40)" fg:x="3419515087" fg:w="95249871"/><text x="28.5940%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (95,249,871 samples, 0.79%)</title><rect x="28.3440%" y="133" width="0.7895%" height="15" fill="rgb(221,136,13)" fg:x="3419515087" fg:w="95249871"/><text x="28.5940%" y="143.50"></text></g><g><title>alloc::alloc::alloc (95,249,871 samples, 0.79%)</title><rect x="28.3440%" y="117" width="0.7895%" height="15" fill="rgb(249,199,10)" fg:x="3419515087" fg:w="95249871"/><text x="28.5940%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (95,249,871 samples, 0.79%)</title><rect x="28.3440%" y="101" width="0.7895%" height="15" fill="rgb(249,222,13)" fg:x="3419515087" fg:w="95249871"/><text x="28.5940%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (95,249,871 samples, 0.79%)</title><rect x="28.3440%" y="85" width="0.7895%" height="15" fill="rgb(244,185,38)" fg:x="3419515087" fg:w="95249871"/><text x="28.5940%" y="95.50"></text></g><g><title>malloc (14,931,982 samples, 0.12%)</title><rect x="29.0097%" y="69" width="0.1238%" height="15" fill="rgb(236,202,9)" fg:x="3499832976" fg:w="14931982"/><text x="29.2597%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (101,353,715 samples, 0.84%)</title><rect x="28.3440%" y="213" width="0.8401%" height="15" fill="rgb(250,229,37)" fg:x="3419515087" fg:w="101353715"/><text x="28.5940%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (101,353,715 samples, 0.84%)</title><rect x="28.3440%" y="197" width="0.8401%" height="15" fill="rgb(206,174,23)" fg:x="3419515087" fg:w="101353715"/><text x="28.5940%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (101,353,715 samples, 0.84%)</title><rect x="28.3440%" y="181" width="0.8401%" height="15" fill="rgb(211,33,43)" fg:x="3419515087" fg:w="101353715"/><text x="28.5940%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (101,353,715 samples, 0.84%)</title><rect x="28.3440%" y="165" width="0.8401%" height="15" fill="rgb(245,58,50)" fg:x="3419515087" fg:w="101353715"/><text x="28.5940%" y="175.50"></text></g><g><title>alloc::raw_vec::layout_array (6,103,844 samples, 0.05%)</title><rect x="29.1335%" y="149" width="0.0506%" height="15" fill="rgb(244,68,36)" fg:x="3514764958" fg:w="6103844"/><text x="29.3835%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::repeat (6,103,844 samples, 0.05%)</title><rect x="29.1335%" y="133" width="0.0506%" height="15" fill="rgb(232,229,15)" fg:x="3514764958" fg:w="6103844"/><text x="29.3835%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (6,103,844 samples, 0.05%)</title><rect x="29.1335%" y="117" width="0.0506%" height="15" fill="rgb(254,30,23)" fg:x="3514764958" fg:w="6103844"/><text x="29.3835%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (6,103,844 samples, 0.05%)</title><rect x="29.1335%" y="101" width="0.0506%" height="15" fill="rgb(235,160,14)" fg:x="3514764958" fg:w="6103844"/><text x="29.3835%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (6,103,844 samples, 0.05%)</title><rect x="29.1335%" y="85" width="0.0506%" height="15" fill="rgb(212,155,44)" fg:x="3514764958" fg:w="6103844"/><text x="29.3835%" y="95.50"></text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (119,333,813 samples, 0.99%)</title><rect x="28.2941%" y="277" width="0.9891%" height="15" fill="rgb(226,2,50)" fg:x="3413491663" fg:w="119333813"/><text x="28.5441%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (113,310,389 samples, 0.94%)</title><rect x="28.3440%" y="261" width="0.9392%" height="15" fill="rgb(234,177,6)" fg:x="3419515087" fg:w="113310389"/><text x="28.5940%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (113,310,389 samples, 0.94%)</title><rect x="28.3440%" y="245" width="0.9392%" height="15" fill="rgb(217,24,9)" fg:x="3419515087" fg:w="113310389"/><text x="28.5940%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (113,310,389 samples, 0.94%)</title><rect x="28.3440%" y="229" width="0.9392%" height="15" fill="rgb(220,13,46)" fg:x="3419515087" fg:w="113310389"/><text x="28.5940%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11,956,674 samples, 0.10%)</title><rect x="29.1841%" y="213" width="0.0991%" height="15" fill="rgb(239,221,27)" fg:x="3520868802" fg:w="11956674"/><text x="29.4341%" y="223.50"></text></g><g><title>core::ptr::copy_nonoverlapping (11,956,674 samples, 0.10%)</title><rect x="29.1841%" y="197" width="0.0991%" height="15" fill="rgb(222,198,25)" fg:x="3520868802" fg:w="11956674"/><text x="29.4341%" y="207.50"></text></g><g><title>[libc.so.6] (11,956,674 samples, 0.10%)</title><rect x="29.1841%" y="181" width="0.0991%" height="15" fill="rgb(211,99,13)" fg:x="3520868802" fg:w="11956674"/><text x="29.4341%" y="191.50"></text></g><g><title>[libc.so.6] (92,919,079 samples, 0.77%)</title><rect x="29.5050%" y="165" width="0.7702%" height="15" fill="rgb(232,111,31)" fg:x="3559584043" fg:w="92919079"/><text x="29.7550%" y="175.50"></text></g><g><title>[libc.so.6] (86,916,811 samples, 0.72%)</title><rect x="29.5548%" y="149" width="0.7204%" height="15" fill="rgb(245,82,37)" fg:x="3565586311" fg:w="86916811"/><text x="29.8048%" y="159.50"></text></g><g><title>[libc.so.6] (3,065,440 samples, 0.03%)</title><rect x="30.2498%" y="133" width="0.0254%" height="15" fill="rgb(227,149,46)" fg:x="3649437682" fg:w="3065440"/><text x="30.4998%" y="143.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (189,600,054 samples, 1.57%)</title><rect x="29.2832%" y="277" width="1.5716%" height="15" fill="rgb(218,36,50)" fg:x="3532825476" fg:w="189600054"/><text x="29.5332%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (171,838,020 samples, 1.42%)</title><rect x="29.4304%" y="261" width="1.4243%" height="15" fill="rgb(226,80,48)" fg:x="3550587510" fg:w="171838020"/><text x="29.6804%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (168,784,845 samples, 1.40%)</title><rect x="29.4557%" y="245" width="1.3990%" height="15" fill="rgb(238,224,15)" fg:x="3553640685" fg:w="168784845"/><text x="29.7057%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (168,784,845 samples, 1.40%)</title><rect x="29.4557%" y="229" width="1.3990%" height="15" fill="rgb(241,136,10)" fg:x="3553640685" fg:w="168784845"/><text x="29.7057%" y="239.50"></text></g><g><title>alloc::alloc::alloc (168,784,845 samples, 1.40%)</title><rect x="29.4557%" y="213" width="1.3990%" height="15" fill="rgb(208,32,45)" fg:x="3553640685" fg:w="168784845"/><text x="29.7057%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (168,784,845 samples, 1.40%)</title><rect x="29.4557%" y="197" width="1.3990%" height="15" fill="rgb(207,135,9)" fg:x="3553640685" fg:w="168784845"/><text x="29.7057%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (168,784,845 samples, 1.40%)</title><rect x="29.4557%" y="181" width="1.3990%" height="15" fill="rgb(206,86,44)" fg:x="3553640685" fg:w="168784845"/><text x="29.7057%" y="191.50"></text></g><g><title>malloc (69,922,408 samples, 0.58%)</title><rect x="30.2752%" y="165" width="0.5796%" height="15" fill="rgb(245,177,15)" fg:x="3652503122" fg:w="69922408"/><text x="30.5252%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (5,830,878 samples, 0.05%)</title><rect x="30.8548%" y="277" width="0.0483%" height="15" fill="rgb(206,64,50)" fg:x="3722425530" fg:w="5830878"/><text x="31.1048%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back_mut (5,830,878 samples, 0.05%)</title><rect x="30.8548%" y="261" width="0.0483%" height="15" fill="rgb(234,36,40)" fg:x="3722425530" fg:w="5830878"/><text x="31.1048%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,767,354 samples, 0.02%)</title><rect x="30.8802%" y="245" width="0.0229%" height="15" fill="rgb(213,64,8)" fg:x="3725489054" fg:w="2767354"/><text x="31.1302%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,767,354 samples, 0.02%)</title><rect x="30.8802%" y="229" width="0.0229%" height="15" fill="rgb(210,75,36)" fg:x="3725489054" fg:w="2767354"/><text x="31.1302%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,767,354 samples, 0.02%)</title><rect x="30.8802%" y="213" width="0.0229%" height="15" fill="rgb(229,88,21)" fg:x="3725489054" fg:w="2767354"/><text x="31.1302%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30,392,407 samples, 0.25%)</title><rect x="30.9031%" y="261" width="0.2519%" height="15" fill="rgb(252,204,47)" fg:x="3728256408" fg:w="30392407"/><text x="31.1531%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30,392,407 samples, 0.25%)</title><rect x="30.9031%" y="245" width="0.2519%" height="15" fill="rgb(208,77,27)" fg:x="3728256408" fg:w="30392407"/><text x="31.1531%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (30,392,407 samples, 0.25%)</title><rect x="30.9031%" y="229" width="0.2519%" height="15" fill="rgb(221,76,26)" fg:x="3728256408" fg:w="30392407"/><text x="31.1531%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (30,392,407 samples, 0.25%)</title><rect x="30.9031%" y="213" width="0.2519%" height="15" fill="rgb(225,139,18)" fg:x="3728256408" fg:w="30392407"/><text x="31.1531%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (30,392,407 samples, 0.25%)</title><rect x="30.9031%" y="197" width="0.2519%" height="15" fill="rgb(230,137,11)" fg:x="3728256408" fg:w="30392407"/><text x="31.1531%" y="207.50"></text></g><g><title>cfree (30,392,407 samples, 0.25%)</title><rect x="30.9031%" y="181" width="0.2519%" height="15" fill="rgb(212,28,1)" fg:x="3728256408" fg:w="30392407"/><text x="31.1531%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (9,468,413 samples, 0.08%)</title><rect x="31.1550%" y="229" width="0.0785%" height="15" fill="rgb(248,164,17)" fg:x="3758648815" fg:w="9468413"/><text x="31.4050%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,468,413 samples, 0.08%)</title><rect x="31.1550%" y="213" width="0.0785%" height="15" fill="rgb(222,171,42)" fg:x="3758648815" fg:w="9468413"/><text x="31.4050%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9,468,413 samples, 0.08%)</title><rect x="31.1550%" y="197" width="0.0785%" height="15" fill="rgb(243,84,45)" fg:x="3758648815" fg:w="9468413"/><text x="31.4050%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (9,468,413 samples, 0.08%)</title><rect x="31.1550%" y="181" width="0.0785%" height="15" fill="rgb(252,49,23)" fg:x="3758648815" fg:w="9468413"/><text x="31.4050%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt; (40,196,226 samples, 0.33%)</title><rect x="31.1550%" y="245" width="0.3332%" height="15" fill="rgb(215,19,7)" fg:x="3758648815" fg:w="40196226"/><text x="31.4050%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="229" width="0.2547%" height="15" fill="rgb(238,81,41)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="213" width="0.2547%" height="15" fill="rgb(210,199,37)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="197" width="0.2547%" height="15" fill="rgb(244,192,49)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="181" width="0.2547%" height="15" fill="rgb(226,211,11)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="165" width="0.2547%" height="15" fill="rgb(236,162,54)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="149" width="0.2547%" height="15" fill="rgb(220,229,9)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="159.50"></text></g><g><title>__rustc::__rdl_dealloc (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="133" width="0.2547%" height="15" fill="rgb(250,87,22)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="117" width="0.2547%" height="15" fill="rgb(239,43,17)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="127.50"></text></g><g><title>cfree (30,727,813 samples, 0.25%)</title><rect x="31.2335%" y="101" width="0.2547%" height="15" fill="rgb(231,177,25)" fg:x="3768117228" fg:w="30727813"/><text x="31.4835%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = (u8,liblevenshtein::dictionary::pathmap::PathMapNode)&gt;&gt; (77,033,212 samples, 0.64%)</title><rect x="30.9031%" y="277" width="0.6385%" height="15" fill="rgb(219,179,1)" fg:x="3728256408" fg:w="77033212"/><text x="31.1531%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;smallvec::IntoIter&lt;[u8: 8]&gt;,&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt;&gt; (46,640,805 samples, 0.39%)</title><rect x="31.1550%" y="261" width="0.3866%" height="15" fill="rgb(238,219,53)" fg:x="3758648815" fg:w="46640805"/><text x="31.4050%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[u8: 8]&gt;&gt; (6,444,579 samples, 0.05%)</title><rect x="31.4882%" y="245" width="0.0534%" height="15" fill="rgb(232,167,36)" fg:x="3798845041" fg:w="6444579"/><text x="31.7382%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[u8: 8]&gt;&gt; (6,444,579 samples, 0.05%)</title><rect x="31.4882%" y="229" width="0.0534%" height="15" fill="rgb(244,19,51)" fg:x="3798845041" fg:w="6444579"/><text x="31.7382%" y="239.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (6,444,579 samples, 0.05%)</title><rect x="31.4882%" y="213" width="0.0534%" height="15" fill="rgb(224,6,22)" fg:x="3798845041" fg:w="6444579"/><text x="31.7382%" y="223.50"></text></g><g><title>core::mem::drop (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="197" width="0.0276%" height="15" fill="rgb(224,145,5)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="181" width="0.0276%" height="15" fill="rgb(234,130,49)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="165" width="0.0276%" height="15" fill="rgb(254,6,2)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="149" width="0.0276%" height="15" fill="rgb(208,96,46)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="133" width="0.0276%" height="15" fill="rgb(239,3,39)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="117" width="0.0276%" height="15" fill="rgb(233,210,1)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="101" width="0.0276%" height="15" fill="rgb(244,137,37)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="111.50"></text></g><g><title>__rustc::__rdl_dealloc (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="85" width="0.0276%" height="15" fill="rgb(240,136,2)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="95.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="69" width="0.0276%" height="15" fill="rgb(239,18,37)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="79.50"></text></g><g><title>[libc.so.6] (3,335,245 samples, 0.03%)</title><rect x="31.5140%" y="53" width="0.0276%" height="15" fill="rgb(218,185,22)" fg:x="3801954375" fg:w="3335245"/><text x="31.7640%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (9,395,181 samples, 0.08%)</title><rect x="31.5416%" y="261" width="0.0779%" height="15" fill="rgb(225,218,4)" fg:x="3805289620" fg:w="9395181"/><text x="31.7916%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,395,181 samples, 0.08%)</title><rect x="31.5416%" y="245" width="0.0779%" height="15" fill="rgb(230,182,32)" fg:x="3805289620" fg:w="9395181"/><text x="31.7916%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9,395,181 samples, 0.08%)</title><rect x="31.5416%" y="229" width="0.0779%" height="15" fill="rgb(242,56,43)" fg:x="3805289620" fg:w="9395181"/><text x="31.7916%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (9,395,181 samples, 0.08%)</title><rect x="31.5416%" y="213" width="0.0779%" height="15" fill="rgb(233,99,24)" fg:x="3805289620" fg:w="9395181"/><text x="31.7916%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (21,271,464 samples, 0.18%)</title><rect x="31.5416%" y="277" width="0.1763%" height="15" fill="rgb(234,209,42)" fg:x="3805289620" fg:w="21271464"/><text x="31.7916%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="261" width="0.0984%" height="15" fill="rgb(227,7,12)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="245" width="0.0984%" height="15" fill="rgb(245,203,43)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="229" width="0.0984%" height="15" fill="rgb(238,205,33)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="213" width="0.0984%" height="15" fill="rgb(231,56,7)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="197" width="0.0984%" height="15" fill="rgb(244,186,29)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="181" width="0.0984%" height="15" fill="rgb(234,111,31)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="191.50"></text></g><g><title>__rustc::__rdl_dealloc (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="165" width="0.0984%" height="15" fill="rgb(241,149,10)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="149" width="0.0984%" height="15" fill="rgb(249,206,44)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="159.50"></text></g><g><title>cfree (11,876,283 samples, 0.10%)</title><rect x="31.6195%" y="133" width="0.0984%" height="15" fill="rgb(251,153,30)" fg:x="3814684801" fg:w="11876283"/><text x="31.8695%" y="143.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::with_parent (9,598,891 samples, 0.08%)</title><rect x="31.7180%" y="277" width="0.0796%" height="15" fill="rgb(239,152,38)" fg:x="3826561084" fg:w="9598891"/><text x="31.9680%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,760,446 samples, 0.07%)</title><rect x="33.2369%" y="261" width="0.0726%" height="15" fill="rgb(249,139,47)" fg:x="4009811104" fg:w="8760446"/><text x="33.4869%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,088,140 samples, 0.03%)</title><rect x="33.2839%" y="245" width="0.0256%" height="15" fill="rgb(244,64,35)" fg:x="4015483410" fg:w="3088140"/><text x="33.5339%" y="255.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (67,793,183 samples, 0.56%)</title><rect x="33.3095%" y="261" width="0.5619%" height="15" fill="rgb(216,46,15)" fg:x="4018571550" fg:w="67793183"/><text x="33.5595%" y="271.50"></text></g><g><title>core::ptr::read (28,242,788 samples, 0.23%)</title><rect x="33.6373%" y="245" width="0.2341%" height="15" fill="rgb(250,74,19)" fg:x="4058121945" fg:w="28242788"/><text x="33.8873%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (21,531,440 samples, 0.18%)</title><rect x="33.8714%" y="245" width="0.1785%" height="15" fill="rgb(249,42,33)" fg:x="4086364733" fg:w="21531440"/><text x="34.1214%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (21,531,440 samples, 0.18%)</title><rect x="33.8714%" y="229" width="0.1785%" height="15" fill="rgb(242,149,17)" fg:x="4086364733" fg:w="21531440"/><text x="34.1214%" y="239.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (21,531,440 samples, 0.18%)</title><rect x="33.8714%" y="213" width="0.1785%" height="15" fill="rgb(244,29,21)" fg:x="4086364733" fg:w="21531440"/><text x="34.1214%" y="223.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (60,934,365 samples, 0.51%)</title><rect x="33.8714%" y="261" width="0.5051%" height="15" fill="rgb(220,130,37)" fg:x="4086364733" fg:w="60934365"/><text x="34.1214%" y="271.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::set_len (39,402,925 samples, 0.33%)</title><rect x="34.0499%" y="245" width="0.3266%" height="15" fill="rgb(211,67,2)" fg:x="4107896173" fg:w="39402925"/><text x="34.2999%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[liblevenshtein::transducer::position::Position: 4]&gt;&gt; (15,286,917 samples, 0.13%)</title><rect x="34.3765%" y="261" width="0.1267%" height="15" fill="rgb(235,68,52)" fg:x="4147299098" fg:w="15286917"/><text x="34.6265%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[liblevenshtein::transducer::position::Position: 4]&gt;&gt; (15,286,917 samples, 0.13%)</title><rect x="34.3765%" y="245" width="0.1267%" height="15" fill="rgb(246,142,3)" fg:x="4147299098" fg:w="15286917"/><text x="34.6265%" y="255.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (15,286,917 samples, 0.13%)</title><rect x="34.3765%" y="229" width="0.1267%" height="15" fill="rgb(241,25,7)" fg:x="4147299098" fg:w="15286917"/><text x="34.6265%" y="239.50"></text></g><g><title>liblevenshtein::transducer::pool::StatePool::release (33,731,717 samples, 0.28%)</title><rect x="34.5032%" y="261" width="0.2796%" height="15" fill="rgb(242,119,39)" fg:x="4162586015" fg:w="33731717"/><text x="34.7532%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (30,773,626 samples, 0.26%)</title><rect x="34.5277%" y="245" width="0.2551%" height="15" fill="rgb(241,98,45)" fg:x="4165544106" fg:w="30773626"/><text x="34.7777%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (30,773,626 samples, 0.26%)</title><rect x="34.5277%" y="229" width="0.2551%" height="15" fill="rgb(254,28,30)" fg:x="4165544106" fg:w="30773626"/><text x="34.7777%" y="239.50"></text></g><g><title>core::ptr::write (5,908,216 samples, 0.05%)</title><rect x="34.7339%" y="213" width="0.0490%" height="15" fill="rgb(241,142,54)" fg:x="4190409516" fg:w="5908216"/><text x="34.9839%" y="223.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (9,100,652 samples, 0.08%)</title><rect x="34.7828%" y="261" width="0.0754%" height="15" fill="rgb(222,85,15)" fg:x="4196317732" fg:w="9100652"/><text x="35.0328%" y="271.50"></text></g><g><title>liblevenshtein::transducer::state::State::is_empty (6,328,843 samples, 0.05%)</title><rect x="34.8583%" y="261" width="0.0525%" height="15" fill="rgb(210,85,47)" fg:x="4205418384" fg:w="6328843"/><text x="35.1083%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (6,328,843 samples, 0.05%)</title><rect x="34.8583%" y="245" width="0.0525%" height="15" fill="rgb(224,206,25)" fg:x="4205418384" fg:w="6328843"/><text x="35.1083%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6,328,843 samples, 0.05%)</title><rect x="34.8583%" y="229" width="0.0525%" height="15" fill="rgb(243,201,19)" fg:x="4205418384" fg:w="6328843"/><text x="35.1083%" y="239.50"></text></g><g><title>liblevenshtein::transducer::transition::characteristic_vector (30,153,870 samples, 0.25%)</title><rect x="34.9107%" y="261" width="0.2499%" height="15" fill="rgb(236,59,4)" fg:x="4211747227" fg:w="30153870"/><text x="35.1607%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6,003,674 samples, 0.05%)</title><rect x="35.1109%" y="245" width="0.0498%" height="15" fill="rgb(254,179,45)" fg:x="4235897423" fg:w="6003674"/><text x="35.3609%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6,003,674 samples, 0.05%)</title><rect x="35.1109%" y="229" width="0.0498%" height="15" fill="rgb(226,14,10)" fg:x="4235897423" fg:w="6003674"/><text x="35.3609%" y="239.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (1,199,496,876 samples, 9.94%)</title><rect x="26.6895%" y="293" width="9.9425%" height="15" fill="rgb(244,27,41)" fg:x="3219908226" fg:w="1199496876"/><text x="26.9395%" y="303.50">liblevenshtein..</text></g><g><title>liblevenshtein::transducer::transition::transition_state_pooled (583,245,127 samples, 4.83%)</title><rect x="31.7975%" y="277" width="4.8345%" height="15" fill="rgb(235,35,32)" fg:x="3836159975" fg:w="583245127"/><text x="32.0475%" y="287.50">liblev..</text></g><g><title>liblevenshtein::transducer::transition::transition_position (177,504,005 samples, 1.47%)</title><rect x="35.1607%" y="261" width="1.4713%" height="15" fill="rgb(218,68,31)" fg:x="4241901097" fg:w="177504005"/><text x="35.4107%" y="271.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_standard (99,777,183 samples, 0.83%)</title><rect x="35.8049%" y="245" width="0.8270%" height="15" fill="rgb(207,120,37)" fg:x="4319627919" fg:w="99777183"/><text x="36.0549%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (18,362,421 samples, 0.15%)</title><rect x="36.4798%" y="229" width="0.1522%" height="15" fill="rgb(227,98,0)" fg:x="4401042681" fg:w="18362421"/><text x="36.7298%" y="239.50"></text></g><g><title>core::ptr::write (5,700,515 samples, 0.05%)</title><rect x="36.5847%" y="213" width="0.0473%" height="15" fill="rgb(207,7,3)" fg:x="4413704587" fg:w="5700515"/><text x="36.8347%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21,181,722 samples, 0.18%)</title><rect x="36.6320%" y="229" width="0.1756%" height="15" fill="rgb(206,98,19)" fg:x="4419405102" fg:w="21181722"/><text x="36.8820%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21,181,722 samples, 0.18%)</title><rect x="36.6320%" y="213" width="0.1756%" height="15" fill="rgb(217,5,26)" fg:x="4419405102" fg:w="21181722"/><text x="36.8820%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (21,181,722 samples, 0.18%)</title><rect x="36.6320%" y="197" width="0.1756%" height="15" fill="rgb(235,190,38)" fg:x="4419405102" fg:w="21181722"/><text x="36.8820%" y="207.50"></text></g><g><title>liblevenshtein::transducer::state::State::infer_distance::{{closure}} (21,181,722 samples, 0.18%)</title><rect x="36.6320%" y="181" width="0.1756%" height="15" fill="rgb(247,86,24)" fg:x="4419405102" fg:w="21181722"/><text x="36.8820%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (15,060,091 samples, 0.12%)</title><rect x="36.6827%" y="165" width="0.1248%" height="15" fill="rgb(205,101,16)" fg:x="4425526733" fg:w="15060091"/><text x="36.9327%" y="175.50"></text></g><g><title>&lt;liblevenshtein::transducer::query::QueryIterator&lt;N&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,576,076,961 samples, 13.06%)</title><rect x="23.7672%" y="325" width="13.0639%" height="15" fill="rgb(246,168,33)" fg:x="2867359029" fg:w="1576076961"/><text x="24.0172%" y="335.50">&lt;liblevenshtein::tra..</text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::advance (1,573,225,284 samples, 13.04%)</title><rect x="23.7909%" y="309" width="13.0403%" height="15" fill="rgb(231,114,1)" fg:x="2870210706" fg:w="1573225284"/><text x="24.0409%" y="319.50">liblevenshtein::tran..</text></g><g><title>liblevenshtein::transducer::state::State::infer_distance (24,030,888 samples, 0.20%)</title><rect x="36.6320%" y="293" width="0.1992%" height="15" fill="rgb(207,184,53)" fg:x="4419405102" fg:w="24030888"/><text x="36.8820%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (24,030,888 samples, 0.20%)</title><rect x="36.6320%" y="277" width="0.1992%" height="15" fill="rgb(224,95,51)" fg:x="4419405102" fg:w="24030888"/><text x="36.8820%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (24,030,888 samples, 0.20%)</title><rect x="36.6320%" y="261" width="0.1992%" height="15" fill="rgb(212,188,45)" fg:x="4419405102" fg:w="24030888"/><text x="36.8820%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (24,030,888 samples, 0.20%)</title><rect x="36.6320%" y="245" width="0.1992%" height="15" fill="rgb(223,154,38)" fg:x="4419405102" fg:w="24030888"/><text x="36.8820%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,849,166 samples, 0.02%)</title><rect x="36.8075%" y="229" width="0.0236%" height="15" fill="rgb(251,22,52)" fg:x="4440586824" fg:w="2849166"/><text x="37.0575%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,849,166 samples, 0.02%)</title><rect x="36.8075%" y="213" width="0.0236%" height="15" fill="rgb(229,209,22)" fg:x="4440586824" fg:w="2849166"/><text x="37.0575%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,849,166 samples, 0.02%)</title><rect x="36.8075%" y="197" width="0.0236%" height="15" fill="rgb(234,138,34)" fg:x="4440586824" fg:w="2849166"/><text x="37.0575%" y="207.50"></text></g><g><title>liblevenshtein::transducer::state::State::infer_distance::{{closure}} (2,849,166 samples, 0.02%)</title><rect x="36.8075%" y="181" width="0.0236%" height="15" fill="rgb(212,95,11)" fg:x="4440586824" fg:w="2849166"/><text x="37.0575%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (2,849,166 samples, 0.02%)</title><rect x="36.8075%" y="165" width="0.0236%" height="15" fill="rgb(240,179,47)" fg:x="4440586824" fg:w="2849166"/><text x="37.0575%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (2,868,734 samples, 0.02%)</title><rect x="37.6462%" y="293" width="0.0238%" height="15" fill="rgb(240,163,11)" fg:x="4541763319" fg:w="2868734"/><text x="37.8962%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (2,868,734 samples, 0.02%)</title><rect x="37.6462%" y="277" width="0.0238%" height="15" fill="rgb(236,37,12)" fg:x="4541763319" fg:w="2868734"/><text x="37.8962%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,868,734 samples, 0.02%)</title><rect x="37.6462%" y="261" width="0.0238%" height="15" fill="rgb(232,164,16)" fg:x="4541763319" fg:w="2868734"/><text x="37.8962%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,868,734 samples, 0.02%)</title><rect x="37.6462%" y="245" width="0.0238%" height="15" fill="rgb(244,205,15)" fg:x="4541763319" fg:w="2868734"/><text x="37.8962%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (2,868,734 samples, 0.02%)</title><rect x="37.6462%" y="229" width="0.0238%" height="15" fill="rgb(223,117,47)" fg:x="4541763319" fg:w="2868734"/><text x="37.8962%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (2,868,734 samples, 0.02%)</title><rect x="37.6462%" y="213" width="0.0238%" height="15" fill="rgb(244,107,35)" fg:x="4541763319" fg:w="2868734"/><text x="37.8962%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,868,734 samples, 0.02%)</title><rect x="37.6462%" y="197" width="0.0238%" height="15" fill="rgb(205,140,8)" fg:x="4541763319" fg:w="2868734"/><text x="37.8962%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="293" width="0.0255%" height="15" fill="rgb(228,84,46)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="277" width="0.0255%" height="15" fill="rgb(254,188,9)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="261" width="0.0255%" height="15" fill="rgb(206,112,54)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="245" width="0.0255%" height="15" fill="rgb(216,84,49)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="229" width="0.0255%" height="15" fill="rgb(214,194,35)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="213" width="0.0255%" height="15" fill="rgb(249,28,3)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="197" width="0.0255%" height="15" fill="rgb(222,56,52)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="181" width="0.0255%" height="15" fill="rgb(245,217,50)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,081,633 samples, 0.03%)</title><rect x="37.6700%" y="165" width="0.0255%" height="15" fill="rgb(213,201,24)" fg:x="4544632053" fg:w="3081633"/><text x="37.9200%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (8,918,815 samples, 0.07%)</title><rect x="37.6462%" y="309" width="0.0739%" height="15" fill="rgb(248,116,28)" fg:x="4541763319" fg:w="8918815"/><text x="37.8962%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="293" width="0.0246%" height="15" fill="rgb(219,72,43)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="277" width="0.0246%" height="15" fill="rgb(209,138,14)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="261" width="0.0246%" height="15" fill="rgb(222,18,33)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="245" width="0.0246%" height="15" fill="rgb(213,199,7)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="229" width="0.0246%" height="15" fill="rgb(250,110,10)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="213" width="0.0246%" height="15" fill="rgb(248,123,6)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="197" width="0.0246%" height="15" fill="rgb(206,91,31)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="181" width="0.0246%" height="15" fill="rgb(211,154,13)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,968,448 samples, 0.02%)</title><rect x="37.6955%" y="165" width="0.0246%" height="15" fill="rgb(225,148,7)" fg:x="4547713686" fg:w="2968448"/><text x="37.9455%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="309" width="0.0252%" height="15" fill="rgb(220,160,43)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="293" width="0.0252%" height="15" fill="rgb(213,52,39)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="277" width="0.0252%" height="15" fill="rgb(243,137,7)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="261" width="0.0252%" height="15" fill="rgb(230,79,13)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="245" width="0.0252%" height="15" fill="rgb(247,105,23)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="229" width="0.0252%" height="15" fill="rgb(223,179,41)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="213" width="0.0252%" height="15" fill="rgb(218,9,34)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="223.50"></text></g><g><title>__rustc::__rdl_dealloc (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="197" width="0.0252%" height="15" fill="rgb(222,106,8)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,045,625 samples, 0.03%)</title><rect x="37.7201%" y="181" width="0.0252%" height="15" fill="rgb(211,220,0)" fg:x="4550682134" fg:w="3045625"/><text x="37.9701%" y="191.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (3,007,545 samples, 0.02%)</title><rect x="37.7454%" y="293" width="0.0249%" height="15" fill="rgb(229,52,16)" fg:x="4553727759" fg:w="3007545"/><text x="37.9954%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,007,545 samples, 0.02%)</title><rect x="37.7454%" y="277" width="0.0249%" height="15" fill="rgb(212,155,18)" fg:x="4553727759" fg:w="3007545"/><text x="37.9954%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,007,545 samples, 0.02%)</title><rect x="37.7454%" y="261" width="0.0249%" height="15" fill="rgb(242,21,14)" fg:x="4553727759" fg:w="3007545"/><text x="37.9954%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,007,545 samples, 0.02%)</title><rect x="37.7454%" y="245" width="0.0249%" height="15" fill="rgb(222,19,48)" fg:x="4553727759" fg:w="3007545"/><text x="37.9954%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,007,545 samples, 0.02%)</title><rect x="37.7454%" y="229" width="0.0249%" height="15" fill="rgb(232,45,27)" fg:x="4553727759" fg:w="3007545"/><text x="37.9954%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,007,545 samples, 0.02%)</title><rect x="37.7454%" y="213" width="0.0249%" height="15" fill="rgb(249,103,42)" fg:x="4553727759" fg:w="3007545"/><text x="37.9954%" y="223.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (12,547,768 samples, 0.10%)</title><rect x="37.7454%" y="309" width="0.1040%" height="15" fill="rgb(246,81,33)" fg:x="4553727759" fg:w="12547768"/><text x="37.9954%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9,540,223 samples, 0.08%)</title><rect x="37.7703%" y="293" width="0.0791%" height="15" fill="rgb(252,33,42)" fg:x="4556735304" fg:w="9540223"/><text x="38.0203%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (9,540,223 samples, 0.08%)</title><rect x="37.7703%" y="277" width="0.0791%" height="15" fill="rgb(209,212,41)" fg:x="4556735304" fg:w="9540223"/><text x="38.0203%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,540,223 samples, 0.08%)</title><rect x="37.7703%" y="261" width="0.0791%" height="15" fill="rgb(207,154,6)" fg:x="4556735304" fg:w="9540223"/><text x="38.0203%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,540,223 samples, 0.08%)</title><rect x="37.7703%" y="245" width="0.0791%" height="15" fill="rgb(223,64,47)" fg:x="4556735304" fg:w="9540223"/><text x="38.0203%" y="255.50"></text></g><g><title>alloc::alloc::alloc (9,540,223 samples, 0.08%)</title><rect x="37.7703%" y="229" width="0.0791%" height="15" fill="rgb(211,161,38)" fg:x="4556735304" fg:w="9540223"/><text x="38.0203%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (9,540,223 samples, 0.08%)</title><rect x="37.7703%" y="213" width="0.0791%" height="15" fill="rgb(219,138,40)" fg:x="4556735304" fg:w="9540223"/><text x="38.0203%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9,540,223 samples, 0.08%)</title><rect x="37.7703%" y="197" width="0.0791%" height="15" fill="rgb(241,228,46)" fg:x="4556735304" fg:w="9540223"/><text x="38.0203%" y="207.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (3,405,511 samples, 0.03%)</title><rect x="37.8494%" y="245" width="0.0282%" height="15" fill="rgb(223,209,38)" fg:x="4566275527" fg:w="3405511"/><text x="38.0994%" y="255.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (3,405,511 samples, 0.03%)</title><rect x="37.8494%" y="229" width="0.0282%" height="15" fill="rgb(236,164,45)" fg:x="4566275527" fg:w="3405511"/><text x="38.0994%" y="239.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (3,405,511 samples, 0.03%)</title><rect x="37.8494%" y="213" width="0.0282%" height="15" fill="rgb(231,15,5)" fg:x="4566275527" fg:w="3405511"/><text x="38.0994%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,437,695 samples, 0.03%)</title><rect x="37.8776%" y="197" width="0.0285%" height="15" fill="rgb(252,35,15)" fg:x="4569681038" fg:w="3437695"/><text x="38.1276%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,437,695 samples, 0.03%)</title><rect x="37.8776%" y="181" width="0.0285%" height="15" fill="rgb(248,181,18)" fg:x="4569681038" fg:w="3437695"/><text x="38.1276%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3,437,695 samples, 0.03%)</title><rect x="37.8776%" y="165" width="0.0285%" height="15" fill="rgb(233,39,42)" fg:x="4569681038" fg:w="3437695"/><text x="38.1276%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,437,695 samples, 0.03%)</title><rect x="37.8776%" y="149" width="0.0285%" height="15" fill="rgb(238,110,33)" fg:x="4569681038" fg:w="3437695"/><text x="38.1276%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,437,695 samples, 0.03%)</title><rect x="37.8776%" y="133" width="0.0285%" height="15" fill="rgb(233,195,10)" fg:x="4569681038" fg:w="3437695"/><text x="38.1276%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,437,695 samples, 0.03%)</title><rect x="37.8776%" y="117" width="0.0285%" height="15" fill="rgb(254,105,3)" fg:x="4569681038" fg:w="3437695"/><text x="38.1276%" y="127.50"></text></g><g><title>[libc.so.6] (131,819,260 samples, 1.09%)</title><rect x="36.8395%" y="325" width="1.0926%" height="15" fill="rgb(221,225,9)" fg:x="4444438998" fg:w="131819260"/><text x="37.0895%" y="335.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (9,982,731 samples, 0.08%)</title><rect x="37.8494%" y="309" width="0.0827%" height="15" fill="rgb(224,227,45)" fg:x="4566275527" fg:w="9982731"/><text x="38.0994%" y="319.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (9,982,731 samples, 0.08%)</title><rect x="37.8494%" y="293" width="0.0827%" height="15" fill="rgb(229,198,43)" fg:x="4566275527" fg:w="9982731"/><text x="38.0994%" y="303.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (9,982,731 samples, 0.08%)</title><rect x="37.8494%" y="277" width="0.0827%" height="15" fill="rgb(206,209,35)" fg:x="4566275527" fg:w="9982731"/><text x="38.0994%" y="287.50"></text></g><g><title>pathmap::zipper::node_along_path (9,982,731 samples, 0.08%)</title><rect x="37.8494%" y="261" width="0.0827%" height="15" fill="rgb(245,195,53)" fg:x="4566275527" fg:w="9982731"/><text x="38.0994%" y="271.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (6,577,220 samples, 0.05%)</title><rect x="37.8776%" y="245" width="0.0545%" height="15" fill="rgb(240,92,26)" fg:x="4569681038" fg:w="6577220"/><text x="38.1276%" y="255.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (6,577,220 samples, 0.05%)</title><rect x="37.8776%" y="229" width="0.0545%" height="15" fill="rgb(207,40,23)" fg:x="4569681038" fg:w="6577220"/><text x="38.1276%" y="239.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (6,577,220 samples, 0.05%)</title><rect x="37.8776%" y="213" width="0.0545%" height="15" fill="rgb(223,111,35)" fg:x="4569681038" fg:w="6577220"/><text x="38.1276%" y="223.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (3,139,525 samples, 0.03%)</title><rect x="37.9061%" y="197" width="0.0260%" height="15" fill="rgb(229,147,28)" fg:x="4573118733" fg:w="3139525"/><text x="38.1561%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,037,945 samples, 0.05%)</title><rect x="38.2191%" y="293" width="0.0500%" height="15" fill="rgb(211,29,28)" fg:x="4610881225" fg:w="6037945"/><text x="38.4691%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6,037,945 samples, 0.05%)</title><rect x="38.2191%" y="277" width="0.0500%" height="15" fill="rgb(228,72,33)" fg:x="4610881225" fg:w="6037945"/><text x="38.4691%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (6,037,945 samples, 0.05%)</title><rect x="38.2191%" y="261" width="0.0500%" height="15" fill="rgb(205,214,31)" fg:x="4610881225" fg:w="6037945"/><text x="38.4691%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2,971,545 samples, 0.02%)</title><rect x="38.2691%" y="293" width="0.0246%" height="15" fill="rgb(224,111,15)" fg:x="4616919170" fg:w="2971545"/><text x="38.5191%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2,971,545 samples, 0.02%)</title><rect x="38.2691%" y="277" width="0.0246%" height="15" fill="rgb(253,21,26)" fg:x="4616919170" fg:w="2971545"/><text x="38.5191%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2,971,545 samples, 0.02%)</title><rect x="38.2691%" y="261" width="0.0246%" height="15" fill="rgb(245,139,43)" fg:x="4616919170" fg:w="2971545"/><text x="38.5191%" y="271.50"></text></g><g><title>[libc.so.6] (26,783,109 samples, 0.22%)</title><rect x="38.3181%" y="101" width="0.2220%" height="15" fill="rgb(252,170,7)" fg:x="4622830965" fg:w="26783109"/><text x="38.5681%" y="111.50"></text></g><g><title>[libc.so.6] (23,707,248 samples, 0.20%)</title><rect x="38.3436%" y="85" width="0.1965%" height="15" fill="rgb(231,118,14)" fg:x="4625906826" fg:w="23707248"/><text x="38.5936%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="245" width="0.4525%" height="15" fill="rgb(238,83,0)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="229" width="0.4525%" height="15" fill="rgb(221,39,39)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="213" width="0.4525%" height="15" fill="rgb(222,119,46)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="197" width="0.4525%" height="15" fill="rgb(222,165,49)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="181" width="0.4525%" height="15" fill="rgb(219,113,52)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="165" width="0.4525%" height="15" fill="rgb(214,7,15)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="175.50"></text></g><g><title>alloc::alloc::alloc (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="149" width="0.4525%" height="15" fill="rgb(235,32,4)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="133" width="0.4525%" height="15" fill="rgb(238,90,54)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (54,590,704 samples, 0.45%)</title><rect x="38.2938%" y="117" width="0.4525%" height="15" fill="rgb(213,208,19)" fg:x="4619890715" fg:w="54590704"/><text x="38.5438%" y="127.50"></text></g><g><title>malloc (24,867,345 samples, 0.21%)</title><rect x="38.5402%" y="101" width="0.2061%" height="15" fill="rgb(233,156,4)" fg:x="4649614074" fg:w="24867345"/><text x="38.7902%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (64,119,615 samples, 0.53%)</title><rect x="38.2938%" y="293" width="0.5315%" height="15" fill="rgb(207,194,5)" fg:x="4619890715" fg:w="64119615"/><text x="38.5438%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (64,119,615 samples, 0.53%)</title><rect x="38.2938%" y="277" width="0.5315%" height="15" fill="rgb(206,111,30)" fg:x="4619890715" fg:w="64119615"/><text x="38.5438%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (64,119,615 samples, 0.53%)</title><rect x="38.2938%" y="261" width="0.5315%" height="15" fill="rgb(243,70,54)" fg:x="4619890715" fg:w="64119615"/><text x="38.5438%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9,528,911 samples, 0.08%)</title><rect x="38.7463%" y="245" width="0.0790%" height="15" fill="rgb(242,28,8)" fg:x="4674481419" fg:w="9528911"/><text x="38.9963%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (9,528,911 samples, 0.08%)</title><rect x="38.7463%" y="229" width="0.0790%" height="15" fill="rgb(219,106,18)" fg:x="4674481419" fg:w="9528911"/><text x="38.9963%" y="239.50"></text></g><g><title>[libc.so.6] (3,186,730 samples, 0.03%)</title><rect x="38.7988%" y="213" width="0.0264%" height="15" fill="rgb(244,222,10)" fg:x="4680823600" fg:w="3186730"/><text x="39.0488%" y="223.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_contains_partial_key (5,827,200 samples, 0.05%)</title><rect x="38.8253%" y="261" width="0.0483%" height="15" fill="rgb(236,179,52)" fg:x="4684010330" fg:w="5827200"/><text x="39.0753%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,261,278 samples, 0.03%)</title><rect x="38.8736%" y="245" width="0.0270%" height="15" fill="rgb(213,23,39)" fg:x="4689837530" fg:w="3261278"/><text x="39.1236%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,261,278 samples, 0.03%)</title><rect x="38.8736%" y="229" width="0.0270%" height="15" fill="rgb(238,48,10)" fg:x="4689837530" fg:w="3261278"/><text x="39.1236%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,261,278 samples, 0.03%)</title><rect x="38.8736%" y="213" width="0.0270%" height="15" fill="rgb(251,196,23)" fg:x="4689837530" fg:w="3261278"/><text x="39.1236%" y="223.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (18,281,456 samples, 0.15%)</title><rect x="38.8253%" y="293" width="0.1515%" height="15" fill="rgb(250,152,24)" fg:x="4684010330" fg:w="18281456"/><text x="39.0753%" y="303.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (18,281,456 samples, 0.15%)</title><rect x="38.8253%" y="277" width="0.1515%" height="15" fill="rgb(209,150,17)" fg:x="4684010330" fg:w="18281456"/><text x="39.0753%" y="287.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (12,454,256 samples, 0.10%)</title><rect x="38.8736%" y="261" width="0.1032%" height="15" fill="rgb(234,202,34)" fg:x="4689837530" fg:w="12454256"/><text x="39.1236%" y="271.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (9,192,978 samples, 0.08%)</title><rect x="38.9006%" y="245" width="0.0762%" height="15" fill="rgb(253,148,53)" fg:x="4693098808" fg:w="9192978"/><text x="39.1506%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (9,192,978 samples, 0.08%)</title><rect x="38.9006%" y="229" width="0.0762%" height="15" fill="rgb(218,129,16)" fg:x="4693098808" fg:w="9192978"/><text x="39.1506%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8,878,522 samples, 0.07%)</title><rect x="39.0263%" y="197" width="0.0736%" height="15" fill="rgb(216,85,19)" fg:x="4708260651" fg:w="8878522"/><text x="39.2763%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8,878,522 samples, 0.07%)</title><rect x="39.0263%" y="181" width="0.0736%" height="15" fill="rgb(235,228,7)" fg:x="4708260651" fg:w="8878522"/><text x="39.2763%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (8,878,522 samples, 0.07%)</title><rect x="39.0263%" y="165" width="0.0736%" height="15" fill="rgb(245,175,0)" fg:x="4708260651" fg:w="8878522"/><text x="39.2763%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8,878,522 samples, 0.07%)</title><rect x="39.0263%" y="149" width="0.0736%" height="15" fill="rgb(208,168,36)" fg:x="4708260651" fg:w="8878522"/><text x="39.2763%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (11,727,128 samples, 0.10%)</title><rect x="39.0263%" y="245" width="0.0972%" height="15" fill="rgb(246,171,24)" fg:x="4708260651" fg:w="11727128"/><text x="39.2763%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11,727,128 samples, 0.10%)</title><rect x="39.0263%" y="229" width="0.0972%" height="15" fill="rgb(215,142,24)" fg:x="4708260651" fg:w="11727128"/><text x="39.2763%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11,727,128 samples, 0.10%)</title><rect x="39.0263%" y="213" width="0.0972%" height="15" fill="rgb(250,187,7)" fg:x="4708260651" fg:w="11727128"/><text x="39.2763%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,848,606 samples, 0.02%)</title><rect x="39.0999%" y="197" width="0.0236%" height="15" fill="rgb(228,66,33)" fg:x="4717139173" fg:w="2848606"/><text x="39.3499%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9,261,072 samples, 0.08%)</title><rect x="39.1235%" y="245" width="0.0768%" height="15" fill="rgb(234,215,21)" fg:x="4719987779" fg:w="9261072"/><text x="39.3735%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (9,261,072 samples, 0.08%)</title><rect x="39.1235%" y="229" width="0.0768%" height="15" fill="rgb(222,191,20)" fg:x="4719987779" fg:w="9261072"/><text x="39.3735%" y="239.50"></text></g><g><title>core::ptr::write (9,261,072 samples, 0.08%)</title><rect x="39.1235%" y="213" width="0.0768%" height="15" fill="rgb(245,79,54)" fg:x="4719987779" fg:w="9261072"/><text x="39.3735%" y="223.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (3,102,272 samples, 0.03%)</title><rect x="39.2002%" y="245" width="0.0257%" height="15" fill="rgb(240,10,37)" fg:x="4729248851" fg:w="3102272"/><text x="39.4502%" y="255.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (3,102,272 samples, 0.03%)</title><rect x="39.2002%" y="229" width="0.0257%" height="15" fill="rgb(214,192,32)" fg:x="4729248851" fg:w="3102272"/><text x="39.4502%" y="239.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (3,102,272 samples, 0.03%)</title><rect x="39.2002%" y="213" width="0.0257%" height="15" fill="rgb(209,36,54)" fg:x="4729248851" fg:w="3102272"/><text x="39.4502%" y="223.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (3,102,272 samples, 0.03%)</title><rect x="39.2002%" y="197" width="0.0257%" height="15" fill="rgb(220,10,11)" fg:x="4729248851" fg:w="3102272"/><text x="39.4502%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (12,130,703 samples, 0.10%)</title><rect x="39.2751%" y="213" width="0.1006%" height="15" fill="rgb(221,106,17)" fg:x="4738281330" fg:w="12130703"/><text x="39.5251%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (12,130,703 samples, 0.10%)</title><rect x="39.2751%" y="197" width="0.1006%" height="15" fill="rgb(251,142,44)" fg:x="4738281330" fg:w="12130703"/><text x="39.5251%" y="207.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (12,130,703 samples, 0.10%)</title><rect x="39.2751%" y="181" width="0.1006%" height="15" fill="rgb(238,13,15)" fg:x="4738281330" fg:w="12130703"/><text x="39.5251%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (12,130,703 samples, 0.10%)</title><rect x="39.2751%" y="165" width="0.1006%" height="15" fill="rgb(208,107,27)" fg:x="4738281330" fg:w="12130703"/><text x="39.5251%" y="175.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (9,072,885 samples, 0.08%)</title><rect x="39.3757%" y="197" width="0.0752%" height="15" fill="rgb(205,136,37)" fg:x="4750412033" fg:w="9072885"/><text x="39.6257%" y="207.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (9,072,885 samples, 0.08%)</title><rect x="39.3757%" y="181" width="0.0752%" height="15" fill="rgb(250,205,27)" fg:x="4750412033" fg:w="9072885"/><text x="39.6257%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (6,327,918 samples, 0.05%)</title><rect x="39.4509%" y="197" width="0.0525%" height="15" fill="rgb(210,80,43)" fg:x="4759484918" fg:w="6327918"/><text x="39.7009%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6,327,918 samples, 0.05%)</title><rect x="39.4509%" y="181" width="0.0525%" height="15" fill="rgb(247,160,36)" fg:x="4759484918" fg:w="6327918"/><text x="39.7009%" y="191.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (54,878,550 samples, 0.45%)</title><rect x="39.2499%" y="229" width="0.4549%" height="15" fill="rgb(234,13,49)" fg:x="4735245031" fg:w="54878550"/><text x="39.4999%" y="239.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (39,711,548 samples, 0.33%)</title><rect x="39.3757%" y="213" width="0.3292%" height="15" fill="rgb(234,122,0)" fg:x="4750412033" fg:w="39711548"/><text x="39.6257%" y="223.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (24,310,745 samples, 0.20%)</title><rect x="39.5033%" y="197" width="0.2015%" height="15" fill="rgb(207,146,38)" fg:x="4765812836" fg:w="24310745"/><text x="39.7533%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (3,179,176 samples, 0.03%)</title><rect x="39.6785%" y="181" width="0.0264%" height="15" fill="rgb(207,177,25)" fg:x="4786944405" fg:w="3179176"/><text x="39.9285%" y="191.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (60,541,353 samples, 0.50%)</title><rect x="39.2260%" y="245" width="0.5018%" height="15" fill="rgb(211,178,42)" fg:x="4732351123" fg:w="60541353"/><text x="39.4760%" y="255.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (2,768,895 samples, 0.02%)</title><rect x="39.7048%" y="229" width="0.0230%" height="15" fill="rgb(230,69,54)" fg:x="4790123581" fg:w="2768895"/><text x="39.9548%" y="239.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (2,768,895 samples, 0.02%)</title><rect x="39.7048%" y="213" width="0.0230%" height="15" fill="rgb(214,135,41)" fg:x="4790123581" fg:w="2768895"/><text x="39.9548%" y="223.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (2,768,895 samples, 0.02%)</title><rect x="39.7048%" y="197" width="0.0230%" height="15" fill="rgb(237,67,25)" fg:x="4790123581" fg:w="2768895"/><text x="39.9548%" y="207.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (102,953,946 samples, 0.85%)</title><rect x="38.9768%" y="293" width="0.8534%" height="15" fill="rgb(222,189,50)" fg:x="4702291786" fg:w="102953946"/><text x="39.2268%" y="303.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (102,953,946 samples, 0.85%)</title><rect x="38.9768%" y="277" width="0.8534%" height="15" fill="rgb(245,148,34)" fg:x="4702291786" fg:w="102953946"/><text x="39.2268%" y="287.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::descend_to_internal (102,953,946 samples, 0.85%)</title><rect x="38.9768%" y="261" width="0.8534%" height="15" fill="rgb(222,29,6)" fg:x="4702291786" fg:w="102953946"/><text x="39.2268%" y="271.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (12,353,256 samples, 0.10%)</title><rect x="39.7278%" y="245" width="0.1024%" height="15" fill="rgb(221,189,43)" fg:x="4792892476" fg:w="12353256"/><text x="39.9778%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (6,122,410 samples, 0.05%)</title><rect x="39.7794%" y="229" width="0.0507%" height="15" fill="rgb(207,36,27)" fg:x="4799123322" fg:w="6122410"/><text x="40.0294%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8,779,845 samples, 0.07%)</title><rect x="39.8302%" y="293" width="0.0728%" height="15" fill="rgb(217,90,24)" fg:x="4805245732" fg:w="8779845"/><text x="40.0802%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (8,779,845 samples, 0.07%)</title><rect x="39.8302%" y="277" width="0.0728%" height="15" fill="rgb(224,66,35)" fg:x="4805245732" fg:w="8779845"/><text x="40.0802%" y="287.50"></text></g><g><title>core::ptr::write (5,812,746 samples, 0.05%)</title><rect x="39.8548%" y="261" width="0.0482%" height="15" fill="rgb(221,13,50)" fg:x="4808212831" fg:w="5812746"/><text x="40.1048%" y="271.50"></text></g><g><title>core::mem::drop (15,899,877 samples, 0.13%)</title><rect x="39.9029%" y="293" width="0.1318%" height="15" fill="rgb(236,68,49)" fg:x="4814025577" fg:w="15899877"/><text x="40.1529%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt; (15,899,877 samples, 0.13%)</title><rect x="39.9029%" y="277" width="0.1318%" height="15" fill="rgb(229,146,28)" fg:x="4814025577" fg:w="15899877"/><text x="40.1529%" y="287.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15,899,877 samples, 0.13%)</title><rect x="39.9029%" y="261" width="0.1318%" height="15" fill="rgb(225,31,38)" fg:x="4814025577" fg:w="15899877"/><text x="40.1529%" y="271.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (15,899,877 samples, 0.13%)</title><rect x="39.9029%" y="245" width="0.1318%" height="15" fill="rgb(250,208,3)" fg:x="4814025577" fg:w="15899877"/><text x="40.1529%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (15,899,877 samples, 0.13%)</title><rect x="39.9029%" y="229" width="0.1318%" height="15" fill="rgb(246,54,23)" fg:x="4814025577" fg:w="15899877"/><text x="40.1529%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (15,899,877 samples, 0.13%)</title><rect x="39.9029%" y="213" width="0.1318%" height="15" fill="rgb(243,76,11)" fg:x="4814025577" fg:w="15899877"/><text x="40.1529%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (36,900,798 samples, 0.31%)</title><rect x="40.0347%" y="293" width="0.3059%" height="15" fill="rgb(245,21,50)" fg:x="4829925454" fg:w="36900798"/><text x="40.2847%" y="303.50"></text></g><g><title>cfree (27,330,470 samples, 0.23%)</title><rect x="40.1141%" y="277" width="0.2265%" height="15" fill="rgb(228,9,43)" fg:x="4839495782" fg:w="27330470"/><text x="40.3641%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (3,227,760 samples, 0.03%)</title><rect x="40.3406%" y="261" width="0.0268%" height="15" fill="rgb(208,100,47)" fg:x="4866826252" fg:w="3227760"/><text x="40.5906%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3,227,760 samples, 0.03%)</title><rect x="40.3406%" y="245" width="0.0268%" height="15" fill="rgb(232,26,8)" fg:x="4866826252" fg:w="3227760"/><text x="40.5906%" y="255.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (296,822,265 samples, 2.46%)</title><rect x="37.9321%" y="309" width="2.4603%" height="15" fill="rgb(216,166,38)" fg:x="4576258258" fg:w="296822265"/><text x="38.1821%" y="319.50">&lt;l..</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (6,254,271 samples, 0.05%)</title><rect x="40.3406%" y="293" width="0.0518%" height="15" fill="rgb(251,202,51)" fg:x="4866826252" fg:w="6254271"/><text x="40.5906%" y="303.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (6,254,271 samples, 0.05%)</title><rect x="40.3406%" y="277" width="0.0518%" height="15" fill="rgb(254,216,34)" fg:x="4866826252" fg:w="6254271"/><text x="40.5906%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (3,026,511 samples, 0.03%)</title><rect x="40.3674%" y="261" width="0.0251%" height="15" fill="rgb(251,32,27)" fg:x="4870054012" fg:w="3026511"/><text x="40.6174%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (3,026,511 samples, 0.03%)</title><rect x="40.3674%" y="245" width="0.0251%" height="15" fill="rgb(208,127,28)" fg:x="4870054012" fg:w="3026511"/><text x="40.6174%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,083,962 samples, 0.03%)</title><rect x="40.5161%" y="277" width="0.0256%" height="15" fill="rgb(224,137,22)" fg:x="4887997013" fg:w="3083962"/><text x="40.7661%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3,083,962 samples, 0.03%)</title><rect x="40.5161%" y="261" width="0.0256%" height="15" fill="rgb(254,70,32)" fg:x="4887997013" fg:w="3083962"/><text x="40.7661%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,083,962 samples, 0.03%)</title><rect x="40.5161%" y="245" width="0.0256%" height="15" fill="rgb(229,75,37)" fg:x="4887997013" fg:w="3083962"/><text x="40.7661%" y="255.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (24,263,088 samples, 0.20%)</title><rect x="40.3924%" y="309" width="0.2011%" height="15" fill="rgb(252,64,23)" fg:x="4873080523" fg:w="24263088"/><text x="40.6424%" y="319.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (18,261,141 samples, 0.15%)</title><rect x="40.4422%" y="293" width="0.1514%" height="15" fill="rgb(232,162,48)" fg:x="4879082470" fg:w="18261141"/><text x="40.6922%" y="303.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (6,262,636 samples, 0.05%)</title><rect x="40.5416%" y="277" width="0.0519%" height="15" fill="rgb(246,160,12)" fg:x="4891080975" fg:w="6262636"/><text x="40.7916%" y="287.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (6,262,636 samples, 0.05%)</title><rect x="40.5416%" y="261" width="0.0519%" height="15" fill="rgb(247,166,0)" fg:x="4891080975" fg:w="6262636"/><text x="40.7916%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (6,262,636 samples, 0.05%)</title><rect x="40.5416%" y="245" width="0.0519%" height="15" fill="rgb(249,219,21)" fg:x="4891080975" fg:w="6262636"/><text x="40.7916%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6,262,636 samples, 0.05%)</title><rect x="40.5416%" y="229" width="0.0519%" height="15" fill="rgb(205,209,3)" fg:x="4891080975" fg:w="6262636"/><text x="40.7916%" y="239.50"></text></g><g><title>[libc.so.6] (91,333,185 samples, 0.76%)</title><rect x="40.5936%" y="309" width="0.7571%" height="15" fill="rgb(243,44,1)" fg:x="4897343611" fg:w="91333185"/><text x="40.8436%" y="319.50"></text></g><g><title>[libc.so.6] (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="293" width="0.0235%" height="15" fill="rgb(206,159,16)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="303.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="277" width="0.0235%" height="15" fill="rgb(244,77,30)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="287.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="261" width="0.0235%" height="15" fill="rgb(218,69,12)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="271.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="245" width="0.0235%" height="15" fill="rgb(212,87,7)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="255.50"></text></g><g><title>pathmap::zipper::node_along_path (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="229" width="0.0235%" height="15" fill="rgb(245,114,25)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="239.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="213" width="0.0235%" height="15" fill="rgb(210,61,42)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="197" width="0.0235%" height="15" fill="rgb(211,52,33)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="207.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="181" width="0.0235%" height="15" fill="rgb(234,58,33)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="191.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="165" width="0.0235%" height="15" fill="rgb(220,115,36)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="175.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (2,840,074 samples, 0.02%)</title><rect x="41.3271%" y="149" width="0.0235%" height="15" fill="rgb(243,153,54)" fg:x="4985836722" fg:w="2840074"/><text x="41.5771%" y="159.50"></text></g><g><title>__rustc::__rust_realloc (9,037,375 samples, 0.07%)</title><rect x="41.3506%" y="309" width="0.0749%" height="15" fill="rgb(251,47,18)" fg:x="4988676796" fg:w="9037375"/><text x="41.6006%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (8,881,125 samples, 0.07%)</title><rect x="41.5247%" y="261" width="0.0736%" height="15" fill="rgb(242,102,42)" fg:x="5009678010" fg:w="8881125"/><text x="41.7747%" y="271.50"></text></g><g><title>core::intrinsics::unlikely (6,249,629 samples, 0.05%)</title><rect x="41.5983%" y="197" width="0.0518%" height="15" fill="rgb(234,31,38)" fg:x="5018559135" fg:w="6249629"/><text x="41.8483%" y="207.50"></text></g><g><title>alloc::raw_vec::layout_array (12,346,945 samples, 0.10%)</title><rect x="41.5983%" y="261" width="0.1023%" height="15" fill="rgb(221,117,51)" fg:x="5018559135" fg:w="12346945"/><text x="41.8483%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::repeat (12,346,945 samples, 0.10%)</title><rect x="41.5983%" y="245" width="0.1023%" height="15" fill="rgb(212,20,18)" fg:x="5018559135" fg:w="12346945"/><text x="41.8483%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (12,346,945 samples, 0.10%)</title><rect x="41.5983%" y="229" width="0.1023%" height="15" fill="rgb(245,133,36)" fg:x="5018559135" fg:w="12346945"/><text x="41.8483%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12,346,945 samples, 0.10%)</title><rect x="41.5983%" y="213" width="0.1023%" height="15" fill="rgb(212,6,19)" fg:x="5018559135" fg:w="12346945"/><text x="41.8483%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (6,097,316 samples, 0.05%)</title><rect x="41.6501%" y="197" width="0.0505%" height="15" fill="rgb(218,1,36)" fg:x="5024808764" fg:w="6097316"/><text x="41.9001%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (36,355,604 samples, 0.30%)</title><rect x="41.4255%" y="309" width="0.3013%" height="15" fill="rgb(246,84,54)" fg:x="4997714171" fg:w="36355604"/><text x="41.6755%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (33,690,049 samples, 0.28%)</title><rect x="41.4476%" y="293" width="0.2793%" height="15" fill="rgb(242,110,6)" fg:x="5000379726" fg:w="33690049"/><text x="41.6976%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (27,303,188 samples, 0.23%)</title><rect x="41.5006%" y="277" width="0.2263%" height="15" fill="rgb(214,47,5)" fg:x="5006766587" fg:w="27303188"/><text x="41.7506%" y="287.50"></text></g><g><title>core::cmp::max (3,163,695 samples, 0.03%)</title><rect x="41.7006%" y="261" width="0.0262%" height="15" fill="rgb(218,159,25)" fg:x="5030906080" fg:w="3163695"/><text x="41.9506%" y="271.50"></text></g><g><title>core::cmp::Ord::max (3,163,695 samples, 0.03%)</title><rect x="41.7006%" y="245" width="0.0262%" height="15" fill="rgb(215,211,28)" fg:x="5030906080" fg:w="3163695"/><text x="41.9506%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2,906,592 samples, 0.02%)</title><rect x="41.7789%" y="293" width="0.0241%" height="15" fill="rgb(238,59,32)" fg:x="5040342715" fg:w="2906592"/><text x="42.0289%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (33,238,584 samples, 0.28%)</title><rect x="41.7269%" y="309" width="0.2755%" height="15" fill="rgb(226,82,3)" fg:x="5034069775" fg:w="33238584"/><text x="41.9769%" y="319.50"></text></g><g><title>malloc (24,059,052 samples, 0.20%)</title><rect x="41.8030%" y="293" width="0.1994%" height="15" fill="rgb(240,164,32)" fg:x="5043249307" fg:w="24059052"/><text x="42.0530%" y="303.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (18,720,253 samples, 0.16%)</title><rect x="42.0024%" y="309" width="0.1552%" height="15" fill="rgb(232,46,7)" fg:x="5067308359" fg:w="18720253"/><text x="42.2524%" y="319.50"></text></g><g><title>cfree (6,362,083 samples, 0.05%)</title><rect x="42.1575%" y="309" width="0.0527%" height="15" fill="rgb(229,129,53)" fg:x="5086028612" fg:w="6362083"/><text x="42.4075%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,086,342 samples, 0.05%)</title><rect x="42.4583%" y="261" width="0.0504%" height="15" fill="rgb(234,188,29)" fg:x="5122306949" fg:w="6086342"/><text x="42.7083%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,086,342 samples, 0.05%)</title><rect x="42.4583%" y="245" width="0.0504%" height="15" fill="rgb(246,141,4)" fg:x="5122306949" fg:w="6086342"/><text x="42.7083%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (6,086,342 samples, 0.05%)</title><rect x="42.4583%" y="229" width="0.0504%" height="15" fill="rgb(229,23,39)" fg:x="5122306949" fg:w="6086342"/><text x="42.7083%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (6,086,342 samples, 0.05%)</title><rect x="42.4583%" y="213" width="0.0504%" height="15" fill="rgb(206,12,3)" fg:x="5122306949" fg:w="6086342"/><text x="42.7083%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,086,342 samples, 0.05%)</title><rect x="42.4583%" y="197" width="0.0504%" height="15" fill="rgb(252,226,20)" fg:x="5122306949" fg:w="6086342"/><text x="42.7083%" y="207.50"></text></g><g><title>[libc.so.6] (35,950,969 samples, 0.30%)</title><rect x="42.5087%" y="261" width="0.2980%" height="15" fill="rgb(216,123,35)" fg:x="5128393291" fg:w="35950969"/><text x="42.7587%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,393,936 samples, 0.03%)</title><rect x="42.8067%" y="261" width="0.0281%" height="15" fill="rgb(212,68,40)" fg:x="5164344260" fg:w="3393936"/><text x="43.0567%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (94,500,268 samples, 0.78%)</title><rect x="42.3338%" y="293" width="0.7833%" height="15" fill="rgb(254,125,32)" fg:x="5107293024" fg:w="94500268"/><text x="42.5838%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (82,348,102 samples, 0.68%)</title><rect x="42.4345%" y="277" width="0.6826%" height="15" fill="rgb(253,97,22)" fg:x="5119445190" fg:w="82348102"/><text x="42.6845%" y="287.50"></text></g><g><title>cfree (34,055,096 samples, 0.28%)</title><rect x="42.8348%" y="261" width="0.2823%" height="15" fill="rgb(241,101,14)" fg:x="5167738196" fg:w="34055096"/><text x="43.0848%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3,406,661 samples, 0.03%)</title><rect x="43.1918%" y="245" width="0.0282%" height="15" fill="rgb(238,103,29)" fg:x="5210805001" fg:w="3406661"/><text x="43.4418%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,406,661 samples, 0.03%)</title><rect x="43.1918%" y="229" width="0.0282%" height="15" fill="rgb(233,195,47)" fg:x="5210805001" fg:w="3406661"/><text x="43.4418%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (18,891,659 samples, 0.16%)</title><rect x="43.1417%" y="277" width="0.1566%" height="15" fill="rgb(246,218,30)" fg:x="5204763303" fg:w="18891659"/><text x="43.3917%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,891,659 samples, 0.16%)</title><rect x="43.1417%" y="261" width="0.1566%" height="15" fill="rgb(219,145,47)" fg:x="5204763303" fg:w="18891659"/><text x="43.3917%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9,443,300 samples, 0.08%)</title><rect x="43.2200%" y="245" width="0.0783%" height="15" fill="rgb(243,12,26)" fg:x="5214211662" fg:w="9443300"/><text x="43.4700%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (9,443,300 samples, 0.08%)</title><rect x="43.2200%" y="229" width="0.0783%" height="15" fill="rgb(214,87,16)" fg:x="5214211662" fg:w="9443300"/><text x="43.4700%" y="239.50"></text></g><g><title>[libc.so.6] (62,133,798 samples, 0.52%)</title><rect x="43.3484%" y="149" width="0.5150%" height="15" fill="rgb(208,99,42)" fg:x="5229693641" fg:w="62133798"/><text x="43.5984%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (161,123,518 samples, 1.34%)</title><rect x="43.2983%" y="213" width="1.3355%" height="15" fill="rgb(253,99,2)" fg:x="5223654962" fg:w="161123518"/><text x="43.5483%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (161,123,518 samples, 1.34%)</title><rect x="43.2983%" y="197" width="1.3355%" height="15" fill="rgb(220,168,23)" fg:x="5223654962" fg:w="161123518"/><text x="43.5483%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (161,123,518 samples, 1.34%)</title><rect x="43.2983%" y="181" width="1.3355%" height="15" fill="rgb(242,38,24)" fg:x="5223654962" fg:w="161123518"/><text x="43.5483%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (161,123,518 samples, 1.34%)</title><rect x="43.2983%" y="165" width="1.3355%" height="15" fill="rgb(225,182,9)" fg:x="5223654962" fg:w="161123518"/><text x="43.5483%" y="175.50"></text></g><g><title>cfree (92,951,041 samples, 0.77%)</title><rect x="43.8634%" y="149" width="0.7705%" height="15" fill="rgb(243,178,37)" fg:x="5291827439" fg:w="92951041"/><text x="44.1134%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (185,972,253 samples, 1.54%)</title><rect x="43.1171%" y="293" width="1.5415%" height="15" fill="rgb(232,139,19)" fg:x="5201793292" fg:w="185972253"/><text x="43.3671%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (164,110,583 samples, 1.36%)</title><rect x="43.2983%" y="277" width="1.3603%" height="15" fill="rgb(225,201,24)" fg:x="5223654962" fg:w="164110583"/><text x="43.5483%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (164,110,583 samples, 1.36%)</title><rect x="43.2983%" y="261" width="1.3603%" height="15" fill="rgb(221,47,46)" fg:x="5223654962" fg:w="164110583"/><text x="43.5483%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (164,110,583 samples, 1.36%)</title><rect x="43.2983%" y="245" width="1.3603%" height="15" fill="rgb(249,23,13)" fg:x="5223654962" fg:w="164110583"/><text x="43.5483%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (164,110,583 samples, 1.36%)</title><rect x="43.2983%" y="229" width="1.3603%" height="15" fill="rgb(219,9,5)" fg:x="5223654962" fg:w="164110583"/><text x="43.5483%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2,987,065 samples, 0.02%)</title><rect x="44.6339%" y="213" width="0.0248%" height="15" fill="rgb(254,171,16)" fg:x="5384778480" fg:w="2987065"/><text x="44.8839%" y="223.50"></text></g><g><title>[libc.so.6] (110,033,250 samples, 0.91%)</title><rect x="44.7349%" y="149" width="0.9121%" height="15" fill="rgb(230,171,20)" fg:x="5396964951" fg:w="110033250"/><text x="44.9849%" y="159.50"></text></g><g><title>[libc.so.6] (32,986,746 samples, 0.27%)</title><rect x="45.3735%" y="133" width="0.2734%" height="15" fill="rgb(210,71,41)" fg:x="5474011455" fg:w="32986746"/><text x="45.6235%" y="143.50"></text></g><g><title>[libc.so.6] (15,412,634 samples, 0.13%)</title><rect x="45.5192%" y="117" width="0.1278%" height="15" fill="rgb(206,173,20)" fg:x="5491585567" fg:w="15412634"/><text x="45.7692%" y="127.50"></text></g><g><title>cfree (136,234,165 samples, 1.13%)</title><rect x="45.6469%" y="149" width="1.1292%" height="15" fill="rgb(233,88,34)" fg:x="5506998201" fg:w="136234165"/><text x="45.8969%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (554,038,614 samples, 4.59%)</title><rect x="42.2103%" y="309" width="4.5924%" height="15" fill="rgb(223,209,46)" fg:x="5092390695" fg:w="554038614"/><text x="42.4603%" y="319.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="293" width="2.1440%" height="15" fill="rgb(250,43,18)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="277" width="2.1440%" height="15" fill="rgb(208,13,10)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="261" width="2.1440%" height="15" fill="rgb(212,200,36)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="271.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="245" width="2.1440%" height="15" fill="rgb(225,90,30)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="255.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="229" width="2.1440%" height="15" fill="rgb(236,182,39)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="239.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="213" width="2.1440%" height="15" fill="rgb(212,144,35)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="223.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="197" width="2.1440%" height="15" fill="rgb(228,63,44)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="207.50">a..</text></g><g><title>__rustc::__rdl_dealloc (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="181" width="2.1440%" height="15" fill="rgb(228,109,6)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="191.50">_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (258,663,764 samples, 2.14%)</title><rect x="44.6586%" y="165" width="2.1440%" height="15" fill="rgb(238,117,24)" fg:x="5387765545" fg:w="258663764"/><text x="44.9086%" y="175.50">s..</text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (3,196,943 samples, 0.03%)</title><rect x="46.7761%" y="149" width="0.0265%" height="15" fill="rgb(242,26,26)" fg:x="5643232366" fg:w="3196943"/><text x="47.0261%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="293" width="0.1307%" height="15" fill="rgb(221,92,48)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="277" width="0.1307%" height="15" fill="rgb(209,209,32)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="261" width="0.1307%" height="15" fill="rgb(221,70,22)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="245" width="0.1307%" height="15" fill="rgb(248,145,5)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="229" width="0.1307%" height="15" fill="rgb(226,116,26)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="213" width="0.1307%" height="15" fill="rgb(244,5,17)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="223.50"></text></g><g><title>__rustc::__rdl_dealloc (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="197" width="0.1307%" height="15" fill="rgb(252,159,33)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (15,763,594 samples, 0.13%)</title><rect x="46.9045%" y="181" width="0.1307%" height="15" fill="rgb(206,71,0)" fg:x="5658719769" fg:w="15763594"/><text x="47.1545%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17,916,313 samples, 0.15%)</title><rect x="47.0352%" y="229" width="0.1485%" height="15" fill="rgb(233,118,54)" fg:x="5674483363" fg:w="17916313"/><text x="47.2852%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (17,916,313 samples, 0.15%)</title><rect x="47.0352%" y="213" width="0.1485%" height="15" fill="rgb(234,83,48)" fg:x="5674483363" fg:w="17916313"/><text x="47.2852%" y="223.50"></text></g><g><title>__rustc::__rdl_dealloc (17,916,313 samples, 0.15%)</title><rect x="47.0352%" y="197" width="0.1485%" height="15" fill="rgb(228,3,54)" fg:x="5674483363" fg:w="17916313"/><text x="47.2852%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (17,916,313 samples, 0.15%)</title><rect x="47.0352%" y="181" width="0.1485%" height="15" fill="rgb(226,155,13)" fg:x="5674483363" fg:w="17916313"/><text x="47.2852%" y="191.50"></text></g><g><title>cfree (17,916,313 samples, 0.15%)</title><rect x="47.0352%" y="165" width="0.1485%" height="15" fill="rgb(241,28,37)" fg:x="5674483363" fg:w="17916313"/><text x="47.2852%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (55,333,302 samples, 0.46%)</title><rect x="46.8026%" y="309" width="0.4587%" height="15" fill="rgb(233,93,10)" fg:x="5646429309" fg:w="55333302"/><text x="47.0526%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (27,279,248 samples, 0.23%)</title><rect x="47.0352%" y="293" width="0.2261%" height="15" fill="rgb(225,113,19)" fg:x="5674483363" fg:w="27279248"/><text x="47.2852%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (27,279,248 samples, 0.23%)</title><rect x="47.0352%" y="277" width="0.2261%" height="15" fill="rgb(241,2,18)" fg:x="5674483363" fg:w="27279248"/><text x="47.2852%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27,279,248 samples, 0.23%)</title><rect x="47.0352%" y="261" width="0.2261%" height="15" fill="rgb(228,207,21)" fg:x="5674483363" fg:w="27279248"/><text x="47.2852%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (27,279,248 samples, 0.23%)</title><rect x="47.0352%" y="245" width="0.2261%" height="15" fill="rgb(213,211,35)" fg:x="5674483363" fg:w="27279248"/><text x="47.2852%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (9,362,935 samples, 0.08%)</title><rect x="47.1837%" y="229" width="0.0776%" height="15" fill="rgb(209,83,10)" fg:x="5692399676" fg:w="9362935"/><text x="47.4337%" y="239.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::is_used (2,985,641 samples, 0.02%)</title><rect x="47.4398%" y="165" width="0.0247%" height="15" fill="rgb(209,164,1)" fg:x="5723300474" fg:w="2985641"/><text x="47.6898%" y="175.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_branches_mask (15,718,163 samples, 0.13%)</title><rect x="47.3900%" y="213" width="0.1303%" height="15" fill="rgb(213,184,43)" fg:x="5717286803" fg:w="15718163"/><text x="47.6400%" y="223.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_branches_mask (9,704,492 samples, 0.08%)</title><rect x="47.4398%" y="197" width="0.0804%" height="15" fill="rgb(231,61,34)" fg:x="5723300474" fg:w="9704492"/><text x="47.6898%" y="207.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::get_both_keys (9,704,492 samples, 0.08%)</title><rect x="47.4398%" y="181" width="0.0804%" height="15" fill="rgb(235,75,3)" fg:x="5723300474" fg:w="9704492"/><text x="47.6898%" y="191.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (6,718,851 samples, 0.06%)</title><rect x="47.4646%" y="165" width="0.0557%" height="15" fill="rgb(220,106,47)" fg:x="5726286115" fg:w="6718851"/><text x="47.7146%" y="175.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (6,718,851 samples, 0.06%)</title><rect x="47.4646%" y="149" width="0.0557%" height="15" fill="rgb(210,196,33)" fg:x="5726286115" fg:w="6718851"/><text x="47.7146%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6,018,512 samples, 0.05%)</title><rect x="47.5203%" y="197" width="0.0499%" height="15" fill="rgb(229,154,42)" fg:x="5733004966" fg:w="6018512"/><text x="47.7703%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,018,512 samples, 0.05%)</title><rect x="47.5203%" y="181" width="0.0499%" height="15" fill="rgb(228,114,26)" fg:x="5733004966" fg:w="6018512"/><text x="47.7703%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,018,512 samples, 0.05%)</title><rect x="47.5203%" y="165" width="0.0499%" height="15" fill="rgb(208,144,1)" fg:x="5733004966" fg:w="6018512"/><text x="47.7703%" y="175.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (52,656,522 samples, 0.44%)</title><rect x="47.2613%" y="293" width="0.4365%" height="15" fill="rgb(239,112,37)" fg:x="5701762611" fg:w="52656522"/><text x="47.5113%" y="303.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (52,656,522 samples, 0.44%)</title><rect x="47.2613%" y="277" width="0.4365%" height="15" fill="rgb(210,96,50)" fg:x="5701762611" fg:w="52656522"/><text x="47.5113%" y="287.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (37,132,330 samples, 0.31%)</title><rect x="47.3900%" y="261" width="0.3078%" height="15" fill="rgb(222,178,2)" fg:x="5717286803" fg:w="37132330"/><text x="47.6400%" y="271.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (37,132,330 samples, 0.31%)</title><rect x="47.3900%" y="245" width="0.3078%" height="15" fill="rgb(226,74,18)" fg:x="5717286803" fg:w="37132330"/><text x="47.6400%" y="255.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (37,132,330 samples, 0.31%)</title><rect x="47.3900%" y="229" width="0.3078%" height="15" fill="rgb(225,67,54)" fg:x="5717286803" fg:w="37132330"/><text x="47.6400%" y="239.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (21,414,167 samples, 0.18%)</title><rect x="47.5203%" y="213" width="0.1775%" height="15" fill="rgb(251,92,32)" fg:x="5733004966" fg:w="21414167"/><text x="47.7703%" y="223.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (15,395,655 samples, 0.13%)</title><rect x="47.5701%" y="197" width="0.1276%" height="15" fill="rgb(228,149,22)" fg:x="5739023478" fg:w="15395655"/><text x="47.8201%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (12,108,346 samples, 0.10%)</title><rect x="47.5974%" y="181" width="0.1004%" height="15" fill="rgb(243,54,13)" fg:x="5742310787" fg:w="12108346"/><text x="47.8474%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,114,032 samples, 0.03%)</title><rect x="47.8788%" y="277" width="0.0258%" height="15" fill="rgb(243,180,28)" fg:x="5776258179" fg:w="3114032"/><text x="48.1288%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,114,032 samples, 0.03%)</title><rect x="47.8788%" y="261" width="0.0258%" height="15" fill="rgb(208,167,24)" fg:x="5776258179" fg:w="3114032"/><text x="48.1288%" y="271.50"></text></g><g><title>liblevenshtein::transducer::pool::StatePool::acquire (18,207,807 samples, 0.15%)</title><rect x="47.9046%" y="277" width="0.1509%" height="15" fill="rgb(245,73,45)" fg:x="5779372211" fg:w="18207807"/><text x="48.1546%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5,806,687 samples, 0.05%)</title><rect x="48.0074%" y="261" width="0.0481%" height="15" fill="rgb(237,203,48)" fg:x="5791773331" fg:w="5806687"/><text x="48.2574%" y="271.50"></text></g><g><title>liblevenshtein::transducer::state::State::positions (3,347,049 samples, 0.03%)</title><rect x="48.0555%" y="277" width="0.0277%" height="15" fill="rgb(211,197,16)" fg:x="5797580018" fg:w="3347049"/><text x="48.3055%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,347,049 samples, 0.03%)</title><rect x="48.0555%" y="261" width="0.0277%" height="15" fill="rgb(243,99,51)" fg:x="5797580018" fg:w="3347049"/><text x="48.3055%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,347,049 samples, 0.03%)</title><rect x="48.0555%" y="245" width="0.0277%" height="15" fill="rgb(215,123,29)" fg:x="5797580018" fg:w="3347049"/><text x="48.3055%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,079,343 samples, 0.12%)</title><rect x="48.4048%" y="245" width="0.1250%" height="15" fill="rgb(239,186,37)" fg:x="5839719286" fg:w="15079343"/><text x="48.6548%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (9,025,673 samples, 0.07%)</title><rect x="48.4550%" y="229" width="0.0748%" height="15" fill="rgb(252,136,39)" fg:x="5845772956" fg:w="9025673"/><text x="48.7050%" y="239.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (30,425,688 samples, 0.25%)</title><rect x="48.5298%" y="229" width="0.2522%" height="15" fill="rgb(223,213,32)" fg:x="5854798629" fg:w="30425688"/><text x="48.7798%" y="239.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (30,425,688 samples, 0.25%)</title><rect x="48.5298%" y="213" width="0.2522%" height="15" fill="rgb(233,115,5)" fg:x="5854798629" fg:w="30425688"/><text x="48.7798%" y="223.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39,572,307 samples, 0.33%)</title><rect x="48.5298%" y="245" width="0.3280%" height="15" fill="rgb(207,226,44)" fg:x="5854798629" fg:w="39572307"/><text x="48.7798%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9,146,619 samples, 0.08%)</title><rect x="48.7820%" y="229" width="0.0758%" height="15" fill="rgb(208,126,0)" fg:x="5885224317" fg:w="9146619"/><text x="49.0320%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9,146,619 samples, 0.08%)</title><rect x="48.7820%" y="213" width="0.0758%" height="15" fill="rgb(244,66,21)" fg:x="5885224317" fg:w="9146619"/><text x="49.0320%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[liblevenshtein::transducer::position::Position: 8]&gt;&gt; (6,785,050 samples, 0.06%)</title><rect x="48.8578%" y="245" width="0.0562%" height="15" fill="rgb(222,97,12)" fg:x="5894370936" fg:w="6785050"/><text x="49.1078%" y="255.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (6,785,050 samples, 0.06%)</title><rect x="48.8578%" y="229" width="0.0562%" height="15" fill="rgb(219,213,19)" fg:x="5894370936" fg:w="6785050"/><text x="49.1078%" y="239.50"></text></g><g><title>core::mem::drop (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="213" width="0.0285%" height="15" fill="rgb(252,169,30)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="197" width="0.0285%" height="15" fill="rgb(206,32,51)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="181" width="0.0285%" height="15" fill="rgb(250,172,42)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="165" width="0.0285%" height="15" fill="rgb(209,34,43)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="149" width="0.0285%" height="15" fill="rgb(223,11,35)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="133" width="0.0285%" height="15" fill="rgb(251,219,26)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="117" width="0.0285%" height="15" fill="rgb(231,119,3)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="127.50"></text></g><g><title>__rustc::__rdl_dealloc (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="101" width="0.0285%" height="15" fill="rgb(216,97,11)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="85" width="0.0285%" height="15" fill="rgb(223,59,9)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="95.50"></text></g><g><title>cfree (3,437,095 samples, 0.03%)</title><rect x="48.8856%" y="69" width="0.0285%" height="15" fill="rgb(233,93,31)" fg:x="5897718891" fg:w="3437095"/><text x="49.1356%" y="79.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (46,024,735 samples, 0.38%)</title><rect x="48.9140%" y="197" width="0.3815%" height="15" fill="rgb(239,81,33)" fg:x="5901155986" fg:w="46024735"/><text x="49.1640%" y="207.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::PartialEq&gt;::eq (46,024,735 samples, 0.38%)</title><rect x="48.9140%" y="181" width="0.3815%" height="15" fill="rgb(213,120,34)" fg:x="5901155986" fg:w="46024735"/><text x="49.1640%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (77,129,644 samples, 0.64%)</title><rect x="48.9140%" y="245" width="0.6393%" height="15" fill="rgb(243,49,53)" fg:x="5901155986" fg:w="77129644"/><text x="49.1640%" y="255.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (77,129,644 samples, 0.64%)</title><rect x="48.9140%" y="229" width="0.6393%" height="15" fill="rgb(247,216,33)" fg:x="5901155986" fg:w="77129644"/><text x="49.1640%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (77,129,644 samples, 0.64%)</title><rect x="48.9140%" y="213" width="0.6393%" height="15" fill="rgb(226,26,14)" fg:x="5901155986" fg:w="77129644"/><text x="49.1640%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,104,909 samples, 0.26%)</title><rect x="49.2955%" y="197" width="0.2578%" height="15" fill="rgb(215,49,53)" fg:x="5947180721" fg:w="31104909"/><text x="49.5455%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (24,746,155 samples, 0.21%)</title><rect x="49.3482%" y="181" width="0.2051%" height="15" fill="rgb(245,162,40)" fg:x="5953539475" fg:w="24746155"/><text x="49.5982%" y="191.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (3,393,738 samples, 0.03%)</title><rect x="49.5534%" y="245" width="0.0281%" height="15" fill="rgb(229,68,17)" fg:x="5978285630" fg:w="3393738"/><text x="49.8034%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (33,968,984 samples, 0.28%)</title><rect x="49.5815%" y="245" width="0.2816%" height="15" fill="rgb(213,182,10)" fg:x="5981679368" fg:w="33968984"/><text x="49.8315%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (33,968,984 samples, 0.28%)</title><rect x="49.5815%" y="229" width="0.2816%" height="15" fill="rgb(245,125,30)" fg:x="5981679368" fg:w="33968984"/><text x="49.8315%" y="239.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (12,564,407 samples, 0.10%)</title><rect x="49.7589%" y="213" width="0.1041%" height="15" fill="rgb(232,202,2)" fg:x="6003083945" fg:w="12564407"/><text x="50.0089%" y="223.50"></text></g><g><title>core::ptr::write (64,090,830 samples, 0.53%)</title><rect x="50.0882%" y="229" width="0.5312%" height="15" fill="rgb(237,140,51)" fg:x="6042804617" fg:w="64090830"/><text x="50.3382%" y="239.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (420,585,573 samples, 3.49%)</title><rect x="47.2613%" y="309" width="3.4862%" height="15" fill="rgb(236,157,25)" fg:x="5701762611" fg:w="420585573"/><text x="47.5113%" y="319.50">lib..</text></g><g><title>liblevenshtein::transducer::transition::transition_state_pooled (367,929,051 samples, 3.05%)</title><rect x="47.6978%" y="293" width="3.0497%" height="15" fill="rgb(219,209,0)" fg:x="5754419133" fg:w="367929051"/><text x="47.9478%" y="303.50">lib..</text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_into (321,421,117 samples, 2.66%)</title><rect x="48.0833%" y="277" width="2.6642%" height="15" fill="rgb(240,116,54)" fg:x="5800927067" fg:w="321421117"/><text x="48.3333%" y="287.50">li..</text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_mut (321,421,117 samples, 2.66%)</title><rect x="48.0833%" y="261" width="2.6642%" height="15" fill="rgb(216,10,36)" fg:x="5800927067" fg:w="321421117"/><text x="48.3333%" y="271.50">li..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (106,699,832 samples, 0.88%)</title><rect x="49.8631%" y="245" width="0.8844%" height="15" fill="rgb(222,72,44)" fg:x="6015648352" fg:w="106699832"/><text x="50.1131%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (15,452,737 samples, 0.13%)</title><rect x="50.6194%" y="229" width="0.1281%" height="15" fill="rgb(232,159,9)" fg:x="6106895447" fg:w="15452737"/><text x="50.8694%" y="239.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (9,205,266 samples, 0.08%)</title><rect x="50.6712%" y="213" width="0.0763%" height="15" fill="rgb(210,39,32)" fg:x="6113142918" fg:w="9205266"/><text x="50.9212%" y="223.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (33,374,820 samples, 0.28%)</title><rect x="50.8483%" y="293" width="0.2766%" height="15" fill="rgb(216,194,45)" fg:x="6134514260" fg:w="33374820"/><text x="51.0983%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (33,374,820 samples, 0.28%)</title><rect x="50.8483%" y="277" width="0.2766%" height="15" fill="rgb(218,18,35)" fg:x="6134514260" fg:w="33374820"/><text x="51.0983%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (33,374,820 samples, 0.28%)</title><rect x="50.8483%" y="261" width="0.2766%" height="15" fill="rgb(207,83,51)" fg:x="6134514260" fg:w="33374820"/><text x="51.0983%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (33,374,820 samples, 0.28%)</title><rect x="50.8483%" y="245" width="0.2766%" height="15" fill="rgb(225,63,43)" fg:x="6134514260" fg:w="33374820"/><text x="51.0983%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (33,374,820 samples, 0.28%)</title><rect x="50.8483%" y="229" width="0.2766%" height="15" fill="rgb(207,57,36)" fg:x="6134514260" fg:w="33374820"/><text x="51.0983%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (33,374,820 samples, 0.28%)</title><rect x="50.8483%" y="213" width="0.2766%" height="15" fill="rgb(216,99,33)" fg:x="6134514260" fg:w="33374820"/><text x="51.0983%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (33,374,820 samples, 0.28%)</title><rect x="50.8483%" y="197" width="0.2766%" height="15" fill="rgb(225,42,16)" fg:x="6134514260" fg:w="33374820"/><text x="51.0983%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (49,295,380 samples, 0.41%)</title><rect x="51.1250%" y="293" width="0.4086%" height="15" fill="rgb(220,201,45)" fg:x="6167889080" fg:w="49295380"/><text x="51.3750%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9,487,277 samples, 0.08%)</title><rect x="51.8907%" y="261" width="0.0786%" height="15" fill="rgb(225,33,4)" fg:x="6260270099" fg:w="9487277"/><text x="52.1407%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3,004,535 samples, 0.02%)</title><rect x="51.9693%" y="261" width="0.0249%" height="15" fill="rgb(224,33,50)" fg:x="6269757376" fg:w="3004535"/><text x="52.2193%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,004,535 samples, 0.02%)</title><rect x="51.9693%" y="245" width="0.0249%" height="15" fill="rgb(246,198,51)" fg:x="6269757376" fg:w="3004535"/><text x="52.2193%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,004,535 samples, 0.02%)</title><rect x="51.9693%" y="229" width="0.0249%" height="15" fill="rgb(205,22,4)" fg:x="6269757376" fg:w="3004535"/><text x="52.2193%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,004,535 samples, 0.02%)</title><rect x="51.9693%" y="213" width="0.0249%" height="15" fill="rgb(206,3,8)" fg:x="6269757376" fg:w="3004535"/><text x="52.2193%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (67,940,835 samples, 0.56%)</title><rect x="51.5336%" y="293" width="0.5632%" height="15" fill="rgb(251,23,15)" fg:x="6217184460" fg:w="67940835"/><text x="51.7836%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert_mut (67,940,835 samples, 0.56%)</title><rect x="51.5336%" y="277" width="0.5632%" height="15" fill="rgb(252,88,28)" fg:x="6217184460" fg:w="67940835"/><text x="51.7836%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12,363,384 samples, 0.10%)</title><rect x="51.9942%" y="261" width="0.1025%" height="15" fill="rgb(212,127,14)" fg:x="6272761911" fg:w="12363384"/><text x="52.2442%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (6,065,276 samples, 0.05%)</title><rect x="52.1454%" y="245" width="0.0503%" height="15" fill="rgb(247,145,37)" fg:x="6290995672" fg:w="6065276"/><text x="52.3954%" y="255.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert::{{closure}} (6,065,276 samples, 0.05%)</title><rect x="52.1454%" y="229" width="0.0503%" height="15" fill="rgb(209,117,53)" fg:x="6290995672" fg:w="6065276"/><text x="52.3954%" y="239.50"></text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (6,065,276 samples, 0.05%)</title><rect x="52.1454%" y="213" width="0.0503%" height="15" fill="rgb(212,90,42)" fg:x="6290995672" fg:w="6065276"/><text x="52.3954%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (17,764,308 samples, 0.15%)</title><rect x="52.0967%" y="293" width="0.1472%" height="15" fill="rgb(218,164,37)" fg:x="6285125295" fg:w="17764308"/><text x="52.3467%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (17,764,308 samples, 0.15%)</title><rect x="52.0967%" y="277" width="0.1472%" height="15" fill="rgb(246,65,34)" fg:x="6285125295" fg:w="17764308"/><text x="52.3467%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (17,764,308 samples, 0.15%)</title><rect x="52.0967%" y="261" width="0.1472%" height="15" fill="rgb(231,100,33)" fg:x="6285125295" fg:w="17764308"/><text x="52.3467%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5,828,655 samples, 0.05%)</title><rect x="52.1957%" y="245" width="0.0483%" height="15" fill="rgb(228,126,14)" fg:x="6297060948" fg:w="5828655"/><text x="52.4457%" y="255.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (6,064,198 samples, 0.05%)</title><rect x="52.4720%" y="261" width="0.0503%" height="15" fill="rgb(215,173,21)" fg:x="6330401169" fg:w="6064198"/><text x="52.7220%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search::{{closure}} (8,863,448 samples, 0.07%)</title><rect x="52.5223%" y="261" width="0.0735%" height="15" fill="rgb(210,6,40)" fg:x="6336465367" fg:w="8863448"/><text x="52.7723%" y="271.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::Ord&gt;::cmp (8,863,448 samples, 0.07%)</title><rect x="52.5223%" y="245" width="0.0735%" height="15" fill="rgb(212,48,18)" fg:x="6336465367" fg:w="8863448"/><text x="52.7723%" y="255.50"></text></g><g><title>liblevenshtein::transducer::position::Position::compare (8,863,448 samples, 0.07%)</title><rect x="52.5223%" y="229" width="0.0735%" height="15" fill="rgb(230,214,11)" fg:x="6336465367" fg:w="8863448"/><text x="52.7723%" y="239.50"></text></g><g><title>core::cmp::Ordering::then_with (3,040,145 samples, 0.03%)</title><rect x="52.5705%" y="213" width="0.0252%" height="15" fill="rgb(254,105,39)" fg:x="6342288670" fg:w="3040145"/><text x="52.8205%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (48,175,336 samples, 0.40%)</title><rect x="52.2440%" y="293" width="0.3993%" height="15" fill="rgb(245,158,5)" fg:x="6302889603" fg:w="48175336"/><text x="52.4940%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (48,175,336 samples, 0.40%)</title><rect x="52.2440%" y="277" width="0.3993%" height="15" fill="rgb(249,208,11)" fg:x="6302889603" fg:w="48175336"/><text x="52.4940%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (5,736,124 samples, 0.05%)</title><rect x="52.5957%" y="261" width="0.0475%" height="15" fill="rgb(210,39,28)" fg:x="6345328815" fg:w="5736124"/><text x="52.8457%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5,736,124 samples, 0.05%)</title><rect x="52.5957%" y="245" width="0.0475%" height="15" fill="rgb(211,56,53)" fg:x="6345328815" fg:w="5736124"/><text x="52.8457%" y="255.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (270,673,766 samples, 2.24%)</title><rect x="50.7475%" y="309" width="2.2436%" height="15" fill="rgb(226,201,30)" fg:x="6122348184" fg:w="270673766"/><text x="50.9975%" y="319.50">l..</text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (41,957,011 samples, 0.35%)</title><rect x="52.6433%" y="293" width="0.3478%" height="15" fill="rgb(239,101,34)" fg:x="6351064939" fg:w="41957011"/><text x="52.8933%" y="303.50"></text></g><g><title>malloc (12,491,980 samples, 0.10%)</title><rect x="52.9911%" y="309" width="0.1035%" height="15" fill="rgb(226,209,5)" fg:x="6393021950" fg:w="12491980"/><text x="53.2411%" y="319.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::ensure_root (12,272,461 samples, 0.10%)</title><rect x="53.4501%" y="293" width="0.1017%" height="15" fill="rgb(250,105,47)" fg:x="6448400153" fg:w="12272461"/><text x="53.7001%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3,237,104 samples, 0.03%)</title><rect x="53.5250%" y="277" width="0.0268%" height="15" fill="rgb(230,72,3)" fg:x="6457435510" fg:w="3237104"/><text x="53.7750%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,316,819 samples, 0.05%)</title><rect x="53.7529%" y="245" width="0.0524%" height="15" fill="rgb(232,218,39)" fg:x="6484929885" fg:w="6316819"/><text x="54.0029%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,316,819 samples, 0.05%)</title><rect x="53.7529%" y="229" width="0.0524%" height="15" fill="rgb(248,166,6)" fg:x="6484929885" fg:w="6316819"/><text x="54.0029%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6,316,819 samples, 0.05%)</title><rect x="53.7529%" y="213" width="0.0524%" height="15" fill="rgb(247,89,20)" fg:x="6484929885" fg:w="6316819"/><text x="54.0029%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6,316,819 samples, 0.05%)</title><rect x="53.7529%" y="197" width="0.0524%" height="15" fill="rgb(248,130,54)" fg:x="6484929885" fg:w="6316819"/><text x="54.0029%" y="207.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (6,316,819 samples, 0.05%)</title><rect x="53.7529%" y="181" width="0.0524%" height="15" fill="rgb(234,196,4)" fg:x="6484929885" fg:w="6316819"/><text x="54.0029%" y="191.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (9,469,586 samples, 0.08%)</title><rect x="54.4414%" y="149" width="0.0785%" height="15" fill="rgb(250,143,31)" fg:x="6567992710" fg:w="9469586"/><text x="54.6914%" y="159.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (92,832,159 samples, 0.77%)</title><rect x="53.8052%" y="245" width="0.7695%" height="15" fill="rgb(211,110,34)" fg:x="6491246704" fg:w="92832159"/><text x="54.0552%" y="255.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (92,832,159 samples, 0.77%)</title><rect x="53.8052%" y="229" width="0.7695%" height="15" fill="rgb(215,124,48)" fg:x="6491246704" fg:w="92832159"/><text x="54.0552%" y="239.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (83,878,587 samples, 0.70%)</title><rect x="53.8795%" y="213" width="0.6953%" height="15" fill="rgb(216,46,13)" fg:x="6500200276" fg:w="83878587"/><text x="54.1295%" y="223.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (58,912,139 samples, 0.49%)</title><rect x="54.0864%" y="197" width="0.4883%" height="15" fill="rgb(205,184,25)" fg:x="6525166724" fg:w="58912139"/><text x="54.3364%" y="207.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (39,891,032 samples, 0.33%)</title><rect x="54.2441%" y="181" width="0.3307%" height="15" fill="rgb(228,1,10)" fg:x="6544187831" fg:w="39891032"/><text x="54.4941%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::with_addr (16,086,153 samples, 0.13%)</title><rect x="54.4414%" y="165" width="0.1333%" height="15" fill="rgb(213,116,27)" fg:x="6567992710" fg:w="16086153"/><text x="54.6914%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_byte_offset (6,616,567 samples, 0.05%)</title><rect x="54.5199%" y="149" width="0.0548%" height="15" fill="rgb(241,95,50)" fg:x="6577462296" fg:w="6616567"/><text x="54.7699%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (6,616,567 samples, 0.05%)</title><rect x="54.5199%" y="133" width="0.0548%" height="15" fill="rgb(238,48,32)" fg:x="6577462296" fg:w="6616567"/><text x="54.7699%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (15,719,614 samples, 0.13%)</title><rect x="54.8569%" y="213" width="0.1303%" height="15" fill="rgb(235,113,49)" fg:x="6618121561" fg:w="15719614"/><text x="55.1069%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (12,702,385 samples, 0.11%)</title><rect x="54.8819%" y="197" width="0.1053%" height="15" fill="rgb(205,127,43)" fg:x="6621138790" fg:w="12702385"/><text x="55.1319%" y="207.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (12,702,385 samples, 0.11%)</title><rect x="54.8819%" y="181" width="0.1053%" height="15" fill="rgb(250,162,2)" fg:x="6621138790" fg:w="12702385"/><text x="55.1319%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (12,702,385 samples, 0.11%)</title><rect x="54.8819%" y="165" width="0.1053%" height="15" fill="rgb(220,13,41)" fg:x="6621138790" fg:w="12702385"/><text x="55.1319%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5,966,896 samples, 0.05%)</title><rect x="55.2109%" y="197" width="0.0495%" height="15" fill="rgb(249,221,25)" fg:x="6660825246" fg:w="5966896"/><text x="55.4609%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (5,966,896 samples, 0.05%)</title><rect x="55.2109%" y="181" width="0.0495%" height="15" fill="rgb(215,208,19)" fg:x="6660825246" fg:w="5966896"/><text x="55.4609%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5,966,896 samples, 0.05%)</title><rect x="55.2109%" y="165" width="0.0495%" height="15" fill="rgb(236,175,2)" fg:x="6660825246" fg:w="5966896"/><text x="55.4609%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,966,896 samples, 0.05%)</title><rect x="55.2109%" y="149" width="0.0495%" height="15" fill="rgb(241,52,2)" fg:x="6660825246" fg:w="5966896"/><text x="55.4609%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,966,896 samples, 0.05%)</title><rect x="55.2109%" y="133" width="0.0495%" height="15" fill="rgb(248,140,14)" fg:x="6660825246" fg:w="5966896"/><text x="55.4609%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,966,896 samples, 0.05%)</title><rect x="55.2109%" y="117" width="0.0495%" height="15" fill="rgb(253,22,42)" fg:x="6660825246" fg:w="5966896"/><text x="55.4609%" y="127.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (9,513,219 samples, 0.08%)</title><rect x="55.2603%" y="197" width="0.0789%" height="15" fill="rgb(234,61,47)" fg:x="6666792142" fg:w="9513219"/><text x="55.5103%" y="207.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (9,513,219 samples, 0.08%)</title><rect x="55.2603%" y="181" width="0.0789%" height="15" fill="rgb(208,226,15)" fg:x="6666792142" fg:w="9513219"/><text x="55.5103%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (5,906,335 samples, 0.05%)</title><rect x="55.3392%" y="197" width="0.0490%" height="15" fill="rgb(217,221,4)" fg:x="6676305361" fg:w="5906335"/><text x="55.5892%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5,906,335 samples, 0.05%)</title><rect x="55.3392%" y="181" width="0.0490%" height="15" fill="rgb(212,174,34)" fg:x="6676305361" fg:w="5906335"/><text x="55.5892%" y="191.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (97,242,718 samples, 0.81%)</title><rect x="54.8569%" y="229" width="0.8060%" height="15" fill="rgb(253,83,4)" fg:x="6618121561" fg:w="97242718"/><text x="55.1069%" y="239.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (81,523,104 samples, 0.68%)</title><rect x="54.9872%" y="213" width="0.6757%" height="15" fill="rgb(250,195,49)" fg:x="6633841175" fg:w="81523104"/><text x="55.2372%" y="223.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (33,152,583 samples, 0.27%)</title><rect x="55.3881%" y="197" width="0.2748%" height="15" fill="rgb(241,192,25)" fg:x="6682211696" fg:w="33152583"/><text x="55.6381%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (6,229,465 samples, 0.05%)</title><rect x="55.6113%" y="181" width="0.0516%" height="15" fill="rgb(208,124,10)" fg:x="6709134814" fg:w="6229465"/><text x="55.8613%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (64,583,623 samples, 0.54%)</title><rect x="55.7372%" y="213" width="0.5353%" height="15" fill="rgb(222,33,0)" fg:x="6724322406" fg:w="64583623"/><text x="55.9872%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (64,583,623 samples, 0.54%)</title><rect x="55.7372%" y="197" width="0.5353%" height="15" fill="rgb(234,209,28)" fg:x="6724322406" fg:w="64583623"/><text x="55.9872%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (64,583,623 samples, 0.54%)</title><rect x="55.7372%" y="181" width="0.5353%" height="15" fill="rgb(224,11,23)" fg:x="6724322406" fg:w="64583623"/><text x="55.9872%" y="191.50"></text></g><g><title>[libc.so.6] (33,252,872 samples, 0.28%)</title><rect x="55.9969%" y="165" width="0.2756%" height="15" fill="rgb(232,99,1)" fg:x="6755653157" fg:w="33252872"/><text x="56.2469%" y="175.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (213,851,805 samples, 1.77%)</title><rect x="54.5747%" y="245" width="1.7726%" height="15" fill="rgb(237,95,45)" fg:x="6584078863" fg:w="213851805"/><text x="54.8247%" y="255.50">p..</text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (82,566,389 samples, 0.68%)</title><rect x="55.6629%" y="229" width="0.6844%" height="15" fill="rgb(208,109,11)" fg:x="6715364279" fg:w="82566389"/><text x="55.9129%" y="239.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (9,024,639 samples, 0.07%)</title><rect x="56.2725%" y="213" width="0.0748%" height="15" fill="rgb(216,190,48)" fg:x="6788906029" fg:w="9024639"/><text x="56.5225%" y="223.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (9,024,639 samples, 0.07%)</title><rect x="56.2725%" y="197" width="0.0748%" height="15" fill="rgb(251,171,36)" fg:x="6788906029" fg:w="9024639"/><text x="56.5225%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,016,509 samples, 0.03%)</title><rect x="56.4458%" y="213" width="0.0250%" height="15" fill="rgb(230,62,22)" fg:x="6809817480" fg:w="3016509"/><text x="56.6958%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val::{{closure}} (3,016,509 samples, 0.03%)</title><rect x="56.4458%" y="197" width="0.0250%" height="15" fill="rgb(225,114,35)" fg:x="6809817480" fg:w="3016509"/><text x="56.6958%" y="207.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::val (3,016,509 samples, 0.03%)</title><rect x="56.4458%" y="181" width="0.0250%" height="15" fill="rgb(215,118,42)" fg:x="6809817480" fg:w="3016509"/><text x="56.6958%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,016,509 samples, 0.03%)</title><rect x="56.4458%" y="165" width="0.0250%" height="15" fill="rgb(243,119,21)" fg:x="6809817480" fg:w="3016509"/><text x="56.6958%" y="175.50"></text></g><g><title>pathmap::zipper::node_along_path (340,056,028 samples, 2.82%)</title><rect x="53.7281%" y="261" width="2.8187%" height="15" fill="rgb(252,177,53)" fg:x="6481936493" fg:w="340056028"/><text x="53.9781%" y="271.50">pa..</text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_val (24,061,853 samples, 0.20%)</title><rect x="56.3473%" y="245" width="0.1994%" height="15" fill="rgb(237,209,29)" fg:x="6797930668" fg:w="24061853"/><text x="56.5973%" y="255.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val (18,182,725 samples, 0.15%)</title><rect x="56.3960%" y="229" width="0.1507%" height="15" fill="rgb(212,65,23)" fg:x="6803809796" fg:w="18182725"/><text x="56.6460%" y="239.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (9,158,532 samples, 0.08%)</title><rect x="56.4708%" y="213" width="0.0759%" height="15" fill="rgb(230,222,46)" fg:x="6812833989" fg:w="9158532"/><text x="56.7208%" y="223.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (6,093,692 samples, 0.05%)</title><rect x="56.4963%" y="197" width="0.0505%" height="15" fill="rgb(215,135,32)" fg:x="6815898829" fg:w="6093692"/><text x="56.7463%" y="207.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (6,093,692 samples, 0.05%)</title><rect x="56.4963%" y="181" width="0.0505%" height="15" fill="rgb(246,101,22)" fg:x="6815898829" fg:w="6093692"/><text x="56.7463%" y="191.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperPathBuffer&gt;::prepare_buffers (3,142,567 samples, 0.03%)</title><rect x="56.7215%" y="245" width="0.0260%" height="15" fill="rgb(206,107,13)" fg:x="6843070624" fg:w="3142567"/><text x="56.9715%" y="255.50"></text></g><g><title>pathmap::zipper::SliceOrLen::len (24,128,059 samples, 0.20%)</title><rect x="56.7475%" y="245" width="0.2000%" height="15" fill="rgb(250,100,44)" fg:x="6846213191" fg:w="24128059"/><text x="56.9975%" y="255.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::make_static_path (60,561,433 samples, 0.50%)</title><rect x="56.5468%" y="261" width="0.5020%" height="15" fill="rgb(231,147,38)" fg:x="6821992521" fg:w="60561433"/><text x="56.7968%" y="271.50"></text></g><g><title>pathmap::zipper::SliceOrLen::new_owned (12,212,704 samples, 0.10%)</title><rect x="56.9475%" y="245" width="0.1012%" height="15" fill="rgb(229,8,40)" fg:x="6870341250" fg:w="12212704"/><text x="57.1975%" y="255.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (12,296,483 samples, 0.10%)</title><rect x="57.0488%" y="245" width="0.1019%" height="15" fill="rgb(221,135,30)" fg:x="6882553954" fg:w="12296483"/><text x="57.2988%" y="255.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (12,296,483 samples, 0.10%)</title><rect x="57.0488%" y="229" width="0.1019%" height="15" fill="rgb(249,193,18)" fg:x="6882553954" fg:w="12296483"/><text x="57.2988%" y="239.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (12,296,483 samples, 0.10%)</title><rect x="57.0488%" y="213" width="0.1019%" height="15" fill="rgb(209,133,39)" fg:x="6882553954" fg:w="12296483"/><text x="57.2988%" y="223.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (12,296,483 samples, 0.10%)</title><rect x="57.0488%" y="197" width="0.1019%" height="15" fill="rgb(232,100,14)" fg:x="6882553954" fg:w="12296483"/><text x="57.2988%" y="207.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (3,164,795 samples, 0.03%)</title><rect x="57.1244%" y="181" width="0.0262%" height="15" fill="rgb(224,185,1)" fg:x="6891685642" fg:w="3164795"/><text x="57.3744%" y="191.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (492,565,701 samples, 4.08%)</title><rect x="53.0946%" y="309" width="4.0828%" height="15" fill="rgb(223,139,8)" fg:x="6405513930" fg:w="492565701"/><text x="53.3446%" y="319.50">path..</text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (437,407,017 samples, 3.63%)</title><rect x="53.5518%" y="293" width="3.6256%" height="15" fill="rgb(232,213,38)" fg:x="6460672614" fg:w="437407017"/><text x="53.8018%" y="303.50">path..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (437,407,017 samples, 3.63%)</title><rect x="53.5518%" y="277" width="3.6256%" height="15" fill="rgb(207,94,22)" fg:x="6460672614" fg:w="437407017"/><text x="53.8018%" y="287.50">path..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (15,525,677 samples, 0.13%)</title><rect x="57.0488%" y="261" width="0.1287%" height="15" fill="rgb(219,183,54)" fg:x="6882553954" fg:w="15525677"/><text x="57.2988%" y="271.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (3,229,194 samples, 0.03%)</title><rect x="57.1507%" y="245" width="0.0268%" height="15" fill="rgb(216,185,54)" fg:x="6894850437" fg:w="3229194"/><text x="57.4007%" y="255.50"></text></g><g><title>[libc.so.6] (5,863,356 samples, 0.05%)</title><rect x="57.1774%" y="101" width="0.0486%" height="15" fill="rgb(254,217,39)" fg:x="6898079631" fg:w="5863356"/><text x="57.4274%" y="111.50"></text></g><g><title>profile::main (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="309" width="0.0971%" height="15" fill="rgb(240,178,23)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="293" width="0.0971%" height="15" fill="rgb(218,11,47)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="277" width="0.0971%" height="15" fill="rgb(218,51,51)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="261" width="0.0971%" height="15" fill="rgb(238,126,27)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="245" width="0.0971%" height="15" fill="rgb(249,202,22)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="229" width="0.0971%" height="15" fill="rgb(254,195,49)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="213" width="0.0971%" height="15" fill="rgb(208,123,14)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="197" width="0.0971%" height="15" fill="rgb(224,200,8)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="181" width="0.0971%" height="15" fill="rgb(217,61,36)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="165" width="0.0971%" height="15" fill="rgb(206,35,45)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="149" width="0.0971%" height="15" fill="rgb(217,65,33)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="159.50"></text></g><g><title>__rustc::__rdl_dealloc (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="133" width="0.0971%" height="15" fill="rgb(222,158,48)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11,714,158 samples, 0.10%)</title><rect x="57.1774%" y="117" width="0.0971%" height="15" fill="rgb(254,2,54)" fg:x="6898079631" fg:w="11714158"/><text x="57.4274%" y="127.50"></text></g><g><title>cfree (5,850,802 samples, 0.05%)</title><rect x="57.2260%" y="101" width="0.0485%" height="15" fill="rgb(250,143,38)" fg:x="6903942987" fg:w="5850802"/><text x="57.4760%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,220,338 samples, 0.03%)</title><rect x="57.2745%" y="293" width="0.0267%" height="15" fill="rgb(248,25,0)" fg:x="6909793789" fg:w="3220338"/><text x="57.5245%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3,220,338 samples, 0.03%)</title><rect x="57.2745%" y="277" width="0.0267%" height="15" fill="rgb(206,152,27)" fg:x="6909793789" fg:w="3220338"/><text x="57.5245%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_next_power_of_two (3,220,338 samples, 0.03%)</title><rect x="57.2745%" y="261" width="0.0267%" height="15" fill="rgb(240,77,30)" fg:x="6909793789" fg:w="3220338"/><text x="57.5245%" y="271.50"></text></g><g><title>alloc::alloc::alloc (6,219,473 samples, 0.05%)</title><rect x="57.3012%" y="277" width="0.0516%" height="15" fill="rgb(231,5,3)" fg:x="6913014127" fg:w="6219473"/><text x="57.5512%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (6,219,473 samples, 0.05%)</title><rect x="57.3012%" y="261" width="0.0516%" height="15" fill="rgb(207,226,32)" fg:x="6913014127" fg:w="6219473"/><text x="57.5512%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6,219,473 samples, 0.05%)</title><rect x="57.3012%" y="245" width="0.0516%" height="15" fill="rgb(222,207,47)" fg:x="6913014127" fg:w="6219473"/><text x="57.5512%" y="255.50"></text></g><g><title>malloc (6,219,473 samples, 0.05%)</title><rect x="57.3012%" y="229" width="0.0516%" height="15" fill="rgb(229,115,45)" fg:x="6913014127" fg:w="6219473"/><text x="57.5512%" y="239.50"></text></g><g><title>[unknown] (2,357,532,655 samples, 19.54%)</title><rect x="37.9321%" y="325" width="19.5413%" height="15" fill="rgb(224,191,6)" fg:x="4576258258" fg:w="2357532655"/><text x="38.1821%" y="335.50">[unknown]</text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (23,997,124 samples, 0.20%)</title><rect x="57.2745%" y="309" width="0.1989%" height="15" fill="rgb(230,227,24)" fg:x="6909793789" fg:w="23997124"/><text x="57.5245%" y="319.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_grow (20,776,786 samples, 0.17%)</title><rect x="57.3012%" y="293" width="0.1722%" height="15" fill="rgb(228,80,19)" fg:x="6913014127" fg:w="20776786"/><text x="57.5512%" y="303.50"></text></g><g><title>core::ptr::copy_nonoverlapping (14,557,313 samples, 0.12%)</title><rect x="57.3528%" y="277" width="0.1207%" height="15" fill="rgb(247,229,0)" fg:x="6919233600" fg:w="14557313"/><text x="57.6028%" y="287.50"></text></g><g><title>[libc.so.6] (14,557,313 samples, 0.12%)</title><rect x="57.3528%" y="261" width="0.1207%" height="15" fill="rgb(237,194,15)" fg:x="6919233600" fg:w="14557313"/><text x="57.6028%" y="271.50"></text></g><g><title>__openat64_2 (3,132,793 samples, 0.03%)</title><rect x="57.4734%" y="325" width="0.0260%" height="15" fill="rgb(219,203,20)" fg:x="6933790913" fg:w="3132793"/><text x="57.7234%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (3,132,793 samples, 0.03%)</title><rect x="57.4734%" y="309" width="0.0260%" height="15" fill="rgb(234,128,8)" fg:x="6933790913" fg:w="3132793"/><text x="57.7234%" y="319.50"></text></g><g><title>__rustc::__rust_realloc (5,903,309 samples, 0.05%)</title><rect x="57.4994%" y="325" width="0.0489%" height="15" fill="rgb(248,202,8)" fg:x="6936923706" fg:w="5903309"/><text x="57.7494%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5,673,204 samples, 0.05%)</title><rect x="57.7511%" y="277" width="0.0470%" height="15" fill="rgb(206,104,37)" fg:x="6967290099" fg:w="5673204"/><text x="58.0011%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (6,022,828 samples, 0.05%)</title><rect x="57.7981%" y="277" width="0.0499%" height="15" fill="rgb(223,8,27)" fg:x="6972963303" fg:w="6022828"/><text x="58.0481%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,231,597 samples, 0.08%)</title><rect x="57.9231%" y="261" width="0.0765%" height="15" fill="rgb(216,217,28)" fg:x="6988034821" fg:w="9231597"/><text x="58.1731%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,231,597 samples, 0.08%)</title><rect x="57.9231%" y="245" width="0.0765%" height="15" fill="rgb(249,199,1)" fg:x="6988034821" fg:w="9231597"/><text x="58.1731%" y="255.50"></text></g><g><title>[libc.so.6] (3,103,284 samples, 0.03%)</title><rect x="57.9996%" y="181" width="0.0257%" height="15" fill="rgb(240,85,17)" fg:x="6997266418" fg:w="3103284"/><text x="58.2496%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (80,148,288 samples, 0.66%)</title><rect x="57.9996%" y="261" width="0.6643%" height="15" fill="rgb(206,108,45)" fg:x="6997266418" fg:w="80148288"/><text x="58.2496%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (80,148,288 samples, 0.66%)</title><rect x="57.9996%" y="245" width="0.6643%" height="15" fill="rgb(245,210,41)" fg:x="6997266418" fg:w="80148288"/><text x="58.2496%" y="255.50"></text></g><g><title>alloc::alloc::realloc (80,148,288 samples, 0.66%)</title><rect x="57.9996%" y="229" width="0.6643%" height="15" fill="rgb(206,13,37)" fg:x="6997266418" fg:w="80148288"/><text x="58.2496%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (80,148,288 samples, 0.66%)</title><rect x="57.9996%" y="213" width="0.6643%" height="15" fill="rgb(250,61,18)" fg:x="6997266418" fg:w="80148288"/><text x="58.2496%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (80,148,288 samples, 0.66%)</title><rect x="57.9996%" y="197" width="0.6643%" height="15" fill="rgb(235,172,48)" fg:x="6997266418" fg:w="80148288"/><text x="58.2496%" y="207.50"></text></g><g><title>realloc (77,045,004 samples, 0.64%)</title><rect x="58.0253%" y="181" width="0.6386%" height="15" fill="rgb(249,201,17)" fg:x="7000369702" fg:w="77045004"/><text x="58.2753%" y="191.50"></text></g><g><title>[libc.so.6] (73,803,172 samples, 0.61%)</title><rect x="58.0522%" y="165" width="0.6117%" height="15" fill="rgb(219,208,6)" fg:x="7003611534" fg:w="73803172"/><text x="58.3022%" y="175.50"></text></g><g><title>[libc.so.6] (66,825,274 samples, 0.55%)</title><rect x="58.1100%" y="149" width="0.5539%" height="15" fill="rgb(248,31,23)" fg:x="7010589432" fg:w="66825274"/><text x="58.3600%" y="159.50"></text></g><g><title>[libc.so.6] (6,191,173 samples, 0.05%)</title><rect x="58.6126%" y="133" width="0.0513%" height="15" fill="rgb(245,15,42)" fg:x="7071223533" fg:w="6191173"/><text x="58.8626%" y="143.50"></text></g><g><title>[libc.so.6] (44,455,597 samples, 0.37%)</title><rect x="58.6639%" y="261" width="0.3685%" height="15" fill="rgb(222,217,39)" fg:x="7077414706" fg:w="44455597"/><text x="58.9139%" y="271.50"></text></g><g><title>[libc.so.6] (38,259,970 samples, 0.32%)</title><rect x="58.7153%" y="245" width="0.3171%" height="15" fill="rgb(210,219,27)" fg:x="7083610333" fg:w="38259970"/><text x="58.9653%" y="255.50"></text></g><g><title>[libc.so.6] (5,985,519 samples, 0.05%)</title><rect x="58.9828%" y="229" width="0.0496%" height="15" fill="rgb(252,166,36)" fg:x="7115884784" fg:w="5985519"/><text x="59.2328%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (157,783,841 samples, 1.31%)</title><rect x="57.8481%" y="277" width="1.3079%" height="15" fill="rgb(245,132,34)" fg:x="6978986131" fg:w="157783841"/><text x="58.0981%" y="287.50"></text></g><g><title>malloc (14,899,669 samples, 0.12%)</title><rect x="59.0324%" y="261" width="0.1235%" height="15" fill="rgb(236,54,3)" fg:x="7121870303" fg:w="14899669"/><text x="59.2824%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (196,869,476 samples, 1.63%)</title><rect x="57.5483%" y="325" width="1.6318%" height="15" fill="rgb(241,173,43)" fg:x="6942827015" fg:w="196869476"/><text x="57.7983%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (181,546,425 samples, 1.50%)</title><rect x="57.6754%" y="309" width="1.5048%" height="15" fill="rgb(215,190,9)" fg:x="6958150066" fg:w="181546425"/><text x="57.9254%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (181,546,425 samples, 1.50%)</title><rect x="57.6754%" y="293" width="1.5048%" height="15" fill="rgb(242,101,16)" fg:x="6958150066" fg:w="181546425"/><text x="57.9254%" y="303.50"></text></g><g><title>alloc::raw_vec::layout_array (2,926,519 samples, 0.02%)</title><rect x="59.1559%" y="277" width="0.0243%" height="15" fill="rgb(223,190,21)" fg:x="7136769972" fg:w="2926519"/><text x="59.4059%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::repeat (2,926,519 samples, 0.02%)</title><rect x="59.1559%" y="261" width="0.0243%" height="15" fill="rgb(215,228,25)" fg:x="7136769972" fg:w="2926519"/><text x="59.4059%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (2,926,519 samples, 0.02%)</title><rect x="59.1559%" y="245" width="0.0243%" height="15" fill="rgb(225,36,22)" fg:x="7136769972" fg:w="2926519"/><text x="59.4059%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2,926,519 samples, 0.02%)</title><rect x="59.1559%" y="229" width="0.0243%" height="15" fill="rgb(251,106,46)" fg:x="7136769972" fg:w="2926519"/><text x="59.4059%" y="239.50"></text></g><g><title>core::intrinsics::unlikely (2,926,519 samples, 0.02%)</title><rect x="59.1559%" y="213" width="0.0243%" height="15" fill="rgb(208,90,1)" fg:x="7136769972" fg:w="2926519"/><text x="59.4059%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="277" width="0.0265%" height="15" fill="rgb(243,10,4)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="261" width="0.0265%" height="15" fill="rgb(212,137,27)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="271.50"></text></g><g><title>alloc::alloc::realloc (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="245" width="0.0265%" height="15" fill="rgb(231,220,49)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="255.50"></text></g><g><title>__rustc::__rdl_realloc (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="229" width="0.0265%" height="15" fill="rgb(237,96,20)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="213" width="0.0265%" height="15" fill="rgb(239,229,30)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="223.50"></text></g><g><title>realloc (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="197" width="0.0265%" height="15" fill="rgb(219,65,33)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="207.50"></text></g><g><title>[libc.so.6] (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="181" width="0.0265%" height="15" fill="rgb(243,134,7)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="191.50"></text></g><g><title>[libc.so.6] (3,196,703 samples, 0.03%)</title><rect x="59.1802%" y="165" width="0.0265%" height="15" fill="rgb(216,177,54)" fg:x="7139696491" fg:w="3196703"/><text x="59.4302%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2,819,640 samples, 0.02%)</title><rect x="59.2067%" y="277" width="0.0234%" height="15" fill="rgb(211,160,20)" fg:x="7142893194" fg:w="2819640"/><text x="59.4567%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (8,853,421 samples, 0.07%)</title><rect x="59.1802%" y="325" width="0.0734%" height="15" fill="rgb(239,85,39)" fg:x="7139696491" fg:w="8853421"/><text x="59.4302%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (8,853,421 samples, 0.07%)</title><rect x="59.1802%" y="309" width="0.0734%" height="15" fill="rgb(232,125,22)" fg:x="7139696491" fg:w="8853421"/><text x="59.4302%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (8,853,421 samples, 0.07%)</title><rect x="59.1802%" y="293" width="0.0734%" height="15" fill="rgb(244,57,34)" fg:x="7139696491" fg:w="8853421"/><text x="59.4302%" y="303.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (2,837,078 samples, 0.02%)</title><rect x="59.2300%" y="277" width="0.0235%" height="15" fill="rgb(214,203,32)" fg:x="7145712834" fg:w="2837078"/><text x="59.4800%" y="287.50"></text></g><g><title>__rustc::__rdl_realloc (1,150,641,802 samples, 9.54%)</title><rect x="59.4584%" y="261" width="9.5375%" height="15" fill="rgb(207,58,43)" fg:x="7173263891" fg:w="1150641802"/><text x="59.7084%" y="271.50">__rustc::__rdl..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1,150,641,802 samples, 9.54%)</title><rect x="59.4584%" y="245" width="9.5375%" height="15" fill="rgb(215,193,15)" fg:x="7173263891" fg:w="1150641802"/><text x="59.7084%" y="255.50">std::sys::allo..</text></g><g><title>realloc (1,150,641,802 samples, 9.54%)</title><rect x="59.4584%" y="229" width="9.5375%" height="15" fill="rgb(232,15,44)" fg:x="7173263891" fg:w="1150641802"/><text x="59.7084%" y="239.50">realloc</text></g><g><title>[libc.so.6] (1,150,641,802 samples, 9.54%)</title><rect x="59.4584%" y="213" width="9.5375%" height="15" fill="rgb(212,3,48)" fg:x="7173263891" fg:w="1150641802"/><text x="59.7084%" y="223.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1,150,641,802 samples, 9.54%)</title><rect x="59.4584%" y="197" width="9.5375%" height="15" fill="rgb(218,128,7)" fg:x="7173263891" fg:w="1150641802"/><text x="59.7084%" y="207.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1,080,321,378 samples, 8.95%)</title><rect x="60.0413%" y="181" width="8.9547%" height="15" fill="rgb(226,216,39)" fg:x="7243584315" fg:w="1080321378"/><text x="60.2913%" y="191.50">[libc.so.6]</text></g><g><title>[libc.so.6] (314,878,989 samples, 2.61%)</title><rect x="66.3860%" y="165" width="2.6100%" height="15" fill="rgb(243,47,51)" fg:x="8009026704" fg:w="314878989"/><text x="66.6360%" y="175.50">[l..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,200,023,059 samples, 9.95%)</title><rect x="59.3810%" y="309" width="9.9469%" height="15" fill="rgb(241,183,40)" fg:x="7163918879" fg:w="1200023059"/><text x="59.6310%" y="319.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::Global::grow_impl (1,200,023,059 samples, 9.95%)</title><rect x="59.3810%" y="293" width="9.9469%" height="15" fill="rgb(231,217,32)" fg:x="7163918879" fg:w="1200023059"/><text x="59.6310%" y="303.50">alloc::alloc::..</text></g><g><title>alloc::alloc::realloc (1,200,023,059 samples, 9.95%)</title><rect x="59.3810%" y="277" width="9.9469%" height="15" fill="rgb(229,61,38)" fg:x="7163918879" fg:w="1200023059"/><text x="59.6310%" y="287.50">alloc::alloc::..</text></g><g><title>realloc (40,036,245 samples, 0.33%)</title><rect x="68.9960%" y="261" width="0.3319%" height="15" fill="rgb(225,210,5)" fg:x="8323905693" fg:w="40036245"/><text x="69.2460%" y="271.50"></text></g><g><title>[libc.so.6] (3,194,947 samples, 0.03%)</title><rect x="69.3013%" y="245" width="0.0265%" height="15" fill="rgb(231,79,45)" fg:x="8360746991" fg:w="3194947"/><text x="69.5513%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,221,559,202 samples, 10.13%)</title><rect x="59.2536%" y="325" width="10.1254%" height="15" fill="rgb(224,100,7)" fg:x="7148549912" fg:w="1221559202"/><text x="59.5036%" y="335.50">alloc::raw_vec:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6,167,176 samples, 0.05%)</title><rect x="69.3278%" y="309" width="0.0511%" height="15" fill="rgb(241,198,18)" fg:x="8363941938" fg:w="6167176"/><text x="69.5778%" y="319.50"></text></g><g><title>cfree (12,152,075 samples, 0.10%)</title><rect x="69.3789%" y="325" width="0.1007%" height="15" fill="rgb(252,97,53)" fg:x="8370109114" fg:w="12152075"/><text x="69.6289%" y="335.50"></text></g><g><title>[libc.so.6] (8,945,096 samples, 0.07%)</title><rect x="69.5039%" y="229" width="0.0741%" height="15" fill="rgb(220,88,7)" fg:x="8385186391" fg:w="8945096"/><text x="69.7539%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20,718,939 samples, 0.17%)</title><rect x="69.4797%" y="325" width="0.1717%" height="15" fill="rgb(213,176,14)" fg:x="8382261189" fg:w="20718939"/><text x="69.7297%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (20,718,939 samples, 0.17%)</title><rect x="69.4797%" y="309" width="0.1717%" height="15" fill="rgb(246,73,7)" fg:x="8382261189" fg:w="20718939"/><text x="69.7297%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20,718,939 samples, 0.17%)</title><rect x="69.4797%" y="293" width="0.1717%" height="15" fill="rgb(245,64,36)" fg:x="8382261189" fg:w="20718939"/><text x="69.7297%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (20,718,939 samples, 0.17%)</title><rect x="69.4797%" y="277" width="0.1717%" height="15" fill="rgb(245,80,10)" fg:x="8382261189" fg:w="20718939"/><text x="69.7297%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20,718,939 samples, 0.17%)</title><rect x="69.4797%" y="261" width="0.1717%" height="15" fill="rgb(232,107,50)" fg:x="8382261189" fg:w="20718939"/><text x="69.7297%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (20,718,939 samples, 0.17%)</title><rect x="69.4797%" y="245" width="0.1717%" height="15" fill="rgb(253,3,0)" fg:x="8382261189" fg:w="20718939"/><text x="69.7297%" y="255.50"></text></g><g><title>cfree (8,848,641 samples, 0.07%)</title><rect x="69.5781%" y="229" width="0.0733%" height="15" fill="rgb(212,99,53)" fg:x="8394131487" fg:w="8848641"/><text x="69.8281%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;pathmap::dense_byte_node::ByteNode&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;(),()&gt;,()&gt;&gt;&gt; (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="325" width="0.0248%" height="15" fill="rgb(249,111,54)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::dense_byte_node::ByteNode&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;(),()&gt;,()&gt;&gt; (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="309" width="0.0248%" height="15" fill="rgb(249,55,30)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;(),()&gt;&gt;&gt; (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="293" width="0.0248%" height="15" fill="rgb(237,47,42)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="277" width="0.0248%" height="15" fill="rgb(211,20,18)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[pathmap::dense_byte_node::OrdinaryCoFree&lt;(),()&gt;]&gt; (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="261" width="0.0248%" height="15" fill="rgb(231,203,46)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;(),()&gt;&gt; (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="245" width="0.0248%" height="15" fill="rgb(237,142,3)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;(),()&gt;&gt;&gt; (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="229" width="0.0248%" height="15" fill="rgb(241,107,1)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;(),()&gt;&gt; (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="213" width="0.0248%" height="15" fill="rgb(229,83,13)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="223.50"></text></g><g><title>&lt;pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt; as core::ops::drop::Drop&gt;::drop (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="197" width="0.0248%" height="15" fill="rgb(241,91,40)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="207.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::drop_inner_in (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="181" width="0.0248%" height="15" fill="rgb(225,3,45)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="191.50"></text></g><g><title>cfree (2,987,864 samples, 0.02%)</title><rect x="69.6514%" y="165" width="0.0248%" height="15" fill="rgb(244,223,14)" fg:x="8402980128" fg:w="2987864"/><text x="69.9014%" y="175.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,929,278 samples, 0.02%)</title><rect x="69.9842%" y="277" width="0.0243%" height="15" fill="rgb(224,124,37)" fg:x="8443135517" fg:w="2929278"/><text x="70.2342%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,929,278 samples, 0.02%)</title><rect x="69.9842%" y="261" width="0.0243%" height="15" fill="rgb(251,171,30)" fg:x="8443135517" fg:w="2929278"/><text x="70.2342%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (2,929,278 samples, 0.02%)</title><rect x="69.9842%" y="245" width="0.0243%" height="15" fill="rgb(236,46,54)" fg:x="8443135517" fg:w="2929278"/><text x="70.2342%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (2,929,278 samples, 0.02%)</title><rect x="69.9842%" y="229" width="0.0243%" height="15" fill="rgb(245,213,5)" fg:x="8443135517" fg:w="2929278"/><text x="70.2342%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,929,278 samples, 0.02%)</title><rect x="69.9842%" y="213" width="0.0243%" height="15" fill="rgb(230,144,27)" fg:x="8443135517" fg:w="2929278"/><text x="70.2342%" y="223.50"></text></g><g><title>[libc.so.6] (52,006,497 samples, 0.43%)</title><rect x="70.0085%" y="277" width="0.4311%" height="15" fill="rgb(220,86,6)" fg:x="8446064795" fg:w="52006497"/><text x="70.2585%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (167,895,905 samples, 1.39%)</title><rect x="69.9094%" y="309" width="1.3917%" height="15" fill="rgb(240,20,13)" fg:x="8434104575" fg:w="167895905"/><text x="70.1594%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (158,864,963 samples, 1.32%)</title><rect x="69.9842%" y="293" width="1.3168%" height="15" fill="rgb(217,89,34)" fg:x="8443135517" fg:w="158864963"/><text x="70.2342%" y="303.50"></text></g><g><title>cfree (103,929,188 samples, 0.86%)</title><rect x="70.4396%" y="277" width="0.8615%" height="15" fill="rgb(229,13,5)" fg:x="8498071292" fg:w="103929188"/><text x="70.6896%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2,930,566 samples, 0.02%)</title><rect x="71.3011%" y="261" width="0.0243%" height="15" fill="rgb(244,67,35)" fg:x="8602000480" fg:w="2930566"/><text x="71.5511%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2,930,566 samples, 0.02%)</title><rect x="71.3011%" y="245" width="0.0243%" height="15" fill="rgb(221,40,2)" fg:x="8602000480" fg:w="2930566"/><text x="71.5511%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (32,573,327 samples, 0.27%)</title><rect x="71.3011%" y="293" width="0.2700%" height="15" fill="rgb(237,157,21)" fg:x="8602000480" fg:w="32573327"/><text x="71.5511%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32,573,327 samples, 0.27%)</title><rect x="71.3011%" y="277" width="0.2700%" height="15" fill="rgb(222,94,11)" fg:x="8602000480" fg:w="32573327"/><text x="71.5511%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (29,642,761 samples, 0.25%)</title><rect x="71.3253%" y="261" width="0.2457%" height="15" fill="rgb(249,113,6)" fg:x="8604931046" fg:w="29642761"/><text x="71.5753%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (29,642,761 samples, 0.25%)</title><rect x="71.3253%" y="245" width="0.2457%" height="15" fill="rgb(238,137,36)" fg:x="8604931046" fg:w="29642761"/><text x="71.5753%" y="255.50"></text></g><g><title>[libc.so.6] (175,984,427 samples, 1.46%)</title><rect x="71.6795%" y="165" width="1.4587%" height="15" fill="rgb(210,102,26)" fg:x="8647661085" fg:w="175984427"/><text x="71.9295%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (363,790,042 samples, 3.02%)</title><rect x="71.3011%" y="309" width="3.0154%" height="15" fill="rgb(218,30,30)" fg:x="8602000480" fg:w="363790042"/><text x="71.5511%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="293" width="2.7454%" height="15" fill="rgb(214,67,26)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="277" width="2.7454%" height="15" fill="rgb(251,9,53)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="287.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="261" width="2.7454%" height="15" fill="rgb(228,204,25)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="271.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="245" width="2.7454%" height="15" fill="rgb(207,153,8)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="255.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="229" width="2.7454%" height="15" fill="rgb(242,9,16)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="239.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="213" width="2.7454%" height="15" fill="rgb(217,211,10)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="223.50">al..</text></g><g><title>__rustc::__rdl_dealloc (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="197" width="2.7454%" height="15" fill="rgb(219,228,52)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="207.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (331,216,715 samples, 2.75%)</title><rect x="71.5711%" y="181" width="2.7454%" height="15" fill="rgb(231,92,29)" fg:x="8634573807" fg:w="331216715"/><text x="71.8211%" y="191.50">st..</text></g><g><title>cfree (142,145,010 samples, 1.18%)</title><rect x="73.1383%" y="165" width="1.1782%" height="15" fill="rgb(232,8,23)" fg:x="8823645512" fg:w="142145010"/><text x="73.3883%" y="175.50"></text></g><g><title>[libc.so.6] (164,002,950 samples, 1.36%)</title><rect x="74.3439%" y="165" width="1.3594%" height="15" fill="rgb(216,211,34)" fg:x="8969095653" fg:w="164002950"/><text x="74.5939%" y="175.50"></text></g><g><title>[libc.so.6] (86,899,623 samples, 0.72%)</title><rect x="74.9830%" y="149" width="0.7203%" height="15" fill="rgb(236,151,0)" fg:x="9046198980" fg:w="86899623"/><text x="75.2330%" y="159.50"></text></g><g><title>[libc.so.6] (50,706,933 samples, 0.42%)</title><rect x="75.2830%" y="133" width="0.4203%" height="15" fill="rgb(209,168,3)" fg:x="9082391670" fg:w="50706933"/><text x="75.5330%" y="143.50"></text></g><g><title>[libc.so.6] (3,173,850 samples, 0.03%)</title><rect x="75.6770%" y="117" width="0.0263%" height="15" fill="rgb(208,129,28)" fg:x="9129924753" fg:w="3173850"/><text x="75.9270%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (815,644,348 samples, 6.76%)</title><rect x="69.6762%" y="325" width="6.7608%" height="15" fill="rgb(229,78,22)" fg:x="8405967992" fg:w="815644348"/><text x="69.9262%" y="335.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="309" width="2.1205%" height="15" fill="rgb(228,187,13)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="293" width="2.1205%" height="15" fill="rgb(240,119,24)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="277" width="2.1205%" height="15" fill="rgb(209,194,42)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="287.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="261" width="2.1205%" height="15" fill="rgb(247,200,46)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="271.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="245" width="2.1205%" height="15" fill="rgb(218,76,16)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="255.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="229" width="2.1205%" height="15" fill="rgb(225,21,48)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="213" width="2.1205%" height="15" fill="rgb(239,223,50)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="223.50">a..</text></g><g><title>__rustc::__rdl_dealloc (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="197" width="2.1205%" height="15" fill="rgb(244,45,21)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="207.50">_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (255,821,818 samples, 2.12%)</title><rect x="74.3165%" y="181" width="2.1205%" height="15" fill="rgb(232,33,43)" fg:x="8965790522" fg:w="255821818"/><text x="74.5665%" y="191.50">s..</text></g><g><title>cfree (88,513,737 samples, 0.73%)</title><rect x="75.7033%" y="165" width="0.7337%" height="15" fill="rgb(209,8,3)" fg:x="9133098603" fg:w="88513737"/><text x="75.9533%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,627,921 samples, 0.10%)</title><rect x="76.5618%" y="245" width="0.0964%" height="15" fill="rgb(214,25,53)" fg:x="9236672765" fg:w="11627921"/><text x="76.8118%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (11,627,921 samples, 0.10%)</title><rect x="76.5618%" y="229" width="0.0964%" height="15" fill="rgb(254,186,54)" fg:x="9236672765" fg:w="11627921"/><text x="76.8118%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (11,627,921 samples, 0.10%)</title><rect x="76.5618%" y="213" width="0.0964%" height="15" fill="rgb(208,174,49)" fg:x="9236672765" fg:w="11627921"/><text x="76.8118%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11,627,921 samples, 0.10%)</title><rect x="76.5618%" y="197" width="0.0964%" height="15" fill="rgb(233,191,51)" fg:x="9236672765" fg:w="11627921"/><text x="76.8118%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (29,744,915 samples, 0.25%)</title><rect x="76.5618%" y="309" width="0.2466%" height="15" fill="rgb(222,134,10)" fg:x="9236672765" fg:w="29744915"/><text x="76.8118%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (29,744,915 samples, 0.25%)</title><rect x="76.5618%" y="293" width="0.2466%" height="15" fill="rgb(230,226,20)" fg:x="9236672765" fg:w="29744915"/><text x="76.8118%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29,744,915 samples, 0.25%)</title><rect x="76.5618%" y="277" width="0.2466%" height="15" fill="rgb(251,111,25)" fg:x="9236672765" fg:w="29744915"/><text x="76.8118%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (29,744,915 samples, 0.25%)</title><rect x="76.5618%" y="261" width="0.2466%" height="15" fill="rgb(224,40,46)" fg:x="9236672765" fg:w="29744915"/><text x="76.8118%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (18,116,994 samples, 0.15%)</title><rect x="76.6582%" y="245" width="0.1502%" height="15" fill="rgb(236,108,47)" fg:x="9248300686" fg:w="18116994"/><text x="76.9082%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (220,362,815 samples, 1.83%)</title><rect x="76.4370%" y="325" width="1.8266%" height="15" fill="rgb(234,93,0)" fg:x="9221612340" fg:w="220362815"/><text x="76.6870%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="309" width="1.4552%" height="15" fill="rgb(224,213,32)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="293" width="1.4552%" height="15" fill="rgb(251,11,48)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="277" width="1.4552%" height="15" fill="rgb(236,173,5)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="261" width="1.4552%" height="15" fill="rgb(230,95,12)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="245" width="1.4552%" height="15" fill="rgb(232,209,1)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="229" width="1.4552%" height="15" fill="rgb(232,6,1)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="213" width="1.4552%" height="15" fill="rgb(210,224,50)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (175,557,475 samples, 1.46%)</title><rect x="76.8083%" y="197" width="1.4552%" height="15" fill="rgb(228,127,35)" fg:x="9266417680" fg:w="175557475"/><text x="77.0583%" y="207.50"></text></g><g><title>cfree (166,155,986 samples, 1.38%)</title><rect x="76.8863%" y="181" width="1.3772%" height="15" fill="rgb(245,102,45)" fg:x="9275819169" fg:w="166155986"/><text x="77.1363%" y="191.50"></text></g><g><title>liblevenshtein::transducer::Transducer&lt;D&gt;::query (3,413,115 samples, 0.03%)</title><rect x="78.2635%" y="325" width="0.0283%" height="15" fill="rgb(214,1,49)" fg:x="9441975155" fg:w="3413115"/><text x="78.5135%" y="335.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::new (3,413,115 samples, 0.03%)</title><rect x="78.2635%" y="309" width="0.0283%" height="15" fill="rgb(226,163,40)" fg:x="9441975155" fg:w="3413115"/><text x="78.5135%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,022,965 samples, 0.03%)</title><rect x="78.4648%" y="293" width="0.0251%" height="15" fill="rgb(239,212,28)" fg:x="9466262130" fg:w="3022965"/><text x="78.7148%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3,022,965 samples, 0.03%)</title><rect x="78.4648%" y="277" width="0.0251%" height="15" fill="rgb(220,20,13)" fg:x="9466262130" fg:w="3022965"/><text x="78.7148%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (3,022,965 samples, 0.03%)</title><rect x="78.4648%" y="261" width="0.0251%" height="15" fill="rgb(210,164,35)" fg:x="9466262130" fg:w="3022965"/><text x="78.7148%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="245" width="0.3071%" height="15" fill="rgb(248,109,41)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="229" width="0.3071%" height="15" fill="rgb(238,23,50)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="213" width="0.3071%" height="15" fill="rgb(211,48,49)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="197" width="0.3071%" height="15" fill="rgb(223,36,21)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="181" width="0.3071%" height="15" fill="rgb(207,123,46)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="165" width="0.3071%" height="15" fill="rgb(240,218,32)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="175.50"></text></g><g><title>alloc::alloc::alloc (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="149" width="0.3071%" height="15" fill="rgb(252,5,43)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="133" width="0.3071%" height="15" fill="rgb(252,84,19)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="117" width="0.3071%" height="15" fill="rgb(243,152,39)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="127.50"></text></g><g><title>malloc (37,044,954 samples, 0.31%)</title><rect x="78.4899%" y="101" width="0.3071%" height="15" fill="rgb(234,160,15)" fg:x="9469285095" fg:w="37044954"/><text x="78.7399%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (58,005,470 samples, 0.48%)</title><rect x="78.4899%" y="293" width="0.4808%" height="15" fill="rgb(237,34,20)" fg:x="9469285095" fg:w="58005470"/><text x="78.7399%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (58,005,470 samples, 0.48%)</title><rect x="78.4899%" y="277" width="0.4808%" height="15" fill="rgb(229,97,13)" fg:x="9469285095" fg:w="58005470"/><text x="78.7399%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (58,005,470 samples, 0.48%)</title><rect x="78.4899%" y="261" width="0.4808%" height="15" fill="rgb(234,71,50)" fg:x="9469285095" fg:w="58005470"/><text x="78.7399%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20,960,516 samples, 0.17%)</title><rect x="78.7969%" y="245" width="0.1737%" height="15" fill="rgb(253,155,4)" fg:x="9506330049" fg:w="20960516"/><text x="79.0469%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (20,960,516 samples, 0.17%)</title><rect x="78.7969%" y="229" width="0.1737%" height="15" fill="rgb(222,185,37)" fg:x="9506330049" fg:w="20960516"/><text x="79.0469%" y="239.50"></text></g><g><title>[libc.so.6] (17,532,140 samples, 0.15%)</title><rect x="78.8254%" y="213" width="0.1453%" height="15" fill="rgb(251,177,13)" fg:x="9509758425" fg:w="17532140"/><text x="79.0754%" y="223.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (46,439,554 samples, 0.38%)</title><rect x="78.9707%" y="293" width="0.3849%" height="15" fill="rgb(250,179,40)" fg:x="9527290565" fg:w="46439554"/><text x="79.2207%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (27,694,651 samples, 0.23%)</title><rect x="79.1261%" y="277" width="0.2296%" height="15" fill="rgb(242,44,2)" fg:x="9546035468" fg:w="27694651"/><text x="79.3761%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27,694,651 samples, 0.23%)</title><rect x="79.1261%" y="261" width="0.2296%" height="15" fill="rgb(216,177,13)" fg:x="9546035468" fg:w="27694651"/><text x="79.3761%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27,694,651 samples, 0.23%)</title><rect x="79.1261%" y="245" width="0.2296%" height="15" fill="rgb(216,106,43)" fg:x="9546035468" fg:w="27694651"/><text x="79.3761%" y="255.50"></text></g><g><title>alloc::alloc::alloc (27,694,651 samples, 0.23%)</title><rect x="79.1261%" y="229" width="0.2296%" height="15" fill="rgb(216,183,2)" fg:x="9546035468" fg:w="27694651"/><text x="79.3761%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (27,694,651 samples, 0.23%)</title><rect x="79.1261%" y="213" width="0.2296%" height="15" fill="rgb(249,75,3)" fg:x="9546035468" fg:w="27694651"/><text x="79.3761%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (27,694,651 samples, 0.23%)</title><rect x="79.1261%" y="197" width="0.2296%" height="15" fill="rgb(219,67,39)" fg:x="9546035468" fg:w="27694651"/><text x="79.3761%" y="207.50"></text></g><g><title>malloc (27,694,651 samples, 0.23%)</title><rect x="79.1261%" y="181" width="0.2296%" height="15" fill="rgb(253,228,2)" fg:x="9546035468" fg:w="27694651"/><text x="79.3761%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter_map (3,152,191 samples, 0.03%)</title><rect x="79.3556%" y="293" width="0.0261%" height="15" fill="rgb(235,138,27)" fg:x="9573730119" fg:w="3152191"/><text x="79.6056%" y="303.50"></text></g><g><title>core::iter::adapters::filter_map::FilterMap&lt;I,F&gt;::new (3,152,191 samples, 0.03%)</title><rect x="79.3556%" y="277" width="0.0261%" height="15" fill="rgb(236,97,51)" fg:x="9573730119" fg:w="3152191"/><text x="79.6056%" y="287.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5,820,988 samples, 0.05%)</title><rect x="79.5606%" y="197" width="0.0482%" height="15" fill="rgb(240,80,30)" fg:x="9598456034" fg:w="5820988"/><text x="79.8106%" y="207.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as core::convert::From&lt;[u64: 4]&gt;&gt;::from (5,820,988 samples, 0.05%)</title><rect x="79.5606%" y="181" width="0.0482%" height="15" fill="rgb(230,178,19)" fg:x="9598456034" fg:w="5820988"/><text x="79.8106%" y="191.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (17,853,260 samples, 0.15%)</title><rect x="79.4855%" y="261" width="0.1480%" height="15" fill="rgb(210,190,27)" fg:x="9589403916" fg:w="17853260"/><text x="79.7355%" y="271.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (17,853,260 samples, 0.15%)</title><rect x="79.4855%" y="245" width="0.1480%" height="15" fill="rgb(222,107,31)" fg:x="9589403916" fg:w="17853260"/><text x="79.7355%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_branches_mask (17,853,260 samples, 0.15%)</title><rect x="79.4855%" y="229" width="0.1480%" height="15" fill="rgb(216,127,34)" fg:x="9589403916" fg:w="17853260"/><text x="79.7355%" y="239.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_branches_mask (14,785,102 samples, 0.12%)</title><rect x="79.5110%" y="213" width="0.1226%" height="15" fill="rgb(234,116,52)" fg:x="9592472074" fg:w="14785102"/><text x="79.7610%" y="223.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::get_both_keys (2,980,154 samples, 0.02%)</title><rect x="79.6088%" y="197" width="0.0247%" height="15" fill="rgb(222,124,15)" fg:x="9604277022" fg:w="2980154"/><text x="79.8588%" y="207.50"></text></g><g><title>&lt;u8 as core::iter::range::Step&gt;::forward_unchecked (111,633,662 samples, 0.93%)</title><rect x="81.8407%" y="149" width="0.9253%" height="15" fill="rgb(231,179,28)" fg:x="9873537925" fg:w="111633662"/><text x="82.0907%" y="159.50"></text></g><g><title>core::num::&lt;impl u8&gt;::unchecked_add (111,633,662 samples, 0.93%)</title><rect x="81.8407%" y="133" width="0.9253%" height="15" fill="rgb(226,93,45)" fg:x="9873537925" fg:w="111633662"/><text x="82.0907%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (66,771,595 samples, 0.55%)</title><rect x="82.7660%" y="149" width="0.5535%" height="15" fill="rgb(215,8,51)" fg:x="9985171587" fg:w="66771595"/><text x="83.0160%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,121,925,958 samples, 9.30%)</title><rect x="80.0451%" y="213" width="9.2995%" height="15" fill="rgb(223,106,5)" fg:x="9656914175" fg:w="1121925958"/><text x="80.2951%" y="223.50">&lt;core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::find (1,121,925,958 samples, 9.30%)</title><rect x="80.0451%" y="197" width="9.2995%" height="15" fill="rgb(250,191,5)" fg:x="9656914175" fg:w="1121925958"/><text x="80.2951%" y="207.50">core::iter::t..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (1,121,925,958 samples, 9.30%)</title><rect x="80.0451%" y="181" width="9.2995%" height="15" fill="rgb(242,132,44)" fg:x="9656914175" fg:w="1121925958"/><text x="80.2951%" y="191.50">core::iter::r..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (1,121,925,958 samples, 9.30%)</title><rect x="80.0451%" y="165" width="9.2995%" height="15" fill="rgb(251,152,29)" fg:x="9656914175" fg:w="1121925958"/><text x="80.2951%" y="175.50">&lt;core::ops::r..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (726,896,951 samples, 6.03%)</title><rect x="83.3195%" y="149" width="6.0252%" height="15" fill="rgb(218,179,5)" fg:x="10051943182" fg:w="726896951"/><text x="83.5695%" y="159.50">core::it..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (726,896,951 samples, 6.03%)</title><rect x="83.3195%" y="133" width="6.0252%" height="15" fill="rgb(227,67,19)" fg:x="10051943182" fg:w="726896951"/><text x="83.5695%" y="143.50">core::op..</text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}::{{closure}} (726,896,951 samples, 6.03%)</title><rect x="83.3195%" y="117" width="6.0252%" height="15" fill="rgb(233,119,31)" fg:x="10051943182" fg:w="726896951"/><text x="83.5695%" y="127.50">&lt;libleve..</text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (726,896,951 samples, 6.03%)</title><rect x="83.3195%" y="101" width="6.0252%" height="15" fill="rgb(241,120,22)" fg:x="10051943182" fg:w="726896951"/><text x="83.5695%" y="111.50">&lt;pathmap..</text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (726,896,951 samples, 6.03%)</title><rect x="83.3195%" y="85" width="6.0252%" height="15" fill="rgb(224,102,30)" fg:x="10051943182" fg:w="726896951"/><text x="83.5695%" y="95.50">&lt;[u64: 4..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,174,508,132 samples, 9.74%)</title><rect x="79.6335%" y="261" width="9.7354%" height="15" fill="rgb(210,164,37)" fg:x="9607257176" fg:w="1174508132"/><text x="79.8835%" y="271.50">core::iter::tr..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (1,174,508,132 samples, 9.74%)</title><rect x="79.6335%" y="245" width="9.7354%" height="15" fill="rgb(226,191,16)" fg:x="9607257176" fg:w="1174508132"/><text x="79.8835%" y="255.50">&lt;smallvec::Sma..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1,171,411,260 samples, 9.71%)</title><rect x="79.6592%" y="229" width="9.7097%" height="15" fill="rgb(214,40,45)" fg:x="9610354048" fg:w="1171411260"/><text x="79.9092%" y="239.50">&lt;smallvec::Sma..</text></g><g><title>core::ptr::write (2,925,175 samples, 0.02%)</title><rect x="89.3446%" y="213" width="0.0242%" height="15" fill="rgb(244,29,26)" fg:x="10778840133" fg:w="2925175"/><text x="89.5946%" y="223.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (1,230,825,114 samples, 10.20%)</title><rect x="79.4855%" y="277" width="10.2022%" height="15" fill="rgb(216,16,5)" fg:x="9589403916" fg:w="1230825114"/><text x="79.7355%" y="287.50">&lt;liblevenshtein..</text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (38,463,722 samples, 0.32%)</title><rect x="89.3689%" y="261" width="0.3188%" height="15" fill="rgb(249,76,35)" fg:x="10781765308" fg:w="38463722"/><text x="89.6189%" y="271.50"></text></g><g><title>cfree (35,468,435 samples, 0.29%)</title><rect x="89.3937%" y="245" width="0.2940%" height="15" fill="rgb(207,11,44)" fg:x="10784760595" fg:w="35468435"/><text x="89.6437%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt; (3,090,318 samples, 0.03%)</title><rect x="89.6877%" y="277" width="0.0256%" height="15" fill="rgb(228,190,49)" fg:x="10820229030" fg:w="3090318"/><text x="89.9377%" y="287.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,090,318 samples, 0.03%)</title><rect x="89.6877%" y="261" width="0.0256%" height="15" fill="rgb(214,173,12)" fg:x="10820229030" fg:w="3090318"/><text x="89.9377%" y="271.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (3,090,318 samples, 0.03%)</title><rect x="89.6877%" y="245" width="0.0256%" height="15" fill="rgb(218,26,35)" fg:x="10820229030" fg:w="3090318"/><text x="89.9377%" y="255.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (1,366,133,308 samples, 11.32%)</title><rect x="78.4394%" y="309" width="11.3237%" height="15" fill="rgb(220,200,19)" fg:x="9463192825" fg:w="1366133308"/><text x="78.6894%" y="319.50">&lt;liblevenshtein::..</text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (1,252,443,823 samples, 10.38%)</title><rect x="79.3817%" y="293" width="10.3814%" height="15" fill="rgb(239,95,49)" fg:x="9576882310" fg:w="1252443823"/><text x="79.6317%" y="303.50">liblevenshtein:..</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (6,006,785 samples, 0.05%)</title><rect x="89.7133%" y="277" width="0.0498%" height="15" fill="rgb(235,85,53)" fg:x="10823319348" fg:w="6006785"/><text x="89.9633%" y="287.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (6,006,785 samples, 0.05%)</title><rect x="89.7133%" y="261" width="0.0498%" height="15" fill="rgb(233,133,31)" fg:x="10823319348" fg:w="6006785"/><text x="89.9633%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (6,006,785 samples, 0.05%)</title><rect x="89.7133%" y="245" width="0.0498%" height="15" fill="rgb(218,25,20)" fg:x="10823319348" fg:w="6006785"/><text x="89.9633%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6,006,785 samples, 0.05%)</title><rect x="89.7133%" y="229" width="0.0498%" height="15" fill="rgb(252,210,38)" fg:x="10823319348" fg:w="6006785"/><text x="89.9633%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3,013,125 samples, 0.02%)</title><rect x="89.7631%" y="309" width="0.0250%" height="15" fill="rgb(242,134,21)" fg:x="10829326133" fg:w="3013125"/><text x="90.0131%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (3,013,125 samples, 0.02%)</title><rect x="89.7631%" y="293" width="0.0250%" height="15" fill="rgb(213,28,48)" fg:x="10829326133" fg:w="3013125"/><text x="90.0131%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,013,125 samples, 0.02%)</title><rect x="89.7631%" y="277" width="0.0250%" height="15" fill="rgb(250,196,2)" fg:x="10829326133" fg:w="3013125"/><text x="90.0131%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,013,125 samples, 0.02%)</title><rect x="89.7631%" y="261" width="0.0250%" height="15" fill="rgb(227,5,17)" fg:x="10829326133" fg:w="3013125"/><text x="90.0131%" y="271.50"></text></g><g><title>alloc::alloc::alloc (3,013,125 samples, 0.02%)</title><rect x="89.7631%" y="245" width="0.0250%" height="15" fill="rgb(221,226,24)" fg:x="10829326133" fg:w="3013125"/><text x="90.0131%" y="255.50"></text></g><g><title>__rustc::__rdl_alloc (3,013,125 samples, 0.02%)</title><rect x="89.7631%" y="229" width="0.0250%" height="15" fill="rgb(211,5,48)" fg:x="10829326133" fg:w="3013125"/><text x="90.0131%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,013,125 samples, 0.02%)</title><rect x="89.7631%" y="213" width="0.0250%" height="15" fill="rgb(219,150,6)" fg:x="10829326133" fg:w="3013125"/><text x="90.0131%" y="223.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (30,094,966 samples, 0.25%)</title><rect x="89.7881%" y="245" width="0.2495%" height="15" fill="rgb(251,46,16)" fg:x="10832339258" fg:w="30094966"/><text x="90.0381%" y="255.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (45,395,961 samples, 0.38%)</title><rect x="89.7881%" y="309" width="0.3763%" height="15" fill="rgb(220,204,40)" fg:x="10832339258" fg:w="45395961"/><text x="90.0381%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45,395,961 samples, 0.38%)</title><rect x="89.7881%" y="293" width="0.3763%" height="15" fill="rgb(211,85,2)" fg:x="10832339258" fg:w="45395961"/><text x="90.0381%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (45,395,961 samples, 0.38%)</title><rect x="89.7881%" y="277" width="0.3763%" height="15" fill="rgb(229,17,7)" fg:x="10832339258" fg:w="45395961"/><text x="90.0381%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (45,395,961 samples, 0.38%)</title><rect x="89.7881%" y="261" width="0.3763%" height="15" fill="rgb(239,72,28)" fg:x="10832339258" fg:w="45395961"/><text x="90.0381%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (15,300,995 samples, 0.13%)</title><rect x="90.0376%" y="245" width="0.1268%" height="15" fill="rgb(230,47,54)" fg:x="10862434224" fg:w="15300995"/><text x="90.2876%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (12,199,330 samples, 0.10%)</title><rect x="90.0633%" y="229" width="0.1011%" height="15" fill="rgb(214,50,8)" fg:x="10865535889" fg:w="12199330"/><text x="90.3133%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,281,631 samples, 0.03%)</title><rect x="90.1644%" y="293" width="0.0272%" height="15" fill="rgb(216,198,43)" fg:x="10877735219" fg:w="3281631"/><text x="90.4144%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,281,631 samples, 0.03%)</title><rect x="90.1644%" y="277" width="0.0272%" height="15" fill="rgb(234,20,35)" fg:x="10877735219" fg:w="3281631"/><text x="90.4144%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (3,281,631 samples, 0.03%)</title><rect x="90.1644%" y="261" width="0.0272%" height="15" fill="rgb(254,45,19)" fg:x="10877735219" fg:w="3281631"/><text x="90.4144%" y="271.50"></text></g><g><title>__rustc::__rdl_dealloc (3,281,631 samples, 0.03%)</title><rect x="90.1644%" y="245" width="0.0272%" height="15" fill="rgb(219,14,44)" fg:x="10877735219" fg:w="3281631"/><text x="90.4144%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,281,631 samples, 0.03%)</title><rect x="90.1644%" y="229" width="0.0272%" height="15" fill="rgb(217,220,26)" fg:x="10877735219" fg:w="3281631"/><text x="90.4144%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = (u8,liblevenshtein::dictionary::pathmap::PathMapNode)&gt;&gt; (6,506,651 samples, 0.05%)</title><rect x="90.1644%" y="309" width="0.0539%" height="15" fill="rgb(213,158,28)" fg:x="10877735219" fg:w="6506651"/><text x="90.4144%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;smallvec::IntoIter&lt;[u8: 8]&gt;,&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt;&gt; (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="293" width="0.0267%" height="15" fill="rgb(252,51,52)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt; (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="277" width="0.0267%" height="15" fill="rgb(246,89,16)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="261" width="0.0267%" height="15" fill="rgb(216,158,49)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="245" width="0.0267%" height="15" fill="rgb(236,107,19)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="229" width="0.0267%" height="15" fill="rgb(228,185,30)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="213" width="0.0267%" height="15" fill="rgb(246,134,8)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="197" width="0.0267%" height="15" fill="rgb(214,143,50)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="181" width="0.0267%" height="15" fill="rgb(228,75,8)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="191.50"></text></g><g><title>__rustc::__rdl_dealloc (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="165" width="0.0267%" height="15" fill="rgb(207,175,4)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,225,020 samples, 0.03%)</title><rect x="90.1916%" y="149" width="0.0267%" height="15" fill="rgb(205,108,24)" fg:x="10881016850" fg:w="3225020"/><text x="90.4416%" y="159.50"></text></g><g><title>liblevenshtein::transducer::pool::StatePool::acquire (2,919,528 samples, 0.02%)</title><rect x="90.2445%" y="293" width="0.0242%" height="15" fill="rgb(244,120,49)" fg:x="10887406949" fg:w="2919528"/><text x="90.4945%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,234,486 samples, 0.13%)</title><rect x="90.3435%" y="261" width="0.1263%" height="15" fill="rgb(223,47,38)" fg:x="10899339787" fg:w="15234486"/><text x="90.5935%" y="271.50"></text></g><g><title>liblevenshtein::transducer::state::State::copy_from (42,350,934 samples, 0.35%)</title><rect x="90.2687%" y="277" width="0.3510%" height="15" fill="rgb(229,179,11)" fg:x="10890326477" fg:w="42350934"/><text x="90.5187%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18,103,138 samples, 0.15%)</title><rect x="90.4697%" y="261" width="0.1501%" height="15" fill="rgb(231,122,1)" fg:x="10914574273" fg:w="18103138"/><text x="90.7197%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (18,103,138 samples, 0.15%)</title><rect x="90.4697%" y="245" width="0.1501%" height="15" fill="rgb(245,119,9)" fg:x="10914574273" fg:w="18103138"/><text x="90.7197%" y="255.50"></text></g><g><title>core::ptr::write (6,177,879 samples, 0.05%)</title><rect x="90.5686%" y="229" width="0.0512%" height="15" fill="rgb(241,163,25)" fg:x="10926499532" fg:w="6177879"/><text x="90.8186%" y="239.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::clone::Clone&gt;::clone (33,783,100 samples, 0.28%)</title><rect x="90.6909%" y="261" width="0.2800%" height="15" fill="rgb(217,214,3)" fg:x="10941258804" fg:w="33783100"/><text x="90.9409%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (6,022,664 samples, 0.05%)</title><rect x="90.9709%" y="261" width="0.0499%" height="15" fill="rgb(240,86,28)" fg:x="10975041904" fg:w="6022664"/><text x="91.2209%" y="271.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (6,022,664 samples, 0.05%)</title><rect x="90.9709%" y="245" width="0.0499%" height="15" fill="rgb(215,47,9)" fg:x="10975041904" fg:w="6022664"/><text x="91.2209%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (6,022,664 samples, 0.05%)</title><rect x="90.9709%" y="229" width="0.0499%" height="15" fill="rgb(252,25,45)" fg:x="10975041904" fg:w="6022664"/><text x="91.2209%" y="239.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (6,022,664 samples, 0.05%)</title><rect x="90.9709%" y="213" width="0.0499%" height="15" fill="rgb(251,164,9)" fg:x="10975041904" fg:w="6022664"/><text x="91.2209%" y="223.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::PartialEq&gt;::eq (6,022,664 samples, 0.05%)</title><rect x="90.9709%" y="197" width="0.0499%" height="15" fill="rgb(233,194,0)" fg:x="10975041904" fg:w="6022664"/><text x="91.2209%" y="207.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (3,312,877 samples, 0.03%)</title><rect x="91.0209%" y="261" width="0.0275%" height="15" fill="rgb(249,111,24)" fg:x="10981064568" fg:w="3312877"/><text x="91.2709%" y="271.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (3,312,877 samples, 0.03%)</title><rect x="91.0209%" y="245" width="0.0275%" height="15" fill="rgb(250,223,3)" fg:x="10981064568" fg:w="3312877"/><text x="91.2709%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::new (2,918,730 samples, 0.02%)</title><rect x="91.0483%" y="261" width="0.0242%" height="15" fill="rgb(236,178,37)" fg:x="10984377445" fg:w="2918730"/><text x="91.2983%" y="271.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (1,583,861,308 samples, 13.13%)</title><rect x="78.2918%" y="325" width="13.1285%" height="15" fill="rgb(241,158,50)" fg:x="9445388270" fg:w="1583861308"/><text x="78.5418%" y="335.50">liblevenshtein::tran..</text></g><g><title>liblevenshtein::transducer::transition::transition_state_pooled (145,007,708 samples, 1.20%)</title><rect x="90.2183%" y="309" width="1.2020%" height="15" fill="rgb(213,121,41)" fg:x="10884241870" fg:w="145007708"/><text x="90.4683%" y="319.50"></text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_into (138,923,101 samples, 1.15%)</title><rect x="90.2687%" y="293" width="1.1515%" height="15" fill="rgb(240,92,3)" fg:x="10890326477" fg:w="138923101"/><text x="90.5187%" y="303.50"></text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_mut (96,572,167 samples, 0.80%)</title><rect x="90.6198%" y="277" width="0.8005%" height="15" fill="rgb(205,123,3)" fg:x="10932677411" fg:w="96572167"/><text x="90.8698%" y="287.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (41,953,403 samples, 0.35%)</title><rect x="91.0725%" y="261" width="0.3477%" height="15" fill="rgb(205,97,47)" fg:x="10987296175" fg:w="41953403"/><text x="91.3225%" y="271.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (35,918,045 samples, 0.30%)</title><rect x="91.1225%" y="245" width="0.2977%" height="15" fill="rgb(247,152,14)" fg:x="10993331533" fg:w="35918045"/><text x="91.3725%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (14,545,669 samples, 0.12%)</title><rect x="91.2997%" y="229" width="0.1206%" height="15" fill="rgb(248,195,53)" fg:x="11014703909" fg:w="14545669"/><text x="91.5497%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,125,891 samples, 0.03%)</title><rect x="91.8544%" y="309" width="0.0259%" height="15" fill="rgb(226,201,16)" fg:x="11081627083" fg:w="3125891"/><text x="92.1044%" y="319.50"></text></g><g><title>core::ptr::copy (25,123,417 samples, 0.21%)</title><rect x="91.8803%" y="277" width="0.2082%" height="15" fill="rgb(205,98,0)" fg:x="11084752974" fg:w="25123417"/><text x="92.1303%" y="287.50"></text></g><g><title>[libc.so.6] (19,074,683 samples, 0.16%)</title><rect x="91.9305%" y="261" width="0.1581%" height="15" fill="rgb(214,191,48)" fg:x="11090801708" fg:w="19074683"/><text x="92.1805%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (37,331,552 samples, 0.31%)</title><rect x="91.8803%" y="309" width="0.3094%" height="15" fill="rgb(237,112,39)" fg:x="11084752974" fg:w="37331552"/><text x="92.1303%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert_mut (37,331,552 samples, 0.31%)</title><rect x="91.8803%" y="293" width="0.3094%" height="15" fill="rgb(247,203,27)" fg:x="11084752974" fg:w="37331552"/><text x="92.1303%" y="303.50"></text></g><g><title>core::ptr::write (12,208,135 samples, 0.10%)</title><rect x="92.0886%" y="277" width="0.1012%" height="15" fill="rgb(235,124,28)" fg:x="11109876391" fg:w="12208135"/><text x="92.3386%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (36,657,210 samples, 0.30%)</title><rect x="92.1898%" y="309" width="0.3038%" height="15" fill="rgb(208,207,46)" fg:x="11122084526" fg:w="36657210"/><text x="92.4398%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (36,657,210 samples, 0.30%)</title><rect x="92.1898%" y="293" width="0.3038%" height="15" fill="rgb(234,176,4)" fg:x="11122084526" fg:w="36657210"/><text x="92.4398%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (36,657,210 samples, 0.30%)</title><rect x="92.1898%" y="277" width="0.3038%" height="15" fill="rgb(230,133,28)" fg:x="11122084526" fg:w="36657210"/><text x="92.4398%" y="287.50"></text></g><g><title>core::ptr::copy_nonoverlapping (2,855,618 samples, 0.02%)</title><rect x="92.4699%" y="261" width="0.0237%" height="15" fill="rgb(211,137,40)" fg:x="11155886118" fg:w="2855618"/><text x="92.7199%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search::{{closure}} (30,037,914 samples, 0.25%)</title><rect x="92.4936%" y="277" width="0.2490%" height="15" fill="rgb(254,35,13)" fg:x="11158741736" fg:w="30037914"/><text x="92.7436%" y="287.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::Ord&gt;::cmp (30,037,914 samples, 0.25%)</title><rect x="92.4936%" y="261" width="0.2490%" height="15" fill="rgb(225,49,51)" fg:x="11158741736" fg:w="30037914"/><text x="92.7436%" y="271.50"></text></g><g><title>liblevenshtein::transducer::position::Position::compare (30,037,914 samples, 0.25%)</title><rect x="92.4936%" y="245" width="0.2490%" height="15" fill="rgb(251,10,15)" fg:x="11158741736" fg:w="30037914"/><text x="92.7436%" y="255.50"></text></g><g><title>core::cmp::Ordering::then_with (17,939,742 samples, 0.15%)</title><rect x="92.5939%" y="229" width="0.1487%" height="15" fill="rgb(228,207,15)" fg:x="11170839908" fg:w="17939742"/><text x="92.8439%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (36,293,283 samples, 0.30%)</title><rect x="92.4936%" y="309" width="0.3008%" height="15" fill="rgb(241,99,19)" fg:x="11158741736" fg:w="36293283"/><text x="92.7436%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (36,293,283 samples, 0.30%)</title><rect x="92.4936%" y="293" width="0.3008%" height="15" fill="rgb(207,104,49)" fg:x="11158741736" fg:w="36293283"/><text x="92.7436%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (6,255,369 samples, 0.05%)</title><rect x="92.7426%" y="277" width="0.0519%" height="15" fill="rgb(234,99,18)" fg:x="11188779650" fg:w="6255369"/><text x="92.9926%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6,255,369 samples, 0.05%)</title><rect x="92.7426%" y="261" width="0.0519%" height="15" fill="rgb(213,191,49)" fg:x="11188779650" fg:w="6255369"/><text x="92.9926%" y="271.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (168,737,112 samples, 1.40%)</title><rect x="91.4203%" y="325" width="1.3986%" height="15" fill="rgb(210,226,19)" fg:x="11029249578" fg:w="168737112"/><text x="91.6703%" y="335.50"></text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (2,951,671 samples, 0.02%)</title><rect x="92.7944%" y="309" width="0.0245%" height="15" fill="rgb(229,97,18)" fg:x="11195035019" fg:w="2951671"/><text x="93.0444%" y="319.50"></text></g><g><title>malloc (3,114,761 samples, 0.03%)</title><rect x="92.8256%" y="325" width="0.0258%" height="15" fill="rgb(211,167,15)" fg:x="11198795425" fg:w="3114761"/><text x="93.0756%" y="335.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::ensure_root (3,141,721 samples, 0.03%)</title><rect x="93.5667%" y="309" width="0.0260%" height="15" fill="rgb(210,169,34)" fg:x="11288200737" fg:w="3141721"/><text x="93.8167%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3,141,721 samples, 0.03%)</title><rect x="93.5667%" y="293" width="0.0260%" height="15" fill="rgb(241,121,31)" fg:x="11288200737" fg:w="3141721"/><text x="93.8167%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (36,978,245 samples, 0.31%)</title><rect x="94.1670%" y="277" width="0.3065%" height="15" fill="rgb(232,40,11)" fg:x="11360625834" fg:w="36978245"/><text x="94.4170%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (36,978,245 samples, 0.31%)</title><rect x="94.1670%" y="261" width="0.3065%" height="15" fill="rgb(205,86,26)" fg:x="11360625834" fg:w="36978245"/><text x="94.4170%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (36,978,245 samples, 0.31%)</title><rect x="94.1670%" y="245" width="0.3065%" height="15" fill="rgb(231,126,28)" fg:x="11360625834" fg:w="36978245"/><text x="94.4170%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (30,782,165 samples, 0.26%)</title><rect x="94.2184%" y="229" width="0.2552%" height="15" fill="rgb(219,221,18)" fg:x="11366821914" fg:w="30782165"/><text x="94.4684%" y="239.50"></text></g><g><title>[libc.so.6] (21,815,513 samples, 0.18%)</title><rect x="94.2927%" y="213" width="0.1808%" height="15" fill="rgb(211,40,0)" fg:x="11375788566" fg:w="21815513"/><text x="94.5427%" y="223.50"></text></g><g><title>[libc.so.6] (82,608,079 samples, 0.68%)</title><rect x="94.6484%" y="117" width="0.6847%" height="15" fill="rgb(239,85,43)" fg:x="11418698991" fg:w="82608079"/><text x="94.8984%" y="127.50"></text></g><g><title>[libc.so.6] (76,598,532 samples, 0.63%)</title><rect x="94.6982%" y="101" width="0.6349%" height="15" fill="rgb(231,55,21)" fg:x="11424708538" fg:w="76598532"/><text x="94.9482%" y="111.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (3,253,682 samples, 0.03%)</title><rect x="95.3331%" y="117" width="0.0270%" height="15" fill="rgb(225,184,43)" fg:x="11501307070" fg:w="3253682"/><text x="95.5831%" y="127.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (3,253,682 samples, 0.03%)</title><rect x="95.3331%" y="101" width="0.0270%" height="15" fill="rgb(251,158,41)" fg:x="11501307070" fg:w="3253682"/><text x="95.5831%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter_map (3,253,682 samples, 0.03%)</title><rect x="95.3331%" y="85" width="0.0270%" height="15" fill="rgb(234,159,37)" fg:x="11501307070" fg:w="3253682"/><text x="95.5831%" y="95.50"></text></g><g><title>core::iter::adapters::filter_map::FilterMap&lt;I,F&gt;::new (3,253,682 samples, 0.03%)</title><rect x="95.3331%" y="69" width="0.0270%" height="15" fill="rgb(216,204,22)" fg:x="11501307070" fg:w="3253682"/><text x="95.5831%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (248,098,502 samples, 2.06%)</title><rect x="94.4735%" y="277" width="2.0565%" height="15" fill="rgb(214,17,3)" fg:x="11397604079" fg:w="248098502"/><text x="94.7235%" y="287.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (248,098,502 samples, 2.06%)</title><rect x="94.4735%" y="261" width="2.0565%" height="15" fill="rgb(212,111,17)" fg:x="11397604079" fg:w="248098502"/><text x="94.7235%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (248,098,502 samples, 2.06%)</title><rect x="94.4735%" y="245" width="2.0565%" height="15" fill="rgb(221,157,24)" fg:x="11397604079" fg:w="248098502"/><text x="94.7235%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (248,098,502 samples, 2.06%)</title><rect x="94.4735%" y="229" width="2.0565%" height="15" fill="rgb(252,16,13)" fg:x="11397604079" fg:w="248098502"/><text x="94.7235%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (248,098,502 samples, 2.06%)</title><rect x="94.4735%" y="213" width="2.0565%" height="15" fill="rgb(221,62,2)" fg:x="11397604079" fg:w="248098502"/><text x="94.7235%" y="223.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (245,045,975 samples, 2.03%)</title><rect x="94.4988%" y="197" width="2.0312%" height="15" fill="rgb(247,87,22)" fg:x="11400656606" fg:w="245045975"/><text x="94.7488%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (245,045,975 samples, 2.03%)</title><rect x="94.4988%" y="181" width="2.0312%" height="15" fill="rgb(215,73,9)" fg:x="11400656606" fg:w="245045975"/><text x="94.7488%" y="191.50">a..</text></g><g><title>alloc::alloc::alloc (245,045,975 samples, 2.03%)</title><rect x="94.4988%" y="165" width="2.0312%" height="15" fill="rgb(207,175,33)" fg:x="11400656606" fg:w="245045975"/><text x="94.7488%" y="175.50">a..</text></g><g><title>__rustc::__rdl_alloc (245,045,975 samples, 2.03%)</title><rect x="94.4988%" y="149" width="2.0312%" height="15" fill="rgb(243,129,54)" fg:x="11400656606" fg:w="245045975"/><text x="94.7488%" y="159.50">_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (245,045,975 samples, 2.03%)</title><rect x="94.4988%" y="133" width="2.0312%" height="15" fill="rgb(227,119,45)" fg:x="11400656606" fg:w="245045975"/><text x="94.7488%" y="143.50">s..</text></g><g><title>malloc (141,141,829 samples, 1.17%)</title><rect x="95.3601%" y="117" width="1.1699%" height="15" fill="rgb(205,109,36)" fg:x="11504560752" fg:w="141141829"/><text x="95.6101%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9,002,466 samples, 0.07%)</title><rect x="96.5818%" y="261" width="0.0746%" height="15" fill="rgb(205,6,39)" fg:x="11651960388" fg:w="9002466"/><text x="96.8318%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9,002,466 samples, 0.07%)</title><rect x="96.5818%" y="245" width="0.0746%" height="15" fill="rgb(221,32,16)" fg:x="11651960388" fg:w="9002466"/><text x="96.8318%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,002,466 samples, 0.07%)</title><rect x="96.5818%" y="229" width="0.0746%" height="15" fill="rgb(228,144,50)" fg:x="11651960388" fg:w="9002466"/><text x="96.8318%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,002,466 samples, 0.07%)</title><rect x="96.5818%" y="213" width="0.0746%" height="15" fill="rgb(229,201,53)" fg:x="11651960388" fg:w="9002466"/><text x="96.8318%" y="223.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (9,002,466 samples, 0.07%)</title><rect x="96.5818%" y="197" width="0.0746%" height="15" fill="rgb(249,153,27)" fg:x="11651960388" fg:w="9002466"/><text x="96.8318%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (2,775,349 samples, 0.02%)</title><rect x="96.8647%" y="165" width="0.0230%" height="15" fill="rgb(227,106,25)" fg:x="11686080835" fg:w="2775349"/><text x="97.1147%" y="175.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (30,818,117 samples, 0.26%)</title><rect x="96.6565%" y="261" width="0.2554%" height="15" fill="rgb(230,65,29)" fg:x="11660962854" fg:w="30818117"/><text x="96.9065%" y="271.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (30,818,117 samples, 0.26%)</title><rect x="96.6565%" y="245" width="0.2554%" height="15" fill="rgb(221,57,46)" fg:x="11660962854" fg:w="30818117"/><text x="96.9065%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (27,815,405 samples, 0.23%)</title><rect x="96.6814%" y="229" width="0.2306%" height="15" fill="rgb(229,161,17)" fg:x="11663965566" fg:w="27815405"/><text x="96.9314%" y="239.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (15,121,628 samples, 0.13%)</title><rect x="96.7866%" y="213" width="0.1253%" height="15" fill="rgb(222,213,11)" fg:x="11676659343" fg:w="15121628"/><text x="97.0366%" y="223.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (11,875,502 samples, 0.10%)</title><rect x="96.8135%" y="197" width="0.0984%" height="15" fill="rgb(235,35,13)" fg:x="11679905469" fg:w="11875502"/><text x="97.0635%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::with_addr (5,700,136 samples, 0.05%)</title><rect x="96.8647%" y="181" width="0.0472%" height="15" fill="rgb(233,158,34)" fg:x="11686080835" fg:w="5700136"/><text x="97.1147%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_byte_offset (2,924,787 samples, 0.02%)</title><rect x="96.8877%" y="165" width="0.0242%" height="15" fill="rgb(215,151,48)" fg:x="11688856184" fg:w="2924787"/><text x="97.1377%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (2,924,787 samples, 0.02%)</title><rect x="96.8877%" y="149" width="0.0242%" height="15" fill="rgb(229,84,14)" fg:x="11688856184" fg:w="2924787"/><text x="97.1377%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (21,748,350 samples, 0.18%)</title><rect x="97.1436%" y="229" width="0.1803%" height="15" fill="rgb(229,68,14)" fg:x="11719735321" fg:w="21748350"/><text x="97.3936%" y="239.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (21,748,350 samples, 0.18%)</title><rect x="97.1436%" y="213" width="0.1803%" height="15" fill="rgb(243,106,26)" fg:x="11719735321" fg:w="21748350"/><text x="97.3936%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (21,748,350 samples, 0.18%)</title><rect x="97.1436%" y="197" width="0.1803%" height="15" fill="rgb(206,45,38)" fg:x="11719735321" fg:w="21748350"/><text x="97.3936%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (21,748,350 samples, 0.18%)</title><rect x="97.1436%" y="181" width="0.1803%" height="15" fill="rgb(226,6,15)" fg:x="11719735321" fg:w="21748350"/><text x="97.3936%" y="191.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (18,766,144 samples, 0.16%)</title><rect x="97.3778%" y="213" width="0.1556%" height="15" fill="rgb(232,22,54)" fg:x="11747990811" fg:w="18766144"/><text x="97.6278%" y="223.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (18,766,144 samples, 0.16%)</title><rect x="97.3778%" y="197" width="0.1556%" height="15" fill="rgb(229,222,32)" fg:x="11747990811" fg:w="18766144"/><text x="97.6278%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (6,189,434 samples, 0.05%)</title><rect x="97.5334%" y="213" width="0.0513%" height="15" fill="rgb(228,62,29)" fg:x="11766756955" fg:w="6189434"/><text x="97.7834%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6,189,434 samples, 0.05%)</title><rect x="97.5334%" y="197" width="0.0513%" height="15" fill="rgb(251,103,34)" fg:x="11766756955" fg:w="6189434"/><text x="97.7834%" y="207.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (74,988,918 samples, 0.62%)</title><rect x="97.1168%" y="245" width="0.6216%" height="15" fill="rgb(233,12,30)" fg:x="11716499942" fg:w="74988918"/><text x="97.3668%" y="255.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (50,005,189 samples, 0.41%)</title><rect x="97.3239%" y="229" width="0.4145%" height="15" fill="rgb(238,52,0)" fg:x="11741483671" fg:w="50005189"/><text x="97.5739%" y="239.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (18,542,471 samples, 0.15%)</title><rect x="97.5847%" y="213" width="0.1537%" height="15" fill="rgb(223,98,5)" fg:x="11772946389" fg:w="18542471"/><text x="97.8347%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (46,520,282 samples, 0.39%)</title><rect x="98.0372%" y="229" width="0.3856%" height="15" fill="rgb(228,75,37)" fg:x="11827534341" fg:w="46520282"/><text x="98.2872%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (46,520,282 samples, 0.39%)</title><rect x="98.0372%" y="213" width="0.3856%" height="15" fill="rgb(205,115,49)" fg:x="11827534341" fg:w="46520282"/><text x="98.2872%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (46,520,282 samples, 0.39%)</title><rect x="98.0372%" y="197" width="0.3856%" height="15" fill="rgb(250,154,43)" fg:x="11827534341" fg:w="46520282"/><text x="98.2872%" y="207.50"></text></g><g><title>[libc.so.6] (30,942,059 samples, 0.26%)</title><rect x="98.1663%" y="181" width="0.2565%" height="15" fill="rgb(226,43,29)" fg:x="11843112564" fg:w="30942059"/><text x="98.4163%" y="191.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::child_in_slot (15,232,740 samples, 0.13%)</title><rect x="98.4228%" y="229" width="0.1263%" height="15" fill="rgb(249,228,39)" fg:x="11874054623" fg:w="15232740"/><text x="98.6728%" y="239.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::ops::deref::Deref&gt;::deref (15,232,740 samples, 0.13%)</title><rect x="98.4228%" y="213" width="0.1263%" height="15" fill="rgb(216,79,43)" fg:x="11874054623" fg:w="15232740"/><text x="98.6728%" y="223.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::is_used_child_0 (3,219,019 samples, 0.03%)</title><rect x="98.5490%" y="229" width="0.0267%" height="15" fill="rgb(228,95,12)" fg:x="11889287363" fg:w="3219019"/><text x="98.7990%" y="239.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (209,358,990 samples, 1.74%)</title><rect x="96.9119%" y="261" width="1.7354%" height="15" fill="rgb(249,221,15)" fg:x="11691780971" fg:w="209358990"/><text x="97.1619%" y="271.50"></text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (109,651,101 samples, 0.91%)</title><rect x="97.7384%" y="245" width="0.9089%" height="15" fill="rgb(233,34,13)" fg:x="11791488860" fg:w="109651101"/><text x="97.9884%" y="255.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (8,633,579 samples, 0.07%)</title><rect x="98.5757%" y="229" width="0.0716%" height="15" fill="rgb(214,103,39)" fg:x="11892506382" fg:w="8633579"/><text x="98.8257%" y="239.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (8,633,579 samples, 0.07%)</title><rect x="98.5757%" y="213" width="0.0716%" height="15" fill="rgb(251,126,39)" fg:x="11892506382" fg:w="8633579"/><text x="98.8257%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,175,247 samples, 0.03%)</title><rect x="98.6979%" y="229" width="0.0263%" height="15" fill="rgb(214,216,36)" fg:x="11907246809" fg:w="3175247"/><text x="98.9479%" y="239.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val::{{closure}} (3,175,247 samples, 0.03%)</title><rect x="98.6979%" y="213" width="0.0263%" height="15" fill="rgb(220,221,8)" fg:x="11907246809" fg:w="3175247"/><text x="98.9479%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::val (3,175,247 samples, 0.03%)</title><rect x="98.6979%" y="197" width="0.0263%" height="15" fill="rgb(240,216,3)" fg:x="11907246809" fg:w="3175247"/><text x="98.9479%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,175,247 samples, 0.03%)</title><rect x="98.6979%" y="181" width="0.0263%" height="15" fill="rgb(232,218,17)" fg:x="11907246809" fg:w="3175247"/><text x="98.9479%" y="191.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (3,124,777 samples, 0.03%)</title><rect x="98.7719%" y="213" width="0.0259%" height="15" fill="rgb(229,163,45)" fg:x="11916170788" fg:w="3124777"/><text x="99.0219%" y="223.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (3,124,777 samples, 0.03%)</title><rect x="98.7719%" y="197" width="0.0259%" height="15" fill="rgb(231,110,42)" fg:x="11916170788" fg:w="3124777"/><text x="99.0219%" y="207.50"></text></g><g><title>pathmap::zipper::node_along_path (276,563,617 samples, 2.29%)</title><rect x="96.5300%" y="277" width="2.2924%" height="15" fill="rgb(208,170,48)" fg:x="11645702581" fg:w="276563617"/><text x="96.7800%" y="287.50">p..</text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_val (21,126,237 samples, 0.18%)</title><rect x="98.6473%" y="261" width="0.1751%" height="15" fill="rgb(239,116,25)" fg:x="11901139961" fg:w="21126237"/><text x="98.8973%" y="271.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val (21,126,237 samples, 0.18%)</title><rect x="98.6473%" y="245" width="0.1751%" height="15" fill="rgb(219,200,50)" fg:x="11901139961" fg:w="21126237"/><text x="98.8973%" y="255.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (11,844,142 samples, 0.10%)</title><rect x="98.7242%" y="229" width="0.0982%" height="15" fill="rgb(245,200,0)" fg:x="11910422056" fg:w="11844142"/><text x="98.9742%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2,970,633 samples, 0.02%)</title><rect x="98.7978%" y="213" width="0.0246%" height="15" fill="rgb(245,119,33)" fg:x="11919295565" fg:w="2970633"/><text x="99.0478%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,970,633 samples, 0.02%)</title><rect x="98.7978%" y="197" width="0.0246%" height="15" fill="rgb(231,125,12)" fg:x="11919295565" fg:w="2970633"/><text x="99.0478%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,897,442 samples, 0.02%)</title><rect x="99.1718%" y="261" width="0.0240%" height="15" fill="rgb(216,96,41)" fg:x="11964420992" fg:w="2897442"/><text x="99.4218%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,897,442 samples, 0.02%)</title><rect x="99.1718%" y="245" width="0.0240%" height="15" fill="rgb(248,43,45)" fg:x="11964420992" fg:w="2897442"/><text x="99.4218%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,897,442 samples, 0.02%)</title><rect x="99.1718%" y="229" width="0.0240%" height="15" fill="rgb(217,222,7)" fg:x="11964420992" fg:w="2897442"/><text x="99.4218%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,897,442 samples, 0.02%)</title><rect x="99.1718%" y="213" width="0.0240%" height="15" fill="rgb(233,28,6)" fg:x="11964420992" fg:w="2897442"/><text x="99.4218%" y="223.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (2,897,442 samples, 0.02%)</title><rect x="99.1718%" y="197" width="0.0240%" height="15" fill="rgb(231,218,15)" fg:x="11964420992" fg:w="2897442"/><text x="99.4218%" y="207.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (5,988,414 samples, 0.05%)</title><rect x="99.1958%" y="261" width="0.0496%" height="15" fill="rgb(226,171,48)" fg:x="11967318434" fg:w="5988414"/><text x="99.4458%" y="271.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (5,988,414 samples, 0.05%)</title><rect x="99.1958%" y="245" width="0.0496%" height="15" fill="rgb(235,201,9)" fg:x="11967318434" fg:w="5988414"/><text x="99.4458%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (5,988,414 samples, 0.05%)</title><rect x="99.1958%" y="229" width="0.0496%" height="15" fill="rgb(217,80,15)" fg:x="11967318434" fg:w="5988414"/><text x="99.4458%" y="239.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (5,988,414 samples, 0.05%)</title><rect x="99.1958%" y="213" width="0.0496%" height="15" fill="rgb(219,152,8)" fg:x="11967318434" fg:w="5988414"/><text x="99.4458%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (12,044,584 samples, 0.10%)</title><rect x="99.2455%" y="229" width="0.0998%" height="15" fill="rgb(243,107,38)" fg:x="11973306848" fg:w="12044584"/><text x="99.4955%" y="239.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (9,009,492 samples, 0.07%)</title><rect x="99.2706%" y="213" width="0.0747%" height="15" fill="rgb(231,17,5)" fg:x="11976341940" fg:w="9009492"/><text x="99.5206%" y="223.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (9,009,492 samples, 0.07%)</title><rect x="99.2706%" y="197" width="0.0747%" height="15" fill="rgb(209,25,54)" fg:x="11976341940" fg:w="9009492"/><text x="99.5206%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (9,009,492 samples, 0.07%)</title><rect x="99.2706%" y="181" width="0.0747%" height="15" fill="rgb(219,0,2)" fg:x="11976341940" fg:w="9009492"/><text x="99.5206%" y="191.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (3,054,043 samples, 0.03%)</title><rect x="99.3453%" y="213" width="0.0253%" height="15" fill="rgb(246,9,5)" fg:x="11985351432" fg:w="3054043"/><text x="99.5953%" y="223.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (3,054,043 samples, 0.03%)</title><rect x="99.3453%" y="197" width="0.0253%" height="15" fill="rgb(226,159,4)" fg:x="11985351432" fg:w="3054043"/><text x="99.5953%" y="207.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (801,846,079 samples, 6.65%)</title><rect x="92.8514%" y="325" width="6.6464%" height="15" fill="rgb(219,175,34)" fg:x="11201910186" fg:w="801846079"/><text x="93.1014%" y="335.50">pathmap::..</text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (712,413,807 samples, 5.91%)</title><rect x="93.5927%" y="309" width="5.9051%" height="15" fill="rgb(236,10,46)" fg:x="11291342458" fg:w="712413807"/><text x="93.8427%" y="319.50">pathmap:..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (697,523,321 samples, 5.78%)</title><rect x="93.7162%" y="293" width="5.7817%" height="15" fill="rgb(240,211,16)" fg:x="11306232944" fg:w="697523321"/><text x="93.9662%" y="303.50">pathmap..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (81,490,067 samples, 0.68%)</title><rect x="98.8224%" y="277" width="0.6755%" height="15" fill="rgb(205,3,43)" fg:x="11922266198" fg:w="81490067"/><text x="99.0724%" y="287.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (30,449,417 samples, 0.25%)</title><rect x="99.2455%" y="261" width="0.2524%" height="15" fill="rgb(245,7,22)" fg:x="11973306848" fg:w="30449417"/><text x="99.4955%" y="271.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (30,449,417 samples, 0.25%)</title><rect x="99.2455%" y="245" width="0.2524%" height="15" fill="rgb(239,132,32)" fg:x="11973306848" fg:w="30449417"/><text x="99.4955%" y="255.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (18,404,833 samples, 0.15%)</title><rect x="99.3453%" y="229" width="0.1526%" height="15" fill="rgb(228,202,34)" fg:x="11985351432" fg:w="18404833"/><text x="99.5953%" y="239.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (15,350,790 samples, 0.13%)</title><rect x="99.3706%" y="213" width="0.1272%" height="15" fill="rgb(254,200,22)" fg:x="11988405475" fg:w="15350790"/><text x="99.6206%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (5,808,685 samples, 0.05%)</title><rect x="99.4497%" y="197" width="0.0481%" height="15" fill="rgb(219,10,39)" fg:x="11997947580" fg:w="5808685"/><text x="99.6997%" y="207.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (12,648,710 samples, 0.10%)</title><rect x="99.5068%" y="325" width="0.1048%" height="15" fill="rgb(226,210,39)" fg:x="12004837848" fg:w="12648710"/><text x="99.7568%" y="335.50"></text></g><g><title>profile::create_dictionary (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="325" width="0.0272%" height="15" fill="rgb(208,219,16)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="335.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapDictionary::from_iter (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="309" width="0.0272%" height="15" fill="rgb(216,158,51)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="293" width="0.0272%" height="15" fill="rgb(233,14,44)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="277" width="0.0272%" height="15" fill="rgb(237,97,39)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="261" width="0.0272%" height="15" fill="rgb(218,198,43)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="245" width="0.0272%" height="15" fill="rgb(231,104,20)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="229" width="0.0272%" height="15" fill="rgb(254,36,13)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="213" width="0.0272%" height="15" fill="rgb(248,14,50)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="197" width="0.0272%" height="15" fill="rgb(217,107,29)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="181" width="0.0272%" height="15" fill="rgb(251,169,33)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="165" width="0.0272%" height="15" fill="rgb(217,108,32)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="175.50"></text></g><g><title>[libc.so.6] (3,279,264 samples, 0.03%)</title><rect x="99.6117%" y="149" width="0.0272%" height="15" fill="rgb(219,66,42)" fg:x="12017486558" fg:w="3279264"/><text x="99.8617%" y="159.50"></text></g><g><title>[libc.so.6] (22,794,751 samples, 0.19%)</title><rect x="99.6388%" y="117" width="0.1889%" height="15" fill="rgb(206,180,7)" fg:x="12020765822" fg:w="22794751"/><text x="99.8888%" y="127.50"></text></g><g><title>profile::main (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="325" width="0.2617%" height="15" fill="rgb(208,226,31)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="309" width="0.2617%" height="15" fill="rgb(218,26,49)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="293" width="0.2617%" height="15" fill="rgb(233,197,48)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="277" width="0.2617%" height="15" fill="rgb(252,181,51)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="261" width="0.2617%" height="15" fill="rgb(253,90,19)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="245" width="0.2617%" height="15" fill="rgb(215,171,30)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="229" width="0.2617%" height="15" fill="rgb(214,222,9)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="213" width="0.2617%" height="15" fill="rgb(223,3,22)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="197" width="0.2617%" height="15" fill="rgb(225,196,46)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="181" width="0.2617%" height="15" fill="rgb(209,110,37)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="165" width="0.2617%" height="15" fill="rgb(249,89,12)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="175.50"></text></g><g><title>__rustc::__rdl_dealloc (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="149" width="0.2617%" height="15" fill="rgb(226,27,33)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (31,567,032 samples, 0.26%)</title><rect x="99.6388%" y="133" width="0.2617%" height="15" fill="rgb(213,82,22)" fg:x="12020765822" fg:w="31567032"/><text x="99.8888%" y="143.50"></text></g><g><title>cfree (8,772,281 samples, 0.07%)</title><rect x="99.8278%" y="117" width="0.0727%" height="15" fill="rgb(248,140,0)" fg:x="12043560573" fg:w="8772281"/><text x="100.0778%" y="127.50"></text></g><g><title>realloc (3,144,847 samples, 0.03%)</title><rect x="99.9005%" y="325" width="0.0261%" height="15" fill="rgb(228,106,3)" fg:x="12052332854" fg:w="3144847"/><text x="100.1505%" y="335.50"></text></g><g><title>[libc.so.6] (3,147,849 samples, 0.03%)</title><rect x="99.9266%" y="277" width="0.0261%" height="15" fill="rgb(209,23,37)" fg:x="12055477701" fg:w="3147849"/><text x="100.1766%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="277" width="0.0246%" height="15" fill="rgb(241,93,50)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="261" width="0.0246%" height="15" fill="rgb(253,46,43)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="245" width="0.0246%" height="15" fill="rgb(226,206,43)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="229" width="0.0246%" height="15" fill="rgb(217,54,7)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="213" width="0.0246%" height="15" fill="rgb(223,5,52)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="197" width="0.0246%" height="15" fill="rgb(206,52,46)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="181" width="0.0246%" height="15" fill="rgb(253,136,11)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="165" width="0.0246%" height="15" fill="rgb(208,106,33)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="175.50"></text></g><g><title>cfree (2,970,447 samples, 0.02%)</title><rect x="99.9527%" y="149" width="0.0246%" height="15" fill="rgb(206,54,4)" fg:x="12058625550" fg:w="2970447"/><text x="100.2027%" y="159.50"></text></g><g><title>all (12,064,337,717 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(213,3,15)" fg:x="0" fg:w="12064337717"/><text x="0.2500%" y="367.50"></text></g><g><title>profile (12,064,337,717 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(252,211,39)" fg:x="0" fg:w="12064337717"/><text x="0.2500%" y="351.50">profile</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8,860,016 samples, 0.07%)</title><rect x="99.9266%" y="325" width="0.0734%" height="15" fill="rgb(223,6,36)" fg:x="12055477701" fg:w="8860016"/><text x="100.1766%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (8,860,016 samples, 0.07%)</title><rect x="99.9266%" y="309" width="0.0734%" height="15" fill="rgb(252,169,45)" fg:x="12055477701" fg:w="8860016"/><text x="100.1766%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::query::QueryIterator&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (8,860,016 samples, 0.07%)</title><rect x="99.9266%" y="293" width="0.0734%" height="15" fill="rgb(212,48,26)" fg:x="12055477701" fg:w="8860016"/><text x="100.1766%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::pool::StatePool&gt; (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="277" width="0.0227%" height="15" fill="rgb(251,102,48)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::state::State&gt;&gt; (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="261" width="0.0227%" height="15" fill="rgb(243,208,16)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="245" width="0.0227%" height="15" fill="rgb(219,96,24)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[liblevenshtein::transducer::state::State]&gt; (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="229" width="0.0227%" height="15" fill="rgb(219,33,29)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="213" width="0.0227%" height="15" fill="rgb(223,176,5)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="197" width="0.0227%" height="15" fill="rgb(228,140,14)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="181" width="0.0227%" height="15" fill="rgb(217,179,31)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="165" width="0.0227%" height="15" fill="rgb(230,9,30)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="149" width="0.0227%" height="15" fill="rgb(230,136,20)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="133" width="0.0227%" height="15" fill="rgb(215,210,22)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="117" width="0.0227%" height="15" fill="rgb(218,43,5)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="127.50"></text></g><g><title>__rustc::__rdl_dealloc (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="101" width="0.0227%" height="15" fill="rgb(216,11,5)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="85" width="0.0227%" height="15" fill="rgb(209,82,29)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="95.50"></text></g><g><title>cfree (2,741,720 samples, 0.02%)</title><rect x="99.9773%" y="69" width="0.0227%" height="15" fill="rgb(244,115,12)" fg:x="12061595997" fg:w="2741720"/><text x="100.2273%" y="79.50"></text></g></svg></svg>