[package]
name = "liblevenshtein"
version = "0.3.0"
edition = "2021"
rust-version = "1.70"
authors = ["Dylon Edwards <dylon.devo@gmail.com>"]
license = "Apache-2.0"
repository = "https://github.com/universal-automata/liblevenshtein-rust"
description = "Levenshtein/Universal Automata for approximate string matching using various dictionary backends"
keywords = ["levenshtein", "edit-distance", "spell-checking", "fuzzy-search", "automata"]
categories = ["algorithms", "data-structures", "text-processing"]
readme = "README.md"

[dependencies]
# PathMap as an optional dictionary backend
pathmap = { git = "https://github.com/Adam-Vandervorst/PathMap.git", branch = "master", optional = true }
# SmallVec for stack-allocated vectors (performance optimization)
smallvec = "1.13"
# Error handling
thiserror = "2.0"
# Serialization support (optional)
serde = { version = "1.0", features = ["derive", "rc"], optional = true }
bincode = { version = "1.3", optional = true }
serde_json = { version = "1.0", optional = true }
prost = { version = "0.12", optional = true }
bytes = { version = "1.5", optional = true }
flate2 = { version = "1.0", optional = true }
# CLI dependencies (optional)
clap = { version = "4.4", features = ["derive"], optional = true }
anyhow = { version = "1.0", optional = true }
rustyline = { version = "13.0", optional = true }
colored = { version = "2.0", optional = true }
dirs = { version = "5.0", optional = true }

[dev-dependencies]
criterion = "0.5"
tempfile = "3.8"
proptest = "1.4"

[build-dependencies]
prost-build = { version = "0.12", optional = true }

[lib]
name = "liblevenshtein"
path = "src/lib.rs"
# Support both static (rlib) and dynamic (cdylib) library builds
crate-type = ["rlib", "cdylib"]

[[bench]]
name = "benchmarks"
harness = false

[[bench]]
name = "micro_benchmarks"
harness = false

[[bench]]
name = "dawg_benchmarks"
harness = false

[[bench]]
name = "profiling_benchmark"
harness = false

[[bench]]
name = "threshold_analysis"
harness = false

[[bench]]
name = "threshold_tuning"
harness = false

[[bench]]
name = "serialization_benchmarks"
harness = false
required-features = ["serialization"]

[[bench]]
name = "filtering_prefix_benchmarks"
harness = false

[[bench]]
name = "prefix_profiling"
harness = false

[[bench]]
name = "suffix_automaton_benchmarks"
harness = false

[[bench]]
name = "matching_modes_comparison"
harness = false

[[bench]]
name = "comprehensive_profiling"
harness = false

[[bench]]
name = "backend_comparison"
harness = false

[[bench]]
name = "subsumption_benchmarks"
harness = false

[[bench]]
name = "transition_benchmarks"
harness = false

[[bench]]
name = "state_operations_benchmarks"
harness = false

[[bench]]
name = "query_iterator_benchmarks"
harness = false

[[bench]]
name = "query_profiling"
harness = false

[[bench]]
name = "real_world_profiling"
harness = false

[[bin]]
name = "liblevenshtein"
path = "src/bin/liblevenshtein.rs"
required-features = ["cli"]

[[example]]
name = "serialization"
required-features = ["serialization"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
debug = true  # Enable debug symbols for profiling

[profile.bench]
inherits = "release"

[features]
default = []
pathmap-backend = ["pathmap"]
serialization = ["serde", "bincode", "serde_json"]
protobuf = ["prost", "bytes", "prost-build", "serialization"]
compression = ["flate2", "serialization"]
cli = ["clap", "anyhow", "rustyline", "colored", "dirs", "pathmap-backend", "serialization"]

[package.metadata.generate-rpm]
assets = [
    { source = "target/release/liblevenshtein", dest = "/usr/bin/liblevenshtein", mode = "755" },
    { source = "target/release/libliblevenshtein.so", dest = "/usr/lib64/libliblevenshtein.so", mode = "644", doc = false },
    { source = "target/release/libliblevenshtein.rlib", dest = "/usr/lib64/libliblevenshtein.rlib", mode = "644", doc = false },
    { source = "README.md", dest = "/usr/share/doc/liblevenshtein/README.md", mode = "644", doc = true },
    { source = "CHANGELOG.md", dest = "/usr/share/doc/liblevenshtein/CHANGELOG.md", mode = "644", doc = true },
]

[package.metadata.generate-rpm.requires]
glibc = "*"

# For local development: uncomment this section to use a local PathMap checkout
# instead of the GitHub repository. This allows you to test changes to PathMap
# without pushing to GitHub first.
#
# [patch.'https://github.com/Adam-Vandervorst/PathMap.git']
# pathmap = { path = "../PathMap" }
