   Compiling liblevenshtein v0.1.0 (/home/dylon/Workspace/f1r3fly.io/liblevenshtein-rust)
warning: variable does not need to be mutable
  --> benches/dawg_benchmarks.rs:71:21
   |
71 |                 let mut dawg = DynamicDawg::default();
   |                     ----^^^^
   |                     |
   |                     help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> benches/dawg_benchmarks.rs:160:21
    |
160 |                 let mut dawg_clone = dawg.clone();
    |                     ----^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> benches/dawg_benchmarks.rs:152:13
    |
152 |         let mut dawg = DynamicDawg::default();
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: `liblevenshtein` (bench "dawg_benchmarks") generated 3 warnings (run `cargo fix --bench "dawg_benchmarks"` to apply 3 suggestions)
    Finished `bench` profile [optimized + debuginfo] target(s) in 44.16s
     Running benches/dawg_benchmarks.rs (target/release/deps/dawg_benchmarks-6005c94a1d9b6dc5)
Benchmarking dawg_edge_iteration/100
Benchmarking dawg_edge_iteration/100: Warming up for 3.0000 s
Benchmarking dawg_edge_iteration/100: Collecting 100 samples in estimated 5.0018 s (3.2M iterations)
Benchmarking dawg_edge_iteration/100: Analyzing
dawg_edge_iteration/100 time:   [1.5519 µs 1.5654 µs 1.5795 µs]
                        thrpt:  [63.311 Melem/s 63.882 Melem/s 64.438 Melem/s]
                 change:
                        time:   [-26.790% -26.022% -25.251%] (p = 0.00 < 0.05)
                        thrpt:  [+33.782% +35.175% +36.594%]
                        Performance has improved.
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
Benchmarking dawg_edge_iteration/500
Benchmarking dawg_edge_iteration/500: Warming up for 3.0000 s
Benchmarking dawg_edge_iteration/500: Collecting 100 samples in estimated 5.0012 s (3.2M iterations)
Benchmarking dawg_edge_iteration/500: Analyzing
dawg_edge_iteration/500 time:   [1.5566 µs 1.5628 µs 1.5700 µs]
                        thrpt:  [318.48 Melem/s 319.93 Melem/s 321.20 Melem/s]
                 change:
                        time:   [-20.574% -19.947% -19.352%] (p = 0.00 < 0.05)
                        thrpt:  [+23.996% +24.917% +25.903%]
                        Performance has improved.
Found 7 outliers among 100 measurements (7.00%)
  1 (1.00%) low mild
  5 (5.00%) high mild
  1 (1.00%) high severe
Benchmarking dawg_edge_iteration/1000
Benchmarking dawg_edge_iteration/1000: Warming up for 3.0000 s
Benchmarking dawg_edge_iteration/1000: Collecting 100 samples in estimated 5.0002 s (3.2M iterations)
Benchmarking dawg_edge_iteration/1000: Analyzing
dawg_edge_iteration/1000
                        time:   [1.5666 µs 1.5716 µs 1.5770 µs]
                        thrpt:  [634.10 Melem/s 636.29 Melem/s 638.32 Melem/s]
                 change:
                        time:   [-22.063% -21.312% -20.601%] (p = 0.00 < 0.05)
                        thrpt:  [+25.946% +27.085% +28.308%]
                        Performance has improved.
Found 8 outliers among 100 measurements (8.00%)
  7 (7.00%) high mild
  1 (1.00%) high severe
Benchmarking dawg_edge_iteration/5000
Benchmarking dawg_edge_iteration/5000: Warming up for 3.0000 s
Benchmarking dawg_edge_iteration/5000: Collecting 100 samples in estimated 5.0059 s (3.3M iterations)
Benchmarking dawg_edge_iteration/5000: Analyzing
dawg_edge_iteration/5000
                        time:   [1.5396 µs 1.5451 µs 1.5518 µs]
                        thrpt:  [3.2221 Gelem/s 3.2360 Gelem/s 3.2476 Gelem/s]
                 change:
                        time:   [-22.444% -21.666% -20.914%] (p = 0.00 < 0.05)
                        thrpt:  [+26.444% +27.659% +28.939%]
                        Performance has improved.
Found 9 outliers among 100 measurements (9.00%)
  8 (8.00%) high mild
  1 (1.00%) high severe

