<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="2045893542"><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (3,406,825 samples, 0.17%)</title><rect x="0.0000%" y="453" width="0.1665%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3406825"/><text x="0.2500%" y="463.50"></text></g><g><title>&lt;T as core::clone::CloneToUninit&gt;::clone_to_uninit (6,268,826 samples, 0.31%)</title><rect x="2.6104%" y="405" width="0.3064%" height="15" fill="rgb(217,0,24)" fg:x="53407022" fg:w="6268826"/><text x="2.8604%" y="415.50"></text></g><g><title>&lt;T as core::clone::uninit::CopySpec&gt;::clone_one (6,268,826 samples, 0.31%)</title><rect x="2.6104%" y="389" width="0.3064%" height="15" fill="rgb(221,193,54)" fg:x="53407022" fg:w="6268826"/><text x="2.8604%" y="399.50"></text></g><g><title>core::ptr::write (6,268,826 samples, 0.31%)</title><rect x="2.6104%" y="373" width="0.3064%" height="15" fill="rgb(248,212,6)" fg:x="53407022" fg:w="6268826"/><text x="2.8604%" y="383.50"></text></g><g><title>[libc.so.6] (39,229,671 samples, 1.92%)</title><rect x="3.2408%" y="293" width="1.9175%" height="15" fill="rgb(208,68,35)" fg:x="66303924" fg:w="39229671"/><text x="3.4908%" y="303.50">[..</text></g><g><title>[libc.so.6] (39,229,671 samples, 1.92%)</title><rect x="3.2408%" y="277" width="1.9175%" height="15" fill="rgb(232,128,0)" fg:x="66303924" fg:w="39229671"/><text x="3.4908%" y="287.50">[..</text></g><g><title>[libc.so.6] (3,043,072 samples, 0.15%)</title><rect x="5.0096%" y="261" width="0.1487%" height="15" fill="rgb(207,160,47)" fg:x="102490523" fg:w="3043072"/><text x="5.2596%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (58,669,347 samples, 2.87%)</title><rect x="2.4526%" y="437" width="2.8677%" height="15" fill="rgb(228,23,34)" fg:x="50178481" fg:w="58669347"/><text x="2.7026%" y="447.50">&lt;c..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (55,440,806 samples, 2.71%)</title><rect x="2.6104%" y="421" width="2.7099%" height="15" fill="rgb(218,30,26)" fg:x="53407022" fg:w="55440806"/><text x="2.8604%" y="431.50">&lt;a..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (49,171,980 samples, 2.40%)</title><rect x="2.9169%" y="405" width="2.4034%" height="15" fill="rgb(220,122,19)" fg:x="59675848" fg:w="49171980"/><text x="3.1669%" y="415.50">al..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (49,171,980 samples, 2.40%)</title><rect x="2.9169%" y="389" width="2.4034%" height="15" fill="rgb(250,228,42)" fg:x="59675848" fg:w="49171980"/><text x="3.1669%" y="399.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49,171,980 samples, 2.40%)</title><rect x="2.9169%" y="373" width="2.4034%" height="15" fill="rgb(240,193,28)" fg:x="59675848" fg:w="49171980"/><text x="3.1669%" y="383.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (49,171,980 samples, 2.40%)</title><rect x="2.9169%" y="357" width="2.4034%" height="15" fill="rgb(216,20,37)" fg:x="59675848" fg:w="49171980"/><text x="3.1669%" y="367.50">al..</text></g><g><title>alloc::alloc::alloc (49,171,980 samples, 2.40%)</title><rect x="2.9169%" y="341" width="2.4034%" height="15" fill="rgb(206,188,39)" fg:x="59675848" fg:w="49171980"/><text x="3.1669%" y="351.50">al..</text></g><g><title>__rustc::__rdl_alloc (49,171,980 samples, 2.40%)</title><rect x="2.9169%" y="325" width="2.4034%" height="15" fill="rgb(217,207,13)" fg:x="59675848" fg:w="49171980"/><text x="3.1669%" y="335.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (49,171,980 samples, 2.40%)</title><rect x="2.9169%" y="309" width="2.4034%" height="15" fill="rgb(231,73,38)" fg:x="59675848" fg:w="49171980"/><text x="3.1669%" y="319.50">st..</text></g><g><title>malloc (3,314,233 samples, 0.16%)</title><rect x="5.1583%" y="293" width="0.1620%" height="15" fill="rgb(225,20,46)" fg:x="105533595" fg:w="3314233"/><text x="5.4083%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,242,868 samples, 1.09%)</title><rect x="5.3203%" y="421" width="1.0872%" height="15" fill="rgb(210,31,41)" fg:x="108847828" fg:w="22242868"/><text x="5.5703%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (22,242,868 samples, 1.09%)</title><rect x="5.3203%" y="405" width="1.0872%" height="15" fill="rgb(221,200,47)" fg:x="108847828" fg:w="22242868"/><text x="5.5703%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (22,242,868 samples, 1.09%)</title><rect x="5.3203%" y="389" width="1.0872%" height="15" fill="rgb(226,26,5)" fg:x="108847828" fg:w="22242868"/><text x="5.5703%" y="399.50"></text></g><g><title>[libc.so.6] (79,668,824 samples, 3.89%)</title><rect x="6.4075%" y="229" width="3.8941%" height="15" fill="rgb(249,33,26)" fg:x="131090696" fg:w="79668824"/><text x="6.6575%" y="239.50">[lib..</text></g><g><title>[libc.so.6] (70,000,164 samples, 3.42%)</title><rect x="6.8801%" y="213" width="3.4215%" height="15" fill="rgb(235,183,28)" fg:x="140759356" fg:w="70000164"/><text x="7.1301%" y="223.50">[li..</text></g><g><title>[libc.so.6] (6,736,895 samples, 0.33%)</title><rect x="9.9723%" y="197" width="0.3293%" height="15" fill="rgb(221,5,38)" fg:x="204022625" fg:w="6736895"/><text x="10.2223%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="373" width="4.5156%" height="15" fill="rgb(247,18,42)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="383.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="357" width="4.5156%" height="15" fill="rgb(241,131,45)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="367.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="341" width="4.5156%" height="15" fill="rgb(249,31,29)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="351.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="325" width="4.5156%" height="15" fill="rgb(225,111,53)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="335.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="309" width="4.5156%" height="15" fill="rgb(238,160,17)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="319.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="293" width="4.5156%" height="15" fill="rgb(214,148,48)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="303.50">alloc..</text></g><g><title>alloc::alloc::alloc (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="277" width="4.5156%" height="15" fill="rgb(232,36,49)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="287.50">alloc..</text></g><g><title>__rustc::__rdl_alloc (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="261" width="4.5156%" height="15" fill="rgb(209,103,24)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="271.50">__rus..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (92,384,027 samples, 4.52%)</title><rect x="6.4075%" y="245" width="4.5156%" height="15" fill="rgb(229,88,8)" fg:x="131090696" fg:w="92384027"/><text x="6.6575%" y="255.50">std::..</text></g><g><title>malloc (12,715,203 samples, 0.62%)</title><rect x="10.3016%" y="229" width="0.6215%" height="15" fill="rgb(213,181,19)" fg:x="210759520" fg:w="12715203"/><text x="10.5516%" y="239.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (126,736,606 samples, 6.19%)</title><rect x="5.3203%" y="437" width="6.1947%" height="15" fill="rgb(254,191,54)" fg:x="108847828" fg:w="126736606"/><text x="5.5703%" y="447.50">&lt;libleve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (104,493,738 samples, 5.11%)</title><rect x="6.4075%" y="421" width="5.1075%" height="15" fill="rgb(241,83,37)" fg:x="131090696" fg:w="104493738"/><text x="6.6575%" y="431.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (104,493,738 samples, 5.11%)</title><rect x="6.4075%" y="405" width="5.1075%" height="15" fill="rgb(233,36,39)" fg:x="131090696" fg:w="104493738"/><text x="6.6575%" y="415.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (104,493,738 samples, 5.11%)</title><rect x="6.4075%" y="389" width="5.1075%" height="15" fill="rgb(226,3,54)" fg:x="131090696" fg:w="104493738"/><text x="6.6575%" y="399.50">&lt;T as ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12,109,711 samples, 0.59%)</title><rect x="10.9231%" y="373" width="0.5919%" height="15" fill="rgb(245,192,40)" fg:x="223474723" fg:w="12109711"/><text x="11.1731%" y="383.50"></text></g><g><title>core::ptr::copy_nonoverlapping (12,109,711 samples, 0.59%)</title><rect x="10.9231%" y="357" width="0.5919%" height="15" fill="rgb(238,167,29)" fg:x="223474723" fg:w="12109711"/><text x="11.1731%" y="367.50"></text></g><g><title>[libc.so.6] (8,924,971 samples, 0.44%)</title><rect x="11.0788%" y="341" width="0.4362%" height="15" fill="rgb(232,182,51)" fg:x="226659463" fg:w="8924971"/><text x="11.3288%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,739,086 samples, 0.48%)</title><rect x="11.9939%" y="373" width="0.4760%" height="15" fill="rgb(231,60,39)" fg:x="245382062" fg:w="9739086"/><text x="12.2439%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,378,016 samples, 0.17%)</title><rect x="12.3048%" y="357" width="0.1651%" height="15" fill="rgb(208,69,12)" fg:x="251743132" fg:w="3378016"/><text x="12.5548%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,378,016 samples, 0.17%)</title><rect x="12.3048%" y="341" width="0.1651%" height="15" fill="rgb(235,93,37)" fg:x="251743132" fg:w="3378016"/><text x="12.5548%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,378,016 samples, 0.17%)</title><rect x="12.3048%" y="325" width="0.1651%" height="15" fill="rgb(213,116,39)" fg:x="251743132" fg:w="3378016"/><text x="12.5548%" y="335.50"></text></g><g><title>[libc.so.6] (48,206,510 samples, 2.36%)</title><rect x="12.7769%" y="229" width="2.3563%" height="15" fill="rgb(222,207,29)" fg:x="261400988" fg:w="48206510"/><text x="13.0269%" y="239.50">[..</text></g><g><title>[libc.so.6] (44,988,147 samples, 2.20%)</title><rect x="12.9342%" y="213" width="2.1989%" height="15" fill="rgb(206,96,30)" fg:x="264619351" fg:w="44988147"/><text x="13.1842%" y="223.50">[..</text></g><g><title>[libc.so.6] (3,386,156 samples, 0.17%)</title><rect x="14.9676%" y="197" width="0.1655%" height="15" fill="rgb(218,138,4)" fg:x="306221342" fg:w="3386156"/><text x="15.2176%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73,532,057 samples, 3.59%)</title><rect x="12.6258%" y="309" width="3.5941%" height="15" fill="rgb(250,191,14)" fg:x="258310489" fg:w="73532057"/><text x="12.8758%" y="319.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (73,532,057 samples, 3.59%)</title><rect x="12.6258%" y="293" width="3.5941%" height="15" fill="rgb(239,60,40)" fg:x="258310489" fg:w="73532057"/><text x="12.8758%" y="303.50">allo..</text></g><g><title>alloc::alloc::alloc (73,532,057 samples, 3.59%)</title><rect x="12.6258%" y="277" width="3.5941%" height="15" fill="rgb(206,27,48)" fg:x="258310489" fg:w="73532057"/><text x="12.8758%" y="287.50">allo..</text></g><g><title>__rustc::__rdl_alloc (73,532,057 samples, 3.59%)</title><rect x="12.6258%" y="261" width="3.5941%" height="15" fill="rgb(225,35,8)" fg:x="258310489" fg:w="73532057"/><text x="12.8758%" y="271.50">__ru..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (73,532,057 samples, 3.59%)</title><rect x="12.6258%" y="245" width="3.5941%" height="15" fill="rgb(250,213,24)" fg:x="258310489" fg:w="73532057"/><text x="12.8758%" y="255.50">std:..</text></g><g><title>malloc (22,235,048 samples, 1.09%)</title><rect x="15.1331%" y="229" width="1.0868%" height="15" fill="rgb(247,123,22)" fg:x="309607498" fg:w="22235048"/><text x="15.3831%" y="239.50"></text></g><g><title>core::intrinsics::unlikely (3,276,236 samples, 0.16%)</title><rect x="16.2199%" y="245" width="0.1601%" height="15" fill="rgb(231,138,38)" fg:x="331842546" fg:w="3276236"/><text x="16.4699%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (83,294,256 samples, 4.07%)</title><rect x="12.4699%" y="373" width="4.0713%" height="15" fill="rgb(231,145,46)" fg:x="255121148" fg:w="83294256"/><text x="12.7199%" y="383.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (83,294,256 samples, 4.07%)</title><rect x="12.4699%" y="357" width="4.0713%" height="15" fill="rgb(251,118,11)" fg:x="255121148" fg:w="83294256"/><text x="12.7199%" y="367.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (83,294,256 samples, 4.07%)</title><rect x="12.4699%" y="341" width="4.0713%" height="15" fill="rgb(217,147,25)" fg:x="255121148" fg:w="83294256"/><text x="12.7199%" y="351.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (83,294,256 samples, 4.07%)</title><rect x="12.4699%" y="325" width="4.0713%" height="15" fill="rgb(247,81,37)" fg:x="255121148" fg:w="83294256"/><text x="12.7199%" y="335.50">allo..</text></g><g><title>alloc::raw_vec::layout_array (6,572,858 samples, 0.32%)</title><rect x="16.2199%" y="309" width="0.3213%" height="15" fill="rgb(209,12,38)" fg:x="331842546" fg:w="6572858"/><text x="16.4699%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::repeat (6,572,858 samples, 0.32%)</title><rect x="16.2199%" y="293" width="0.3213%" height="15" fill="rgb(227,1,9)" fg:x="331842546" fg:w="6572858"/><text x="16.4699%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (6,572,858 samples, 0.32%)</title><rect x="16.2199%" y="277" width="0.3213%" height="15" fill="rgb(248,47,43)" fg:x="331842546" fg:w="6572858"/><text x="16.4699%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (6,572,858 samples, 0.32%)</title><rect x="16.2199%" y="261" width="0.3213%" height="15" fill="rgb(221,10,30)" fg:x="331842546" fg:w="6572858"/><text x="16.4699%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3,296,622 samples, 0.16%)</title><rect x="16.3801%" y="245" width="0.1611%" height="15" fill="rgb(210,229,1)" fg:x="335118782" fg:w="3296622"/><text x="16.6301%" y="255.50"></text></g><g><title>&lt;liblevenshtein::transducer::intersection::Intersection&lt;N&gt; as core::clone::Clone&gt;::clone (347,894,387 samples, 17.00%)</title><rect x="0.1665%" y="453" width="17.0045%" height="15" fill="rgb(222,148,37)" fg:x="3406825" fg:w="347894387"/><text x="0.4165%" y="463.50">&lt;liblevenshtein::transduce..</text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (115,716,778 samples, 5.66%)</title><rect x="11.5150%" y="437" width="5.6561%" height="15" fill="rgb(234,67,33)" fg:x="235584434" fg:w="115716778"/><text x="11.7650%" y="447.50">&lt;liblev..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (112,286,043 samples, 5.49%)</title><rect x="11.6827%" y="421" width="5.4884%" height="15" fill="rgb(247,98,35)" fg:x="239015169" fg:w="112286043"/><text x="11.9327%" y="431.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (112,286,043 samples, 5.49%)</title><rect x="11.6827%" y="405" width="5.4884%" height="15" fill="rgb(247,138,52)" fg:x="239015169" fg:w="112286043"/><text x="11.9327%" y="415.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (112,286,043 samples, 5.49%)</title><rect x="11.6827%" y="389" width="5.4884%" height="15" fill="rgb(213,79,30)" fg:x="239015169" fg:w="112286043"/><text x="11.9327%" y="399.50">&lt;T as a..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (12,885,808 samples, 0.63%)</title><rect x="16.5412%" y="373" width="0.6298%" height="15" fill="rgb(246,177,23)" fg:x="338415404" fg:w="12885808"/><text x="16.7912%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,352,485 samples, 0.16%)</title><rect x="17.9401%" y="421" width="0.1639%" height="15" fill="rgb(230,62,27)" fg:x="367035114" fg:w="3352485"/><text x="18.1901%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,352,485 samples, 0.16%)</title><rect x="17.9401%" y="405" width="0.1639%" height="15" fill="rgb(216,154,8)" fg:x="367035114" fg:w="3352485"/><text x="18.1901%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,352,485 samples, 0.16%)</title><rect x="17.9401%" y="389" width="0.1639%" height="15" fill="rgb(244,35,45)" fg:x="367035114" fg:w="3352485"/><text x="18.1901%" y="399.50"></text></g><g><title>&lt;liblevenshtein::transducer::query::CandidateIterator&lt;N&gt; as core::iter::traits::iterator::Iterator&gt;::next (22,294,399 samples, 1.09%)</title><rect x="17.1710%" y="453" width="1.0897%" height="15" fill="rgb(251,115,12)" fg:x="351301212" fg:w="22294399"/><text x="17.4210%" y="463.50"></text></g><g><title>liblevenshtein::transducer::query::CandidateIterator&lt;N&gt;::compute_distance (22,294,399 samples, 1.09%)</title><rect x="17.1710%" y="437" width="1.0897%" height="15" fill="rgb(240,54,50)" fg:x="351301212" fg:w="22294399"/><text x="17.4210%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="421" width="0.1568%" height="15" fill="rgb(233,84,52)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="405" width="0.1568%" height="15" fill="rgb(207,117,47)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="389" width="0.1568%" height="15" fill="rgb(249,43,39)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="373" width="0.1568%" height="15" fill="rgb(209,38,44)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="357" width="0.1568%" height="15" fill="rgb(236,212,23)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="341" width="0.1568%" height="15" fill="rgb(242,79,21)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="351.50"></text></g><g><title>__rustc::__rdl_dealloc (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="325" width="0.1568%" height="15" fill="rgb(211,96,35)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="309" width="0.1568%" height="15" fill="rgb(253,215,40)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="319.50"></text></g><g><title>cfree (3,208,012 samples, 0.16%)</title><rect x="18.1040%" y="293" width="0.1568%" height="15" fill="rgb(211,81,21)" fg:x="370387599" fg:w="3208012"/><text x="18.3540%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.02%)</title><rect x="18.2608%" y="373" width="0.0245%" height="15" fill="rgb(208,190,38)" fg:x="373595611" fg:w="501504"/><text x="18.5108%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.02%)</title><rect x="18.2608%" y="357" width="0.0245%" height="15" fill="rgb(235,213,38)" fg:x="373595611" fg:w="501504"/><text x="18.5108%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.02%)</title><rect x="18.2608%" y="341" width="0.0245%" height="15" fill="rgb(237,122,38)" fg:x="373595611" fg:w="501504"/><text x="18.5108%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (943,471 samples, 0.05%)</title><rect x="18.2608%" y="405" width="0.0461%" height="15" fill="rgb(244,218,35)" fg:x="373595611" fg:w="943471"/><text x="18.5108%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (943,471 samples, 0.05%)</title><rect x="18.2608%" y="389" width="0.0461%" height="15" fill="rgb(240,68,47)" fg:x="373595611" fg:w="943471"/><text x="18.5108%" y="399.50"></text></g><g><title>_dl_catch_exception (441,967 samples, 0.02%)</title><rect x="18.2853%" y="373" width="0.0216%" height="15" fill="rgb(210,16,53)" fg:x="374097115" fg:w="441967"/><text x="18.5353%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (441,967 samples, 0.02%)</title><rect x="18.2853%" y="357" width="0.0216%" height="15" fill="rgb(235,124,12)" fg:x="374097115" fg:w="441967"/><text x="18.5353%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (441,967 samples, 0.02%)</title><rect x="18.2853%" y="341" width="0.0216%" height="15" fill="rgb(224,169,11)" fg:x="374097115" fg:w="441967"/><text x="18.5353%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (441,967 samples, 0.02%)</title><rect x="18.2853%" y="325" width="0.0216%" height="15" fill="rgb(250,166,2)" fg:x="374097115" fg:w="441967"/><text x="18.5353%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (441,967 samples, 0.02%)</title><rect x="18.2853%" y="309" width="0.0216%" height="15" fill="rgb(242,216,29)" fg:x="374097115" fg:w="441967"/><text x="18.5353%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,672,183 samples, 0.08%)</title><rect x="18.2608%" y="453" width="0.0817%" height="15" fill="rgb(230,116,27)" fg:x="373595611" fg:w="1672183"/><text x="18.5108%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,672,183 samples, 0.08%)</title><rect x="18.2608%" y="437" width="0.0817%" height="15" fill="rgb(228,99,48)" fg:x="373595611" fg:w="1672183"/><text x="18.5108%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,672,183 samples, 0.08%)</title><rect x="18.2608%" y="421" width="0.0817%" height="15" fill="rgb(253,11,6)" fg:x="373595611" fg:w="1672183"/><text x="18.5108%" y="431.50"></text></g><g><title>__cpu_indicator_init (728,712 samples, 0.04%)</title><rect x="18.3069%" y="405" width="0.0356%" height="15" fill="rgb(247,143,39)" fg:x="374539082" fg:w="728712"/><text x="18.5569%" y="415.50"></text></g><g><title>cpu_indicator_init (728,712 samples, 0.04%)</title><rect x="18.3069%" y="389" width="0.0356%" height="15" fill="rgb(236,97,10)" fg:x="374539082" fg:w="728712"/><text x="18.5569%" y="399.50"></text></g><g><title>get_intel_cpu (728,712 samples, 0.04%)</title><rect x="18.3069%" y="373" width="0.0356%" height="15" fill="rgb(233,208,19)" fg:x="374539082" fg:w="728712"/><text x="18.5569%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (3,297,611 samples, 0.16%)</title><rect x="18.9742%" y="421" width="0.1612%" height="15" fill="rgb(216,164,2)" fg:x="388192935" fg:w="3297611"/><text x="19.2242%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (3,297,611 samples, 0.16%)</title><rect x="18.9742%" y="405" width="0.1612%" height="15" fill="rgb(220,129,5)" fg:x="388192935" fg:w="3297611"/><text x="19.2242%" y="415.50"></text></g><g><title>[libc.so.6] (3,297,611 samples, 0.16%)</title><rect x="18.9742%" y="389" width="0.1612%" height="15" fill="rgb(242,17,10)" fg:x="388192935" fg:w="3297611"/><text x="19.2242%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (6,584,996 samples, 0.32%)</title><rect x="18.9742%" y="437" width="0.3219%" height="15" fill="rgb(242,107,0)" fg:x="388192935" fg:w="6584996"/><text x="19.2242%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="421" width="0.1607%" height="15" fill="rgb(251,28,31)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="405" width="0.1607%" height="15" fill="rgb(233,223,10)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="389" width="0.1607%" height="15" fill="rgb(215,21,27)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="373" width="0.1607%" height="15" fill="rgb(232,23,21)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="357" width="0.1607%" height="15" fill="rgb(244,5,23)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="341" width="0.1607%" height="15" fill="rgb(226,81,46)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="325" width="0.1607%" height="15" fill="rgb(247,70,30)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="309" width="0.1607%" height="15" fill="rgb(212,68,19)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="293" width="0.1607%" height="15" fill="rgb(240,187,13)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="303.50"></text></g><g><title>cfree (3,287,385 samples, 0.16%)</title><rect x="19.1354%" y="277" width="0.1607%" height="15" fill="rgb(223,113,26)" fg:x="391490546" fg:w="3287385"/><text x="19.3854%" y="287.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="437" width="0.3164%" height="15" fill="rgb(206,192,2)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="447.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_state (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="421" width="0.3164%" height="15" fill="rgb(241,108,4)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="405" width="0.3164%" height="15" fill="rgb(247,173,49)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="389" width="0.3164%" height="15" fill="rgb(224,114,35)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="373" width="0.3164%" height="15" fill="rgb(245,159,27)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="357" width="0.3164%" height="15" fill="rgb(245,172,44)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="341" width="0.3164%" height="15" fill="rgb(236,23,11)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="325" width="0.3164%" height="15" fill="rgb(205,117,38)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="309" width="0.3164%" height="15" fill="rgb(237,72,25)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="293" width="0.3164%" height="15" fill="rgb(244,70,9)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,472,477 samples, 0.32%)</title><rect x="19.2961%" y="277" width="0.3164%" height="15" fill="rgb(217,125,39)" fg:x="394777931" fg:w="6472477"/><text x="19.5461%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (3,328,548 samples, 0.16%)</title><rect x="19.7569%" y="421" width="0.1627%" height="15" fill="rgb(235,36,10)" fg:x="404204872" fg:w="3328548"/><text x="20.0069%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert_mut (3,328,548 samples, 0.16%)</title><rect x="19.7569%" y="405" width="0.1627%" height="15" fill="rgb(251,123,47)" fg:x="404204872" fg:w="3328548"/><text x="20.0069%" y="415.50"></text></g><g><title>core::ptr::copy (3,328,548 samples, 0.16%)</title><rect x="19.7569%" y="389" width="0.1627%" height="15" fill="rgb(221,13,13)" fg:x="404204872" fg:w="3328548"/><text x="20.0069%" y="399.50"></text></g><g><title>[libc.so.6] (3,328,548 samples, 0.16%)</title><rect x="19.7569%" y="373" width="0.1627%" height="15" fill="rgb(238,131,9)" fg:x="404204872" fg:w="3328548"/><text x="20.0069%" y="383.50"></text></g><g><title>[libc.so.6] (38,587,210 samples, 1.89%)</title><rect x="18.3425%" y="453" width="1.8861%" height="15" fill="rgb(211,50,8)" fg:x="375267794" fg:w="38587210"/><text x="18.5925%" y="463.50">[..</text></g><g><title>liblevenshtein::transducer::state::State::insert (12,604,596 samples, 0.62%)</title><rect x="19.6125%" y="437" width="0.6161%" height="15" fill="rgb(245,182,24)" fg:x="401250408" fg:w="12604596"/><text x="19.8625%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (6,321,584 samples, 0.31%)</title><rect x="19.9196%" y="421" width="0.3090%" height="15" fill="rgb(242,14,37)" fg:x="407533420" fg:w="6321584"/><text x="20.1696%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (6,321,584 samples, 0.31%)</title><rect x="19.9196%" y="405" width="0.3090%" height="15" fill="rgb(246,228,12)" fg:x="407533420" fg:w="6321584"/><text x="20.1696%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search::{{closure}} (6,321,584 samples, 0.31%)</title><rect x="19.9196%" y="389" width="0.3090%" height="15" fill="rgb(213,55,15)" fg:x="407533420" fg:w="6321584"/><text x="20.1696%" y="399.50"></text></g><g><title>&lt;liblevenshtein::transducer::position::Position as core::cmp::Ord&gt;::cmp (6,321,584 samples, 0.31%)</title><rect x="19.9196%" y="373" width="0.3090%" height="15" fill="rgb(209,9,3)" fg:x="407533420" fg:w="6321584"/><text x="20.1696%" y="383.50"></text></g><g><title>liblevenshtein::transducer::position::Position::compare (6,321,584 samples, 0.31%)</title><rect x="19.9196%" y="357" width="0.3090%" height="15" fill="rgb(230,59,30)" fg:x="407533420" fg:w="6321584"/><text x="20.1696%" y="367.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (9,597,997 samples, 0.47%)</title><rect x="20.2286%" y="437" width="0.4691%" height="15" fill="rgb(209,121,21)" fg:x="413855004" fg:w="9597997"/><text x="20.4786%" y="447.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (9,597,997 samples, 0.47%)</title><rect x="20.2286%" y="421" width="0.4691%" height="15" fill="rgb(220,109,13)" fg:x="413855004" fg:w="9597997"/><text x="20.4786%" y="431.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final::{{closure}} (6,394,499 samples, 0.31%)</title><rect x="20.3852%" y="405" width="0.3126%" height="15" fill="rgb(232,18,1)" fg:x="417058502" fg:w="6394499"/><text x="20.6352%" y="415.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (6,394,499 samples, 0.31%)</title><rect x="20.3852%" y="389" width="0.3126%" height="15" fill="rgb(215,41,42)" fg:x="417058502" fg:w="6394499"/><text x="20.6352%" y="399.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (6,394,499 samples, 0.31%)</title><rect x="20.3852%" y="373" width="0.3126%" height="15" fill="rgb(224,123,36)" fg:x="417058502" fg:w="6394499"/><text x="20.6352%" y="383.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::is_val_internal (6,394,499 samples, 0.31%)</title><rect x="20.3852%" y="357" width="0.3126%" height="15" fill="rgb(240,125,3)" fg:x="417058502" fg:w="6394499"/><text x="20.6352%" y="367.50"></text></g><g><title>[libc.so.6] (6,439,585 samples, 0.31%)</title><rect x="20.6977%" y="437" width="0.3148%" height="15" fill="rgb(205,98,50)" fg:x="423453001" fg:w="6439585"/><text x="20.9477%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,951,832 samples, 0.14%)</title><rect x="21.0125%" y="437" width="0.1443%" height="15" fill="rgb(205,185,37)" fg:x="429892586" fg:w="2951832"/><text x="21.2625%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,951,832 samples, 0.14%)</title><rect x="21.0125%" y="421" width="0.1443%" height="15" fill="rgb(238,207,15)" fg:x="429892586" fg:w="2951832"/><text x="21.2625%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,951,832 samples, 0.14%)</title><rect x="21.0125%" y="405" width="0.1443%" height="15" fill="rgb(213,199,42)" fg:x="429892586" fg:w="2951832"/><text x="21.2625%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,430,889 samples, 0.17%)</title><rect x="21.1567%" y="437" width="0.1677%" height="15" fill="rgb(235,201,11)" fg:x="432844418" fg:w="3430889"/><text x="21.4067%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,430,889 samples, 0.17%)</title><rect x="21.1567%" y="421" width="0.1677%" height="15" fill="rgb(207,46,11)" fg:x="432844418" fg:w="3430889"/><text x="21.4067%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,430,889 samples, 0.17%)</title><rect x="21.1567%" y="405" width="0.1677%" height="15" fill="rgb(241,35,35)" fg:x="432844418" fg:w="3430889"/><text x="21.4067%" y="415.50"></text></g><g><title>__rustc::__rdl_realloc (65,047,141 samples, 3.18%)</title><rect x="21.6378%" y="373" width="3.1794%" height="15" fill="rgb(243,32,47)" fg:x="442685448" fg:w="65047141"/><text x="21.8878%" y="383.50">__r..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (65,047,141 samples, 3.18%)</title><rect x="21.6378%" y="357" width="3.1794%" height="15" fill="rgb(247,202,23)" fg:x="442685448" fg:w="65047141"/><text x="21.8878%" y="367.50">std..</text></g><g><title>realloc (65,047,141 samples, 3.18%)</title><rect x="21.6378%" y="341" width="3.1794%" height="15" fill="rgb(219,102,11)" fg:x="442685448" fg:w="65047141"/><text x="21.8878%" y="351.50">rea..</text></g><g><title>[libc.so.6] (65,047,141 samples, 3.18%)</title><rect x="21.6378%" y="325" width="3.1794%" height="15" fill="rgb(243,110,44)" fg:x="442685448" fg:w="65047141"/><text x="21.8878%" y="335.50">[li..</text></g><g><title>[libc.so.6] (61,697,717 samples, 3.02%)</title><rect x="21.8015%" y="309" width="3.0157%" height="15" fill="rgb(222,74,54)" fg:x="446034872" fg:w="61697717"/><text x="22.0515%" y="319.50">[li..</text></g><g><title>[libc.so.6] (51,824,590 samples, 2.53%)</title><rect x="22.2841%" y="293" width="2.5331%" height="15" fill="rgb(216,99,12)" fg:x="455907999" fg:w="51824590"/><text x="22.5341%" y="303.50">[l..</text></g><g><title>[libc.so.6] (19,646,091 samples, 0.96%)</title><rect x="23.8569%" y="277" width="0.9603%" height="15" fill="rgb(226,22,26)" fg:x="488086498" fg:w="19646091"/><text x="24.1069%" y="287.50"></text></g><g><title>alloc::alloc::realloc (74,442,562 samples, 3.64%)</title><rect x="21.6378%" y="389" width="3.6386%" height="15" fill="rgb(217,163,10)" fg:x="442685448" fg:w="74442562"/><text x="21.8878%" y="399.50">allo..</text></g><g><title>realloc (9,395,421 samples, 0.46%)</title><rect x="24.8172%" y="373" width="0.4592%" height="15" fill="rgb(213,25,53)" fg:x="507732589" fg:w="9395421"/><text x="25.0672%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (77,664,477 samples, 3.80%)</title><rect x="21.6378%" y="421" width="3.7961%" height="15" fill="rgb(252,105,26)" fg:x="442685448" fg:w="77664477"/><text x="21.8878%" y="431.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (77,664,477 samples, 3.80%)</title><rect x="21.6378%" y="405" width="3.7961%" height="15" fill="rgb(220,39,43)" fg:x="442685448" fg:w="77664477"/><text x="21.8878%" y="415.50">allo..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (3,221,915 samples, 0.16%)</title><rect x="25.2764%" y="389" width="0.1575%" height="15" fill="rgb(229,68,48)" fg:x="517128010" fg:w="3221915"/><text x="25.5264%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (90,623,629 samples, 4.43%)</title><rect x="21.3244%" y="437" width="4.4295%" height="15" fill="rgb(252,8,32)" fg:x="436275307" fg:w="90623629"/><text x="21.5744%" y="447.50">alloc..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6,549,011 samples, 0.32%)</title><rect x="25.4339%" y="421" width="0.3201%" height="15" fill="rgb(223,20,43)" fg:x="520349925" fg:w="6549011"/><text x="25.6839%" y="431.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (3,294,706 samples, 0.16%)</title><rect x="25.7540%" y="437" width="0.1610%" height="15" fill="rgb(229,81,49)" fg:x="526898936" fg:w="3294706"/><text x="26.0040%" y="447.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}::{{closure}} (19,629,264 samples, 0.96%)</title><rect x="27.4833%" y="421" width="0.9594%" height="15" fill="rgb(236,28,36)" fg:x="562278741" fg:w="19629264"/><text x="27.7333%" y="431.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (19,629,264 samples, 0.96%)</title><rect x="27.4833%" y="405" width="0.9594%" height="15" fill="rgb(249,185,26)" fg:x="562278741" fg:w="19629264"/><text x="27.7333%" y="415.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (19,629,264 samples, 0.96%)</title><rect x="27.4833%" y="389" width="0.9594%" height="15" fill="rgb(249,174,33)" fg:x="562278741" fg:w="19629264"/><text x="27.7333%" y="399.50"></text></g><g><title>[libc.so.6] (9,510,096 samples, 0.46%)</title><rect x="28.5975%" y="181" width="0.4648%" height="15" fill="rgb(233,201,37)" fg:x="585074913" fg:w="9510096"/><text x="28.8475%" y="191.50"></text></g><g><title>[libc.so.6] (9,510,096 samples, 0.46%)</title><rect x="28.5975%" y="165" width="0.4648%" height="15" fill="rgb(221,78,26)" fg:x="585074913" fg:w="9510096"/><text x="28.8475%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="325" width="0.7783%" height="15" fill="rgb(250,127,30)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="309" width="0.7783%" height="15" fill="rgb(230,49,44)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="293" width="0.7783%" height="15" fill="rgb(229,67,23)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="277" width="0.7783%" height="15" fill="rgb(249,83,47)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="261" width="0.7783%" height="15" fill="rgb(215,43,3)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="245" width="0.7783%" height="15" fill="rgb(238,154,13)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="255.50"></text></g><g><title>alloc::alloc::alloc (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="229" width="0.7783%" height="15" fill="rgb(219,56,2)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="213" width="0.7783%" height="15" fill="rgb(233,0,4)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15,923,375 samples, 0.78%)</title><rect x="28.5975%" y="197" width="0.7783%" height="15" fill="rgb(235,30,7)" fg:x="585074913" fg:w="15923375"/><text x="28.8475%" y="207.50"></text></g><g><title>malloc (6,413,279 samples, 0.31%)</title><rect x="29.0624%" y="181" width="0.3135%" height="15" fill="rgb(250,79,13)" fg:x="594585009" fg:w="6413279"/><text x="29.3124%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,026,637 samples, 1.08%)</title><rect x="28.4427%" y="373" width="1.0766%" height="15" fill="rgb(211,146,34)" fg:x="581908005" fg:w="22026637"/><text x="28.6927%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22,026,637 samples, 1.08%)</title><rect x="28.4427%" y="357" width="1.0766%" height="15" fill="rgb(228,22,38)" fg:x="581908005" fg:w="22026637"/><text x="28.6927%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (22,026,637 samples, 1.08%)</title><rect x="28.4427%" y="341" width="1.0766%" height="15" fill="rgb(235,168,5)" fg:x="581908005" fg:w="22026637"/><text x="28.6927%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,936,354 samples, 0.14%)</title><rect x="29.3758%" y="325" width="0.1435%" height="15" fill="rgb(221,155,16)" fg:x="600998288" fg:w="2936354"/><text x="29.6258%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (2,936,354 samples, 0.14%)</title><rect x="29.3758%" y="309" width="0.1435%" height="15" fill="rgb(215,215,53)" fg:x="600998288" fg:w="2936354"/><text x="29.6258%" y="319.50"></text></g><g><title>[libc.so.6] (2,936,354 samples, 0.14%)</title><rect x="29.3758%" y="293" width="0.1435%" height="15" fill="rgb(223,4,10)" fg:x="600998288" fg:w="2936354"/><text x="29.6258%" y="303.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (83,704,403 samples, 4.09%)</title><rect x="25.9150%" y="437" width="4.0913%" height="15" fill="rgb(234,103,6)" fg:x="530193642" fg:w="83704403"/><text x="26.1650%" y="447.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (31,990,040 samples, 1.56%)</title><rect x="28.4427%" y="421" width="1.5636%" height="15" fill="rgb(227,97,0)" fg:x="581908005" fg:w="31990040"/><text x="28.6927%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (31,990,040 samples, 1.56%)</title><rect x="28.4427%" y="405" width="1.5636%" height="15" fill="rgb(234,150,53)" fg:x="581908005" fg:w="31990040"/><text x="28.6927%" y="415.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}::{{closure}} (31,990,040 samples, 1.56%)</title><rect x="28.4427%" y="389" width="1.5636%" height="15" fill="rgb(228,201,54)" fg:x="581908005" fg:w="31990040"/><text x="28.6927%" y="399.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (9,963,403 samples, 0.49%)</title><rect x="29.5194%" y="373" width="0.4870%" height="15" fill="rgb(222,22,37)" fg:x="603934642" fg:w="9963403"/><text x="29.7694%" y="383.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (9,963,403 samples, 0.49%)</title><rect x="29.5194%" y="357" width="0.4870%" height="15" fill="rgb(237,53,32)" fg:x="603934642" fg:w="9963403"/><text x="29.7694%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::descend_to_internal (9,963,403 samples, 0.49%)</title><rect x="29.5194%" y="341" width="0.4870%" height="15" fill="rgb(233,25,53)" fg:x="603934642" fg:w="9963403"/><text x="29.7694%" y="351.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (9,963,403 samples, 0.49%)</title><rect x="29.5194%" y="325" width="0.4870%" height="15" fill="rgb(210,40,34)" fg:x="603934642" fg:w="9963403"/><text x="29.7694%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,310,058 samples, 0.16%)</title><rect x="29.8446%" y="309" width="0.1618%" height="15" fill="rgb(241,220,44)" fg:x="610587987" fg:w="3310058"/><text x="30.0946%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,310,058 samples, 0.16%)</title><rect x="29.8446%" y="293" width="0.1618%" height="15" fill="rgb(235,28,35)" fg:x="610587987" fg:w="3310058"/><text x="30.0946%" y="303.50"></text></g><g><title>[libc.so.6] (6,360,111 samples, 0.31%)</title><rect x="30.0064%" y="389" width="0.3109%" height="15" fill="rgb(210,56,17)" fg:x="613898045" fg:w="6360111"/><text x="30.2564%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (12,337,470 samples, 0.60%)</title><rect x="30.0064%" y="421" width="0.6030%" height="15" fill="rgb(224,130,29)" fg:x="613898045" fg:w="12337470"/><text x="30.2564%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (12,337,470 samples, 0.60%)</title><rect x="30.0064%" y="405" width="0.6030%" height="15" fill="rgb(235,212,8)" fg:x="613898045" fg:w="12337470"/><text x="30.2564%" y="415.50"></text></g><g><title>cfree (5,977,359 samples, 0.29%)</title><rect x="30.3172%" y="389" width="0.2922%" height="15" fill="rgb(223,33,50)" fg:x="620258156" fg:w="5977359"/><text x="30.5672%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (12,937,135 samples, 0.63%)</title><rect x="30.6094%" y="405" width="0.6323%" height="15" fill="rgb(219,149,13)" fg:x="626235515" fg:w="12937135"/><text x="30.8594%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,937,135 samples, 0.63%)</title><rect x="30.6094%" y="389" width="0.6323%" height="15" fill="rgb(250,156,29)" fg:x="626235515" fg:w="12937135"/><text x="30.8594%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12,937,135 samples, 0.63%)</title><rect x="30.6094%" y="373" width="0.6323%" height="15" fill="rgb(216,193,19)" fg:x="626235515" fg:w="12937135"/><text x="30.8594%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (12,937,135 samples, 0.63%)</title><rect x="30.6094%" y="357" width="0.6323%" height="15" fill="rgb(216,135,14)" fg:x="626235515" fg:w="12937135"/><text x="30.8594%" y="367.50"></text></g><g><title>[libc.so.6] (42,116,834 samples, 2.06%)</title><rect x="31.2417%" y="277" width="2.0586%" height="15" fill="rgb(241,47,5)" fg:x="639172650" fg:w="42116834"/><text x="31.4917%" y="287.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (70,757,319 samples, 3.46%)</title><rect x="30.6094%" y="421" width="3.4585%" height="15" fill="rgb(233,42,35)" fg:x="626235515" fg:w="70757319"/><text x="30.8594%" y="431.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="405" width="2.8262%" height="15" fill="rgb(231,13,6)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="389" width="2.8262%" height="15" fill="rgb(207,181,40)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="399.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="373" width="2.8262%" height="15" fill="rgb(254,173,49)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="383.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="357" width="2.8262%" height="15" fill="rgb(221,1,38)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="367.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="341" width="2.8262%" height="15" fill="rgb(206,124,46)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="351.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="325" width="2.8262%" height="15" fill="rgb(249,21,11)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="335.50">al..</text></g><g><title>__rustc::__rdl_dealloc (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="309" width="2.8262%" height="15" fill="rgb(222,201,40)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="319.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (57,820,184 samples, 2.83%)</title><rect x="31.2417%" y="293" width="2.8262%" height="15" fill="rgb(235,61,29)" fg:x="639172650" fg:w="57820184"/><text x="31.4917%" y="303.50">st..</text></g><g><title>cfree (15,703,350 samples, 0.77%)</title><rect x="33.3003%" y="277" width="0.7676%" height="15" fill="rgb(219,207,3)" fg:x="681289484" fg:w="15703350"/><text x="33.5503%" y="287.50"></text></g><g><title>[libc.so.6] (19,766,242 samples, 0.97%)</title><rect x="34.0679%" y="277" width="0.9661%" height="15" fill="rgb(222,56,46)" fg:x="696992834" fg:w="19766242"/><text x="34.3179%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (118,729,472 samples, 5.80%)</title><rect x="30.0064%" y="437" width="5.8033%" height="15" fill="rgb(239,76,54)" fg:x="613898045" fg:w="118729472"/><text x="30.2564%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="421" width="1.7418%" height="15" fill="rgb(231,124,27)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="405" width="1.7418%" height="15" fill="rgb(249,195,6)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="389" width="1.7418%" height="15" fill="rgb(237,174,47)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="373" width="1.7418%" height="15" fill="rgb(206,201,31)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="357" width="1.7418%" height="15" fill="rgb(231,57,52)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="341" width="1.7418%" height="15" fill="rgb(248,177,22)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="325" width="1.7418%" height="15" fill="rgb(215,211,37)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="309" width="1.7418%" height="15" fill="rgb(241,128,51)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (35,634,683 samples, 1.74%)</title><rect x="34.0679%" y="293" width="1.7418%" height="15" fill="rgb(227,165,31)" fg:x="696992834" fg:w="35634683"/><text x="34.3179%" y="303.50"></text></g><g><title>cfree (15,868,441 samples, 0.78%)</title><rect x="35.0340%" y="277" width="0.7756%" height="15" fill="rgb(228,167,24)" fg:x="716759076" fg:w="15868441"/><text x="35.2840%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,879,526 samples, 0.34%)</title><rect x="35.8097%" y="405" width="0.3363%" height="15" fill="rgb(228,143,12)" fg:x="732627517" fg:w="6879526"/><text x="36.0597%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,879,526 samples, 0.34%)</title><rect x="35.8097%" y="389" width="0.3363%" height="15" fill="rgb(249,149,8)" fg:x="732627517" fg:w="6879526"/><text x="36.0597%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (6,879,526 samples, 0.34%)</title><rect x="35.8097%" y="373" width="0.3363%" height="15" fill="rgb(243,35,44)" fg:x="732627517" fg:w="6879526"/><text x="36.0597%" y="383.50"></text></g><g><title>__rustc::__rdl_dealloc (6,879,526 samples, 0.34%)</title><rect x="35.8097%" y="357" width="0.3363%" height="15" fill="rgb(246,89,9)" fg:x="732627517" fg:w="6879526"/><text x="36.0597%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,879,526 samples, 0.34%)</title><rect x="35.8097%" y="341" width="0.3363%" height="15" fill="rgb(233,213,13)" fg:x="732627517" fg:w="6879526"/><text x="36.0597%" y="351.50"></text></g><g><title>cfree (6,879,526 samples, 0.34%)</title><rect x="35.8097%" y="325" width="0.3363%" height="15" fill="rgb(233,141,41)" fg:x="732627517" fg:w="6879526"/><text x="36.0597%" y="335.50"></text></g><g><title>[libc.so.6] (2,919,726 samples, 0.14%)</title><rect x="36.1459%" y="405" width="0.1427%" height="15" fill="rgb(239,167,4)" fg:x="739507043" fg:w="2919726"/><text x="36.3959%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (12,833,162 samples, 0.63%)</title><rect x="35.8097%" y="421" width="0.6273%" height="15" fill="rgb(209,217,16)" fg:x="732627517" fg:w="12833162"/><text x="36.0597%" y="431.50"></text></g><g><title>cfree (3,033,910 samples, 0.15%)</title><rect x="36.2886%" y="405" width="0.1483%" height="15" fill="rgb(219,88,35)" fg:x="742426769" fg:w="3033910"/><text x="36.5386%" y="415.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::is_final (3,165,112 samples, 0.15%)</title><rect x="36.4369%" y="421" width="0.1547%" height="15" fill="rgb(220,193,23)" fg:x="745460679" fg:w="3165112"/><text x="36.6869%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3,037,625 samples, 0.15%)</title><rect x="36.5916%" y="405" width="0.1485%" height="15" fill="rgb(230,90,52)" fg:x="748625791" fg:w="3037625"/><text x="36.8416%" y="415.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::term (6,256,912 samples, 0.31%)</title><rect x="36.5916%" y="421" width="0.3058%" height="15" fill="rgb(252,106,19)" fg:x="748625791" fg:w="6256912"/><text x="36.8416%" y="431.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::collect_path (3,219,287 samples, 0.16%)</title><rect x="36.7401%" y="405" width="0.1574%" height="15" fill="rgb(206,74,20)" fg:x="751663416" fg:w="3219287"/><text x="36.9901%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="405" width="0.3203%" height="15" fill="rgb(230,138,44)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="389" width="0.3203%" height="15" fill="rgb(235,182,43)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="373" width="0.3203%" height="15" fill="rgb(242,16,51)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="357" width="0.3203%" height="15" fill="rgb(248,9,4)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="341" width="0.3203%" height="15" fill="rgb(210,31,22)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="325" width="0.3203%" height="15" fill="rgb(239,54,39)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="335.50"></text></g><g><title>alloc::alloc::alloc (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="309" width="0.3203%" height="15" fill="rgb(230,99,41)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="293" width="0.3203%" height="15" fill="rgb(253,106,12)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="277" width="0.3203%" height="15" fill="rgb(213,46,41)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="287.50"></text></g><g><title>[libc.so.6] (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="261" width="0.3203%" height="15" fill="rgb(215,133,35)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="271.50"></text></g><g><title>[libc.so.6] (6,553,466 samples, 0.32%)</title><rect x="37.2077%" y="245" width="0.3203%" height="15" fill="rgb(213,28,5)" fg:x="761230041" fg:w="6553466"/><text x="37.4577%" y="255.50"></text></g><g><title>[libc.so.6] (3,156,498 samples, 0.15%)</title><rect x="37.5280%" y="197" width="0.1543%" height="15" fill="rgb(215,77,49)" fg:x="767783507" fg:w="3156498"/><text x="37.7780%" y="207.50"></text></g><g><title>[libc.so.6] (3,156,498 samples, 0.15%)</title><rect x="37.5280%" y="181" width="0.1543%" height="15" fill="rgb(248,100,22)" fg:x="767783507" fg:w="3156498"/><text x="37.7780%" y="191.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="405" width="0.3113%" height="15" fill="rgb(208,67,9)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="389" width="0.3113%" height="15" fill="rgb(219,133,21)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="373" width="0.3113%" height="15" fill="rgb(246,46,29)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="357" width="0.3113%" height="15" fill="rgb(246,185,52)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="341" width="0.3113%" height="15" fill="rgb(252,136,11)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="325" width="0.3113%" height="15" fill="rgb(219,138,53)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="309" width="0.3113%" height="15" fill="rgb(211,51,23)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="293" width="0.3113%" height="15" fill="rgb(247,221,28)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="277" width="0.3113%" height="15" fill="rgb(251,222,45)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="261" width="0.3113%" height="15" fill="rgb(217,162,53)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="271.50"></text></g><g><title>alloc::alloc::alloc (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="245" width="0.3113%" height="15" fill="rgb(229,93,14)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="255.50"></text></g><g><title>__rustc::__rdl_alloc (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="229" width="0.3113%" height="15" fill="rgb(209,67,49)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6,368,090 samples, 0.31%)</title><rect x="37.5280%" y="213" width="0.3113%" height="15" fill="rgb(213,87,29)" fg:x="767783507" fg:w="6368090"/><text x="37.7780%" y="223.50"></text></g><g><title>malloc (3,211,592 samples, 0.16%)</title><rect x="37.6823%" y="197" width="0.1570%" height="15" fill="rgb(205,151,52)" fg:x="770940005" fg:w="3211592"/><text x="37.9323%" y="207.50"></text></g><g><title>[libc.so.6] (9,094,831 samples, 0.44%)</title><rect x="37.9947%" y="293" width="0.4445%" height="15" fill="rgb(253,215,39)" fg:x="777330164" fg:w="9094831"/><text x="38.2447%" y="303.50"></text></g><g><title>[libc.so.6] (5,972,963 samples, 0.29%)</title><rect x="38.1472%" y="277" width="0.2919%" height="15" fill="rgb(221,220,41)" fg:x="780452032" fg:w="5972963"/><text x="38.3972%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18,303,728 samples, 0.89%)</title><rect x="37.8393%" y="405" width="0.8947%" height="15" fill="rgb(218,133,21)" fg:x="774151597" fg:w="18303728"/><text x="38.0893%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (15,125,161 samples, 0.74%)</title><rect x="37.9947%" y="389" width="0.7393%" height="15" fill="rgb(221,193,43)" fg:x="777330164" fg:w="15125161"/><text x="38.2447%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15,125,161 samples, 0.74%)</title><rect x="37.9947%" y="373" width="0.7393%" height="15" fill="rgb(240,128,52)" fg:x="777330164" fg:w="15125161"/><text x="38.2447%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15,125,161 samples, 0.74%)</title><rect x="37.9947%" y="357" width="0.7393%" height="15" fill="rgb(253,114,12)" fg:x="777330164" fg:w="15125161"/><text x="38.2447%" y="367.50"></text></g><g><title>alloc::alloc::alloc (15,125,161 samples, 0.74%)</title><rect x="37.9947%" y="341" width="0.7393%" height="15" fill="rgb(215,223,47)" fg:x="777330164" fg:w="15125161"/><text x="38.2447%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (15,125,161 samples, 0.74%)</title><rect x="37.9947%" y="325" width="0.7393%" height="15" fill="rgb(248,225,23)" fg:x="777330164" fg:w="15125161"/><text x="38.2447%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15,125,161 samples, 0.74%)</title><rect x="37.9947%" y="309" width="0.7393%" height="15" fill="rgb(250,108,0)" fg:x="777330164" fg:w="15125161"/><text x="38.2447%" y="319.50"></text></g><g><title>malloc (6,030,330 samples, 0.29%)</title><rect x="38.4392%" y="293" width="0.2948%" height="15" fill="rgb(228,208,7)" fg:x="786424995" fg:w="6030330"/><text x="38.6892%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (6,624,119 samples, 0.32%)</title><rect x="38.7339%" y="405" width="0.3238%" height="15" fill="rgb(244,45,10)" fg:x="792455325" fg:w="6624119"/><text x="38.9839%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back_mut (6,624,119 samples, 0.32%)</title><rect x="38.7339%" y="389" width="0.3238%" height="15" fill="rgb(207,125,25)" fg:x="792455325" fg:w="6624119"/><text x="38.9839%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (3,366,750 samples, 0.16%)</title><rect x="38.8932%" y="373" width="0.1646%" height="15" fill="rgb(210,195,18)" fg:x="795712694" fg:w="3366750"/><text x="39.1432%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (3,366,750 samples, 0.16%)</title><rect x="38.8932%" y="357" width="0.1646%" height="15" fill="rgb(249,80,12)" fg:x="795712694" fg:w="3366750"/><text x="39.1432%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (3,366,750 samples, 0.16%)</title><rect x="38.8932%" y="341" width="0.1646%" height="15" fill="rgb(221,65,9)" fg:x="795712694" fg:w="3366750"/><text x="39.1432%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,146,720 samples, 0.15%)</title><rect x="39.0577%" y="261" width="0.1538%" height="15" fill="rgb(235,49,36)" fg:x="799079444" fg:w="3146720"/><text x="39.3077%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (3,146,720 samples, 0.15%)</title><rect x="39.0577%" y="245" width="0.1538%" height="15" fill="rgb(225,32,20)" fg:x="799079444" fg:w="3146720"/><text x="39.3077%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (3,146,720 samples, 0.15%)</title><rect x="39.0577%" y="229" width="0.1538%" height="15" fill="rgb(215,141,46)" fg:x="799079444" fg:w="3146720"/><text x="39.3077%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,146,720 samples, 0.15%)</title><rect x="39.0577%" y="213" width="0.1538%" height="15" fill="rgb(250,160,47)" fg:x="799079444" fg:w="3146720"/><text x="39.3077%" y="223.50"></text></g><g><title>[libc.so.6] (3,146,720 samples, 0.15%)</title><rect x="39.0577%" y="197" width="0.1538%" height="15" fill="rgb(216,222,40)" fg:x="799079444" fg:w="3146720"/><text x="39.3077%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = (u8,liblevenshtein::dictionary::pathmap::PathMapNode)&gt;&gt; (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="405" width="0.3211%" height="15" fill="rgb(234,217,39)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;(u8,alloc::vec::Vec&lt;u8&gt;)&gt;,&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}&gt;&gt; (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="389" width="0.3211%" height="15" fill="rgb(207,178,40)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u8,alloc::vec::Vec&lt;u8&gt;)&gt;&gt; (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="373" width="0.3211%" height="15" fill="rgb(221,136,13)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="357" width="0.3211%" height="15" fill="rgb(249,199,10)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u8,alloc::vec::Vec&lt;u8&gt;),alloc::alloc::Global&gt;&gt; (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="341" width="0.3211%" height="15" fill="rgb(249,222,13)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="325" width="0.3211%" height="15" fill="rgb(244,185,38)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,alloc::vec::Vec&lt;u8&gt;)&gt;&gt; (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="309" width="0.3211%" height="15" fill="rgb(236,202,9)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="293" width="0.3211%" height="15" fill="rgb(250,229,37)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,569,519 samples, 0.32%)</title><rect x="39.0577%" y="277" width="0.3211%" height="15" fill="rgb(206,174,23)" fg:x="799079444" fg:w="6569519"/><text x="39.3077%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,422,799 samples, 0.17%)</title><rect x="39.2115%" y="261" width="0.1673%" height="15" fill="rgb(211,33,43)" fg:x="802226164" fg:w="3422799"/><text x="39.4615%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt;&gt; (3,113,270 samples, 0.15%)</title><rect x="39.3788%" y="389" width="0.1522%" height="15" fill="rgb(245,58,50)" fg:x="805648963" fg:w="3113270"/><text x="39.6288%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,113,270 samples, 0.15%)</title><rect x="39.3788%" y="373" width="0.1522%" height="15" fill="rgb(244,68,36)" fg:x="805648963" fg:w="3113270"/><text x="39.6288%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3,113,270 samples, 0.15%)</title><rect x="39.3788%" y="357" width="0.1522%" height="15" fill="rgb(232,229,15)" fg:x="805648963" fg:w="3113270"/><text x="39.6288%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (3,113,270 samples, 0.15%)</title><rect x="39.3788%" y="341" width="0.1522%" height="15" fill="rgb(254,30,23)" fg:x="805648963" fg:w="3113270"/><text x="39.6288%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (6,464,191 samples, 0.32%)</title><rect x="39.3788%" y="405" width="0.3160%" height="15" fill="rgb(235,160,14)" fg:x="805648963" fg:w="6464191"/><text x="39.6288%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="389" width="0.1638%" height="15" fill="rgb(212,155,44)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="373" width="0.1638%" height="15" fill="rgb(226,2,50)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="357" width="0.1638%" height="15" fill="rgb(234,177,6)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="341" width="0.1638%" height="15" fill="rgb(217,24,9)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="325" width="0.1638%" height="15" fill="rgb(220,13,46)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="309" width="0.1638%" height="15" fill="rgb(239,221,27)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="319.50"></text></g><g><title>__rustc::__rdl_dealloc (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="293" width="0.1638%" height="15" fill="rgb(222,198,25)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="277" width="0.1638%" height="15" fill="rgb(211,99,13)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="287.50"></text></g><g><title>cfree (3,350,921 samples, 0.16%)</title><rect x="39.5310%" y="261" width="0.1638%" height="15" fill="rgb(232,111,31)" fg:x="808762233" fg:w="3350921"/><text x="39.7810%" y="271.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,243,622 samples, 0.16%)</title><rect x="40.0012%" y="389" width="0.1585%" height="15" fill="rgb(245,82,37)" fg:x="818382379" fg:w="3243622"/><text x="40.2512%" y="399.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,085,027 samples, 0.15%)</title><rect x="40.1598%" y="389" width="0.1508%" height="15" fill="rgb(227,149,46)" fg:x="821626001" fg:w="3085027"/><text x="40.4098%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::set_len (3,085,027 samples, 0.15%)</title><rect x="40.1598%" y="373" width="0.1508%" height="15" fill="rgb(218,36,50)" fg:x="821626001" fg:w="3085027"/><text x="40.4098%" y="383.50"></text></g><g><title>[libc.so.6] (3,245,292 samples, 0.16%)</title><rect x="40.3106%" y="245" width="0.1586%" height="15" fill="rgb(226,80,48)" fg:x="824711028" fg:w="3245292"/><text x="40.5606%" y="255.50"></text></g><g><title>[libc.so.6] (3,245,292 samples, 0.16%)</title><rect x="40.3106%" y="229" width="0.1586%" height="15" fill="rgb(238,224,15)" fg:x="824711028" fg:w="3245292"/><text x="40.5606%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="389" width="0.3250%" height="15" fill="rgb(241,136,10)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="373" width="0.3250%" height="15" fill="rgb(208,32,45)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="357" width="0.3250%" height="15" fill="rgb(207,135,9)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="341" width="0.3250%" height="15" fill="rgb(206,86,44)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="325" width="0.3250%" height="15" fill="rgb(245,177,15)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="309" width="0.3250%" height="15" fill="rgb(206,64,50)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="293" width="0.3250%" height="15" fill="rgb(234,36,40)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="277" width="0.3250%" height="15" fill="rgb(213,64,8)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,649,200 samples, 0.33%)</title><rect x="40.3106%" y="261" width="0.3250%" height="15" fill="rgb(210,75,36)" fg:x="824711028" fg:w="6649200"/><text x="40.5606%" y="271.50"></text></g><g><title>cfree (3,403,908 samples, 0.17%)</title><rect x="40.4692%" y="245" width="0.1664%" height="15" fill="rgb(229,88,21)" fg:x="827956320" fg:w="3403908"/><text x="40.7192%" y="255.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::advance (107,955,540 samples, 5.28%)</title><rect x="35.8097%" y="437" width="5.2767%" height="15" fill="rgb(252,204,47)" fg:x="732627517" fg:w="107955540"/><text x="36.0597%" y="447.50">liblev..</text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (85,700,354 samples, 4.19%)</title><rect x="36.8975%" y="421" width="4.1889%" height="15" fill="rgb(208,77,27)" fg:x="754882703" fg:w="85700354"/><text x="37.1475%" y="431.50">lible..</text></g><g><title>liblevenshtein::transducer::transition::transition_state (28,469,903 samples, 1.39%)</title><rect x="39.6948%" y="405" width="1.3916%" height="15" fill="rgb(221,76,26)" fg:x="812113154" fg:w="28469903"/><text x="39.9448%" y="415.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_position (9,222,829 samples, 0.45%)</title><rect x="40.6356%" y="389" width="0.4508%" height="15" fill="rgb(225,139,18)" fg:x="831360228" fg:w="9222829"/><text x="40.8856%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,246,791 samples, 0.16%)</title><rect x="41.0864%" y="405" width="0.1587%" height="15" fill="rgb(230,137,11)" fg:x="840583057" fg:w="3246791"/><text x="41.3364%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3,246,791 samples, 0.16%)</title><rect x="41.0864%" y="389" width="0.1587%" height="15" fill="rgb(212,28,1)" fg:x="840583057" fg:w="3246791"/><text x="41.3364%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (3,246,791 samples, 0.16%)</title><rect x="41.0864%" y="373" width="0.1587%" height="15" fill="rgb(248,164,17)" fg:x="840583057" fg:w="3246791"/><text x="41.3364%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="405" width="0.3194%" height="15" fill="rgb(222,171,42)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="389" width="0.3194%" height="15" fill="rgb(243,84,45)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="373" width="0.3194%" height="15" fill="rgb(252,49,23)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="357" width="0.3194%" height="15" fill="rgb(215,19,7)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="367.50"></text></g><g><title>alloc::alloc::alloc (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="341" width="0.3194%" height="15" fill="rgb(238,81,41)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="325" width="0.3194%" height="15" fill="rgb(210,199,37)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="309" width="0.3194%" height="15" fill="rgb(244,192,49)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="319.50"></text></g><g><title>malloc (6,535,188 samples, 0.32%)</title><rect x="41.2451%" y="293" width="0.3194%" height="15" fill="rgb(226,211,11)" fg:x="843829848" fg:w="6535188"/><text x="41.4951%" y="303.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (9,693,559 samples, 0.47%)</title><rect x="43.4063%" y="197" width="0.4738%" height="15" fill="rgb(236,162,54)" fg:x="888046061" fg:w="9693559"/><text x="43.6563%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50,748,920 samples, 2.48%)</title><rect x="41.5645%" y="277" width="2.4805%" height="15" fill="rgb(220,229,9)" fg:x="850365036" fg:w="50748920"/><text x="41.8145%" y="287.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (50,748,920 samples, 2.48%)</title><rect x="41.5645%" y="261" width="2.4805%" height="15" fill="rgb(250,87,22)" fg:x="850365036" fg:w="50748920"/><text x="41.8145%" y="271.50">co..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50,748,920 samples, 2.48%)</title><rect x="41.5645%" y="245" width="2.4805%" height="15" fill="rgb(239,43,17)" fg:x="850365036" fg:w="50748920"/><text x="41.8145%" y="255.50">&lt;c..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (50,748,920 samples, 2.48%)</title><rect x="41.5645%" y="229" width="2.4805%" height="15" fill="rgb(231,177,25)" fg:x="850365036" fg:w="50748920"/><text x="41.8145%" y="239.50">co..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (50,748,920 samples, 2.48%)</title><rect x="41.5645%" y="213" width="2.4805%" height="15" fill="rgb(219,179,1)" fg:x="850365036" fg:w="50748920"/><text x="41.8145%" y="223.50">&lt;c..</text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (3,374,336 samples, 0.16%)</title><rect x="43.8801%" y="197" width="0.1649%" height="15" fill="rgb(238,219,53)" fg:x="897739620" fg:w="3374336"/><text x="44.1301%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,755,678 samples, 0.13%)</title><rect x="44.0450%" y="277" width="0.1347%" height="15" fill="rgb(232,167,36)" fg:x="901113956" fg:w="2755678"/><text x="44.2950%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (56,993,714 samples, 2.79%)</title><rect x="41.5645%" y="309" width="2.7858%" height="15" fill="rgb(244,19,51)" fg:x="850365036" fg:w="56993714"/><text x="41.8145%" y="319.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (56,993,714 samples, 2.79%)</title><rect x="41.5645%" y="293" width="2.7858%" height="15" fill="rgb(224,6,22)" fg:x="850365036" fg:w="56993714"/><text x="41.8145%" y="303.50">al..</text></g><g><title>core::ptr::write (3,489,116 samples, 0.17%)</title><rect x="44.1797%" y="277" width="0.1705%" height="15" fill="rgb(224,145,5)" fg:x="903869634" fg:w="3489116"/><text x="44.4297%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (174,933,979 samples, 8.55%)</title><rect x="41.5645%" y="373" width="8.5505%" height="15" fill="rgb(234,130,49)" fg:x="850365036" fg:w="174933979"/><text x="41.8145%" y="383.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (174,933,979 samples, 8.55%)</title><rect x="41.5645%" y="357" width="8.5505%" height="15" fill="rgb(254,6,2)" fg:x="850365036" fg:w="174933979"/><text x="41.8145%" y="367.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (174,933,979 samples, 8.55%)</title><rect x="41.5645%" y="341" width="8.5505%" height="15" fill="rgb(208,96,46)" fg:x="850365036" fg:w="174933979"/><text x="41.8145%" y="351.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (174,933,979 samples, 8.55%)</title><rect x="41.5645%" y="325" width="8.5505%" height="15" fill="rgb(239,3,39)" fg:x="850365036" fg:w="174933979"/><text x="41.8145%" y="335.50">&lt;alloc::vec:..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (117,940,265 samples, 5.76%)</title><rect x="44.3502%" y="309" width="5.7647%" height="15" fill="rgb(233,210,1)" fg:x="907358750" fg:w="117940265"/><text x="44.6002%" y="319.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (117,940,265 samples, 5.76%)</title><rect x="44.3502%" y="293" width="5.7647%" height="15" fill="rgb(244,137,37)" fg:x="907358750" fg:w="117940265"/><text x="44.6002%" y="303.50">core::i..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (117,940,265 samples, 5.76%)</title><rect x="44.3502%" y="277" width="5.7647%" height="15" fill="rgb(240,136,2)" fg:x="907358750" fg:w="117940265"/><text x="44.6002%" y="287.50">&lt;core::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (117,940,265 samples, 5.76%)</title><rect x="44.3502%" y="261" width="5.7647%" height="15" fill="rgb(239,18,37)" fg:x="907358750" fg:w="117940265"/><text x="44.6002%" y="271.50">core::i..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (117,940,265 samples, 5.76%)</title><rect x="44.3502%" y="245" width="5.7647%" height="15" fill="rgb(218,185,22)" fg:x="907358750" fg:w="117940265"/><text x="44.6002%" y="255.50">&lt;core::..</text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (16,251,317 samples, 0.79%)</title><rect x="49.3206%" y="229" width="0.7943%" height="15" fill="rgb(225,218,4)" fg:x="1009047698" fg:w="16251317"/><text x="49.5706%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (3,021,433 samples, 0.15%)</title><rect x="50.1150%" y="373" width="0.1477%" height="15" fill="rgb(230,182,32)" fg:x="1025299015" fg:w="3021433"/><text x="50.3650%" y="383.50"></text></g><g><title>cfree (3,021,433 samples, 0.15%)</title><rect x="50.1150%" y="357" width="0.1477%" height="15" fill="rgb(242,56,43)" fg:x="1025299015" fg:w="3021433"/><text x="50.3650%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt; (2,450,998 samples, 0.12%)</title><rect x="50.2627%" y="373" width="0.1198%" height="15" fill="rgb(233,99,24)" fg:x="1028320448" fg:w="2450998"/><text x="50.5127%" y="383.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,450,998 samples, 0.12%)</title><rect x="50.2627%" y="357" width="0.1198%" height="15" fill="rgb(234,209,42)" fg:x="1028320448" fg:w="2450998"/><text x="50.5127%" y="367.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (2,450,998 samples, 0.12%)</title><rect x="50.2627%" y="341" width="0.1198%" height="15" fill="rgb(227,7,12)" fg:x="1028320448" fg:w="2450998"/><text x="50.5127%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (2,450,998 samples, 0.12%)</title><rect x="50.2627%" y="325" width="0.1198%" height="15" fill="rgb(245,203,43)" fg:x="1028320448" fg:w="2450998"/><text x="50.5127%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (2,450,998 samples, 0.12%)</title><rect x="50.2627%" y="309" width="0.1198%" height="15" fill="rgb(238,205,33)" fg:x="1028320448" fg:w="2450998"/><text x="50.5127%" y="319.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (183,374,845 samples, 8.96%)</title><rect x="41.5645%" y="389" width="8.9631%" height="15" fill="rgb(231,56,7)" fg:x="850365036" fg:w="183374845"/><text x="41.8145%" y="399.50">&lt;liblevenshte..</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::read (2,968,435 samples, 0.15%)</title><rect x="50.3825%" y="373" width="0.1451%" height="15" fill="rgb(244,186,29)" fg:x="1030771446" fg:w="2968435"/><text x="50.6325%" y="383.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (2,968,435 samples, 0.15%)</title><rect x="50.3825%" y="357" width="0.1451%" height="15" fill="rgb(234,111,31)" fg:x="1030771446" fg:w="2968435"/><text x="50.6325%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (2,968,435 samples, 0.15%)</title><rect x="50.3825%" y="341" width="0.1451%" height="15" fill="rgb(241,149,10)" fg:x="1030771446" fg:w="2968435"/><text x="50.6325%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2,968,435 samples, 0.15%)</title><rect x="50.3825%" y="325" width="0.1451%" height="15" fill="rgb(249,206,44)" fg:x="1030771446" fg:w="2968435"/><text x="50.6325%" y="335.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (196,147,021 samples, 9.59%)</title><rect x="41.0864%" y="421" width="9.5874%" height="15" fill="rgb(251,153,30)" fg:x="840583057" fg:w="196147021"/><text x="41.3364%" y="431.50">&lt;liblevenshtei..</text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (186,365,042 samples, 9.11%)</title><rect x="41.5645%" y="405" width="9.1092%" height="15" fill="rgb(239,152,38)" fg:x="850365036" fg:w="186365042"/><text x="41.8145%" y="415.50">liblevenshtei..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;pathmap::trie_map::PathMap&lt;()&gt;&gt;&gt; (2,990,197 samples, 0.15%)</title><rect x="50.5275%" y="389" width="0.1462%" height="15" fill="rgb(249,139,47)" fg:x="1033739881" fg:w="2990197"/><text x="50.7775%" y="399.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,990,197 samples, 0.15%)</title><rect x="50.5275%" y="373" width="0.1462%" height="15" fill="rgb(244,64,35)" fg:x="1033739881" fg:w="2990197"/><text x="50.7775%" y="383.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (2,990,197 samples, 0.15%)</title><rect x="50.5275%" y="357" width="0.1462%" height="15" fill="rgb(216,46,15)" fg:x="1033739881" fg:w="2990197"/><text x="50.7775%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (2,990,197 samples, 0.15%)</title><rect x="50.5275%" y="341" width="0.1462%" height="15" fill="rgb(250,74,19)" fg:x="1033739881" fg:w="2990197"/><text x="50.7775%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (2,990,197 samples, 0.15%)</title><rect x="50.5275%" y="325" width="0.1462%" height="15" fill="rgb(249,42,33)" fg:x="1033739881" fg:w="2990197"/><text x="50.7775%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,272,998 samples, 0.31%)</title><rect x="50.8206%" y="389" width="0.3066%" height="15" fill="rgb(242,149,17)" fg:x="1039735951" fg:w="6272998"/><text x="51.0706%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,272,998 samples, 0.31%)</title><rect x="50.8206%" y="373" width="0.3066%" height="15" fill="rgb(244,29,21)" fg:x="1039735951" fg:w="6272998"/><text x="51.0706%" y="383.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (15,873,798 samples, 0.78%)</title><rect x="50.6737%" y="421" width="0.7759%" height="15" fill="rgb(220,130,37)" fg:x="1036730078" fg:w="15873798"/><text x="50.9237%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,873,798 samples, 0.78%)</title><rect x="50.6737%" y="405" width="0.7759%" height="15" fill="rgb(211,67,2)" fg:x="1036730078" fg:w="15873798"/><text x="50.9237%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6,594,927 samples, 0.32%)</title><rect x="51.1272%" y="389" width="0.3223%" height="15" fill="rgb(235,68,52)" fg:x="1046008949" fg:w="6594927"/><text x="51.3772%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,491,147 samples, 0.17%)</title><rect x="51.2790%" y="373" width="0.1706%" height="15" fill="rgb(246,142,3)" fg:x="1049112729" fg:w="3491147"/><text x="51.5290%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,404,525 samples, 0.31%)</title><rect x="51.7581%" y="405" width="0.3130%" height="15" fill="rgb(241,25,7)" fg:x="1058916216" fg:w="6404525"/><text x="52.0081%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,404,525 samples, 0.31%)</title><rect x="51.7581%" y="389" width="0.3130%" height="15" fill="rgb(242,119,39)" fg:x="1058916216" fg:w="6404525"/><text x="52.0081%" y="399.50"></text></g><g><title>liblevenshtein::transducer::transition::characteristic_vector (6,217,214 samples, 0.30%)</title><rect x="52.0712%" y="405" width="0.3039%" height="15" fill="rgb(241,98,45)" fg:x="1065320741" fg:w="6217214"/><text x="52.3212%" y="415.50"></text></g><g><title>[libc.so.6] (3,360,936 samples, 0.16%)</title><rect x="52.6803%" y="181" width="0.1643%" height="15" fill="rgb(254,28,30)" fg:x="1077782547" fg:w="3360936"/><text x="52.9303%" y="191.50"></text></g><g><title>[libc.so.6] (3,360,936 samples, 0.16%)</title><rect x="52.6803%" y="165" width="0.1643%" height="15" fill="rgb(241,142,54)" fg:x="1077782547" fg:w="3360936"/><text x="52.9303%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22,878,430 samples, 1.12%)</title><rect x="52.5214%" y="261" width="1.1183%" height="15" fill="rgb(222,85,15)" fg:x="1074531346" fg:w="22878430"/><text x="52.7714%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22,878,430 samples, 1.12%)</title><rect x="52.5214%" y="245" width="1.1183%" height="15" fill="rgb(210,85,47)" fg:x="1074531346" fg:w="22878430"/><text x="52.7714%" y="255.50"></text></g><g><title>alloc::alloc::alloc (22,878,430 samples, 1.12%)</title><rect x="52.5214%" y="229" width="1.1183%" height="15" fill="rgb(224,206,25)" fg:x="1074531346" fg:w="22878430"/><text x="52.7714%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (22,878,430 samples, 1.12%)</title><rect x="52.5214%" y="213" width="1.1183%" height="15" fill="rgb(243,201,19)" fg:x="1074531346" fg:w="22878430"/><text x="52.7714%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (22,878,430 samples, 1.12%)</title><rect x="52.5214%" y="197" width="1.1183%" height="15" fill="rgb(236,59,4)" fg:x="1074531346" fg:w="22878430"/><text x="52.7714%" y="207.50"></text></g><g><title>malloc (16,266,293 samples, 0.80%)</title><rect x="52.8446%" y="181" width="0.7951%" height="15" fill="rgb(254,179,45)" fg:x="1081143483" fg:w="16266293"/><text x="53.0946%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (26,007,050 samples, 1.27%)</title><rect x="52.5214%" y="325" width="1.2712%" height="15" fill="rgb(226,14,10)" fg:x="1074531346" fg:w="26007050"/><text x="52.7714%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26,007,050 samples, 1.27%)</title><rect x="52.5214%" y="309" width="1.2712%" height="15" fill="rgb(244,27,41)" fg:x="1074531346" fg:w="26007050"/><text x="52.7714%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (26,007,050 samples, 1.27%)</title><rect x="52.5214%" y="293" width="1.2712%" height="15" fill="rgb(235,35,32)" fg:x="1074531346" fg:w="26007050"/><text x="52.7714%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (26,007,050 samples, 1.27%)</title><rect x="52.5214%" y="277" width="1.2712%" height="15" fill="rgb(218,68,31)" fg:x="1074531346" fg:w="26007050"/><text x="52.7714%" y="287.50"></text></g><g><title>alloc::raw_vec::layout_array (3,128,620 samples, 0.15%)</title><rect x="53.6396%" y="261" width="0.1529%" height="15" fill="rgb(207,120,37)" fg:x="1097409776" fg:w="3128620"/><text x="53.8896%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,128,620 samples, 0.15%)</title><rect x="53.6396%" y="245" width="0.1529%" height="15" fill="rgb(227,98,0)" fg:x="1097409776" fg:w="3128620"/><text x="53.8896%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (3,128,620 samples, 0.15%)</title><rect x="53.6396%" y="229" width="0.1529%" height="15" fill="rgb(207,7,3)" fg:x="1097409776" fg:w="3128620"/><text x="53.8896%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3,128,620 samples, 0.15%)</title><rect x="53.6396%" y="213" width="0.1529%" height="15" fill="rgb(206,98,19)" fg:x="1097409776" fg:w="3128620"/><text x="53.8896%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3,128,620 samples, 0.15%)</title><rect x="53.6396%" y="197" width="0.1529%" height="15" fill="rgb(217,5,26)" fg:x="1097409776" fg:w="3128620"/><text x="53.8896%" y="207.50"></text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (29,100,074 samples, 1.42%)</title><rect x="52.5214%" y="389" width="1.4224%" height="15" fill="rgb(235,190,38)" fg:x="1074531346" fg:w="29100074"/><text x="52.7714%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29,100,074 samples, 1.42%)</title><rect x="52.5214%" y="373" width="1.4224%" height="15" fill="rgb(247,86,24)" fg:x="1074531346" fg:w="29100074"/><text x="52.7714%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29,100,074 samples, 1.42%)</title><rect x="52.5214%" y="357" width="1.4224%" height="15" fill="rgb(205,101,16)" fg:x="1074531346" fg:w="29100074"/><text x="52.7714%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (29,100,074 samples, 1.42%)</title><rect x="52.5214%" y="341" width="1.4224%" height="15" fill="rgb(246,168,33)" fg:x="1074531346" fg:w="29100074"/><text x="52.7714%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3,093,024 samples, 0.15%)</title><rect x="53.7926%" y="325" width="0.1512%" height="15" fill="rgb(231,114,1)" fg:x="1100538396" fg:w="3093024"/><text x="54.0426%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,198,377 samples, 0.16%)</title><rect x="54.1073%" y="373" width="0.1563%" height="15" fill="rgb(207,184,53)" fg:x="1106977081" fg:w="3198377"/><text x="54.3573%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,198,377 samples, 0.16%)</title><rect x="54.1073%" y="357" width="0.1563%" height="15" fill="rgb(224,95,51)" fg:x="1106977081" fg:w="3198377"/><text x="54.3573%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (2,962,143 samples, 0.14%)</title><rect x="54.2636%" y="373" width="0.1448%" height="15" fill="rgb(212,188,45)" fg:x="1110175458" fg:w="2962143"/><text x="54.5136%" y="383.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (2,962,143 samples, 0.14%)</title><rect x="54.2636%" y="357" width="0.1448%" height="15" fill="rgb(223,154,38)" fg:x="1110175458" fg:w="2962143"/><text x="54.5136%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (2,962,143 samples, 0.14%)</title><rect x="54.2636%" y="341" width="0.1448%" height="15" fill="rgb(251,22,52)" fg:x="1110175458" fg:w="2962143"/><text x="54.5136%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,962,143 samples, 0.14%)</title><rect x="54.2636%" y="325" width="0.1448%" height="15" fill="rgb(229,209,22)" fg:x="1110175458" fg:w="2962143"/><text x="54.5136%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,962,143 samples, 0.14%)</title><rect x="54.2636%" y="309" width="0.1448%" height="15" fill="rgb(234,138,34)" fg:x="1110175458" fg:w="2962143"/><text x="54.5136%" y="319.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (15,963,744 samples, 0.78%)</title><rect x="54.4084%" y="373" width="0.7803%" height="15" fill="rgb(212,95,11)" fg:x="1113137601" fg:w="15963744"/><text x="54.6584%" y="383.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (15,963,744 samples, 0.78%)</title><rect x="54.4084%" y="357" width="0.7803%" height="15" fill="rgb(240,179,47)" fg:x="1113137601" fg:w="15963744"/><text x="54.6584%" y="367.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (2,995,759 samples, 0.15%)</title><rect x="55.0422%" y="341" width="0.1464%" height="15" fill="rgb(240,163,11)" fg:x="1126105586" fg:w="2995759"/><text x="55.2922%" y="351.50"></text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure (67,184,304 samples, 3.28%)</title><rect x="52.3751%" y="405" width="3.2839%" height="15" fill="rgb(236,37,12)" fg:x="1071537955" fg:w="67184304"/><text x="52.6251%" y="415.50">lib..</text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_mut (35,090,839 samples, 1.72%)</title><rect x="53.9437%" y="389" width="1.7152%" height="15" fill="rgb(232,164,16)" fg:x="1103631420" fg:w="35090839"/><text x="54.1937%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (9,620,914 samples, 0.47%)</title><rect x="55.1887%" y="373" width="0.4703%" height="15" fill="rgb(244,205,15)" fg:x="1129101345" fg:w="9620914"/><text x="55.4387%" y="383.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (301,578,317 samples, 14.74%)</title><rect x="41.0864%" y="437" width="14.7407%" height="15" fill="rgb(223,117,47)" fg:x="840583057" fg:w="301578317"/><text x="41.3364%" y="447.50">liblevenshtein::transd..</text></g><g><title>liblevenshtein::transducer::transition::transition_state (89,557,498 samples, 4.38%)</title><rect x="51.4496%" y="421" width="4.3774%" height="15" fill="rgb(244,107,35)" fg:x="1052603876" fg:w="89557498"/><text x="51.6996%" y="431.50">lible..</text></g><g><title>liblevenshtein::transducer::transition::transition_position (3,439,115 samples, 0.17%)</title><rect x="55.6589%" y="405" width="0.1681%" height="15" fill="rgb(205,140,8)" fg:x="1138722259" fg:w="3439115"/><text x="55.9089%" y="415.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_standard (3,439,115 samples, 0.17%)</title><rect x="55.6589%" y="389" width="0.1681%" height="15" fill="rgb(228,84,46)" fg:x="1138722259" fg:w="3439115"/><text x="55.9089%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (3,439,115 samples, 0.17%)</title><rect x="55.6589%" y="373" width="0.1681%" height="15" fill="rgb(254,188,9)" fg:x="1138722259" fg:w="3439115"/><text x="55.9089%" y="383.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (3,178,850 samples, 0.16%)</title><rect x="55.8270%" y="341" width="0.1554%" height="15" fill="rgb(206,112,54)" fg:x="1142161374" fg:w="3178850"/><text x="56.0770%" y="351.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::is_val (3,178,850 samples, 0.16%)</title><rect x="55.8270%" y="325" width="0.1554%" height="15" fill="rgb(216,84,49)" fg:x="1142161374" fg:w="3178850"/><text x="56.0770%" y="335.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::is_val_internal (3,178,850 samples, 0.16%)</title><rect x="55.8270%" y="309" width="0.1554%" height="15" fill="rgb(214,194,35)" fg:x="1142161374" fg:w="3178850"/><text x="56.0770%" y="319.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (3,178,850 samples, 0.16%)</title><rect x="55.8270%" y="293" width="0.1554%" height="15" fill="rgb(249,28,3)" fg:x="1142161374" fg:w="3178850"/><text x="56.0770%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,178,850 samples, 0.16%)</title><rect x="55.8270%" y="277" width="0.1554%" height="15" fill="rgb(222,56,52)" fg:x="1142161374" fg:w="3178850"/><text x="56.0770%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,178,850 samples, 0.16%)</title><rect x="55.8270%" y="261" width="0.1554%" height="15" fill="rgb(245,217,50)" fg:x="1142161374" fg:w="3178850"/><text x="56.0770%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,178,850 samples, 0.16%)</title><rect x="55.8270%" y="245" width="0.1554%" height="15" fill="rgb(213,201,24)" fg:x="1142161374" fg:w="3178850"/><text x="56.0770%" y="255.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (9,648,637 samples, 0.47%)</title><rect x="55.8270%" y="437" width="0.4716%" height="15" fill="rgb(248,116,28)" fg:x="1142161374" fg:w="9648637"/><text x="56.0770%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (9,648,637 samples, 0.47%)</title><rect x="55.8270%" y="421" width="0.4716%" height="15" fill="rgb(219,72,43)" fg:x="1142161374" fg:w="9648637"/><text x="56.0770%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert_mut (9,648,637 samples, 0.47%)</title><rect x="55.8270%" y="405" width="0.4716%" height="15" fill="rgb(209,138,14)" fg:x="1142161374" fg:w="9648637"/><text x="56.0770%" y="415.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final (9,648,637 samples, 0.47%)</title><rect x="55.8270%" y="389" width="0.4716%" height="15" fill="rgb(222,18,33)" fg:x="1142161374" fg:w="9648637"/><text x="56.0770%" y="399.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (9,648,637 samples, 0.47%)</title><rect x="55.8270%" y="373" width="0.4716%" height="15" fill="rgb(213,199,7)" fg:x="1142161374" fg:w="9648637"/><text x="56.0770%" y="383.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::is_final::{{closure}} (9,648,637 samples, 0.47%)</title><rect x="55.8270%" y="357" width="0.4716%" height="15" fill="rgb(250,110,10)" fg:x="1142161374" fg:w="9648637"/><text x="56.0770%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (6,469,787 samples, 0.32%)</title><rect x="55.9824%" y="341" width="0.3162%" height="15" fill="rgb(248,123,6)" fg:x="1145340224" fg:w="6469787"/><text x="56.2324%" y="351.50"></text></g><g><title>cfree (6,469,787 samples, 0.32%)</title><rect x="55.9824%" y="325" width="0.3162%" height="15" fill="rgb(206,91,31)" fg:x="1145340224" fg:w="6469787"/><text x="56.2324%" y="335.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::set_payload_abstract (1,679,623 samples, 0.08%)</title><rect x="56.2986%" y="437" width="0.0821%" height="15" fill="rgb(211,154,13)" fg:x="1151810011" fg:w="1679623"/><text x="56.5486%" y="447.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::set_payload_abstract::{{closure}} (1,679,623 samples, 0.08%)</title><rect x="56.2986%" y="421" width="0.0821%" height="15" fill="rgb(225,148,7)" fg:x="1151810011" fg:w="1679623"/><text x="56.5486%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1,679,623 samples, 0.08%)</title><rect x="56.2986%" y="405" width="0.0821%" height="15" fill="rgb(220,160,43)" fg:x="1151810011" fg:w="1679623"/><text x="56.5486%" y="415.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::root (3,289,079 samples, 0.16%)</title><rect x="56.8588%" y="421" width="0.1608%" height="15" fill="rgb(213,52,39)" fg:x="1163271351" fg:w="3289079"/><text x="57.1088%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,289,079 samples, 0.16%)</title><rect x="56.8588%" y="405" width="0.1608%" height="15" fill="rgb(243,137,7)" fg:x="1163271351" fg:w="3289079"/><text x="57.1088%" y="415.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (9,490,979 samples, 0.46%)</title><rect x="57.9516%" y="165" width="0.4639%" height="15" fill="rgb(230,79,13)" fg:x="1185627877" fg:w="9490979"/><text x="58.2016%" y="175.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::path_exists (9,490,979 samples, 0.46%)</title><rect x="57.9516%" y="149" width="0.4639%" height="15" fill="rgb(247,105,23)" fg:x="1185627877" fg:w="9490979"/><text x="58.2016%" y="159.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (9,490,979 samples, 0.46%)</title><rect x="57.9516%" y="133" width="0.4639%" height="15" fill="rgb(223,179,41)" fg:x="1185627877" fg:w="9490979"/><text x="58.2016%" y="143.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (9,490,979 samples, 0.46%)</title><rect x="57.9516%" y="117" width="0.4639%" height="15" fill="rgb(218,9,34)" fg:x="1185627877" fg:w="9490979"/><text x="58.2016%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (9,490,979 samples, 0.46%)</title><rect x="57.9516%" y="101" width="0.4639%" height="15" fill="rgb(222,106,8)" fg:x="1185627877" fg:w="9490979"/><text x="58.2016%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,268,796 samples, 0.16%)</title><rect x="58.7493%" y="117" width="0.1598%" height="15" fill="rgb(211,220,0)" fg:x="1201948884" fg:w="3268796"/><text x="58.9993%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (3,268,796 samples, 0.16%)</title><rect x="58.7493%" y="101" width="0.1598%" height="15" fill="rgb(229,52,16)" fg:x="1201948884" fg:w="3268796"/><text x="58.9993%" y="111.50"></text></g><g><title>core::ptr::write (3,268,796 samples, 0.16%)</title><rect x="58.7493%" y="85" width="0.1598%" height="15" fill="rgb(212,155,18)" fg:x="1201948884" fg:w="3268796"/><text x="58.9993%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6,364,557 samples, 0.31%)</title><rect x="59.2130%" y="85" width="0.3111%" height="15" fill="rgb(242,21,14)" fg:x="1211434453" fg:w="6364557"/><text x="59.4630%" y="95.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (6,364,557 samples, 0.31%)</title><rect x="59.2130%" y="69" width="0.3111%" height="15" fill="rgb(222,19,48)" fg:x="1211434453" fg:w="6364557"/><text x="59.4630%" y="79.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (6,364,557 samples, 0.31%)</title><rect x="59.2130%" y="53" width="0.3111%" height="15" fill="rgb(232,45,27)" fg:x="1211434453" fg:w="6364557"/><text x="59.4630%" y="63.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (6,364,557 samples, 0.31%)</title><rect x="59.2130%" y="37" width="0.3111%" height="15" fill="rgb(249,103,42)" fg:x="1211434453" fg:w="6364557"/><text x="59.4630%" y="47.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (29,142,342 samples, 1.42%)</title><rect x="58.4155%" y="165" width="1.4244%" height="15" fill="rgb(246,81,33)" fg:x="1195118856" fg:w="29142342"/><text x="58.6655%" y="175.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (29,142,342 samples, 1.42%)</title><rect x="58.4155%" y="149" width="1.4244%" height="15" fill="rgb(252,33,42)" fg:x="1195118856" fg:w="29142342"/><text x="58.6655%" y="159.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::descend_to_internal (29,142,342 samples, 1.42%)</title><rect x="58.4155%" y="133" width="1.4244%" height="15" fill="rgb(209,212,41)" fg:x="1195118856" fg:w="29142342"/><text x="58.6655%" y="143.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (19,043,518 samples, 0.93%)</title><rect x="58.9091%" y="117" width="0.9308%" height="15" fill="rgb(207,154,6)" fg:x="1205217680" fg:w="19043518"/><text x="59.1591%" y="127.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (12,826,745 samples, 0.63%)</title><rect x="59.2130%" y="101" width="0.6270%" height="15" fill="rgb(223,64,47)" fg:x="1211434453" fg:w="12826745"/><text x="59.4630%" y="111.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (6,462,188 samples, 0.32%)</title><rect x="59.5241%" y="85" width="0.3159%" height="15" fill="rgb(211,161,38)" fg:x="1217799010" fg:w="6462188"/><text x="59.7741%" y="95.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (6,462,188 samples, 0.32%)</title><rect x="59.5241%" y="69" width="0.3159%" height="15" fill="rgb(219,138,40)" fg:x="1217799010" fg:w="6462188"/><text x="59.7741%" y="79.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (6,462,188 samples, 0.32%)</title><rect x="59.5241%" y="53" width="0.3159%" height="15" fill="rgb(241,228,46)" fg:x="1217799010" fg:w="6462188"/><text x="59.7741%" y="63.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (54,495,265 samples, 2.66%)</title><rect x="57.8090%" y="229" width="2.6636%" height="15" fill="rgb(223,209,38)" fg:x="1182710258" fg:w="54495265"/><text x="58.0590%" y="239.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (54,495,265 samples, 2.66%)</title><rect x="57.8090%" y="213" width="2.6636%" height="15" fill="rgb(236,164,45)" fg:x="1182710258" fg:w="54495265"/><text x="58.0590%" y="223.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (54,495,265 samples, 2.66%)</title><rect x="57.8090%" y="197" width="2.6636%" height="15" fill="rgb(231,15,5)" fg:x="1182710258" fg:w="54495265"/><text x="58.0590%" y="207.50">co..</text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}::{{closure}} (54,495,265 samples, 2.66%)</title><rect x="57.8090%" y="181" width="2.6636%" height="15" fill="rgb(252,35,15)" fg:x="1182710258" fg:w="54495265"/><text x="58.0590%" y="191.50">&lt;l..</text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::ReadZipperUntracked&lt;()&gt;&gt; (12,944,325 samples, 0.63%)</title><rect x="59.8399%" y="165" width="0.6327%" height="15" fill="rgb(248,181,18)" fg:x="1224261198" fg:w="12944325"/><text x="60.0899%" y="175.50"></text></g><g><title>cfree (6,400,488 samples, 0.31%)</title><rect x="60.1598%" y="149" width="0.3128%" height="15" fill="rgb(233,39,42)" fg:x="1230805035" fg:w="6400488"/><text x="60.4098%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="389" width="3.2826%" height="15" fill="rgb(238,110,33)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="399.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="373" width="3.2826%" height="15" fill="rgb(233,195,10)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="383.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="357" width="3.2826%" height="15" fill="rgb(254,105,3)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="367.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="341" width="3.2826%" height="15" fill="rgb(221,225,9)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="351.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="325" width="3.2826%" height="15" fill="rgb(224,227,45)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="335.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="309" width="3.2826%" height="15" fill="rgb(229,198,43)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="319.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="293" width="3.2826%" height="15" fill="rgb(206,209,35)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="303.50">all..</text></g><g><title>alloc::alloc::alloc (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="277" width="3.2826%" height="15" fill="rgb(245,195,53)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="287.50">all..</text></g><g><title>__rustc::__rdl_alloc (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="261" width="3.2826%" height="15" fill="rgb(240,92,26)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="271.50">__r..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (67,158,562 samples, 3.28%)</title><rect x="57.6421%" y="245" width="3.2826%" height="15" fill="rgb(207,40,23)" fg:x="1179295462" fg:w="67158562"/><text x="57.8921%" y="255.50">std..</text></g><g><title>malloc (9,248,501 samples, 0.45%)</title><rect x="60.4726%" y="229" width="0.4521%" height="15" fill="rgb(223,111,35)" fg:x="1237205523" fg:w="9248501"/><text x="60.7226%" y="239.50"></text></g><g><title>pathmap::zipper::node_along_path (6,187,723 samples, 0.30%)</title><rect x="60.9247%" y="389" width="0.3024%" height="15" fill="rgb(229,147,28)" fg:x="1246454024" fg:w="6187723"/><text x="61.1747%" y="399.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (6,187,723 samples, 0.30%)</title><rect x="60.9247%" y="373" width="0.3024%" height="15" fill="rgb(211,29,28)" fg:x="1246454024" fg:w="6187723"/><text x="61.1747%" y="383.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (6,187,723 samples, 0.30%)</title><rect x="60.9247%" y="357" width="0.3024%" height="15" fill="rgb(228,72,33)" fg:x="1246454024" fg:w="6187723"/><text x="61.1747%" y="367.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (6,187,723 samples, 0.30%)</title><rect x="60.9247%" y="341" width="0.3024%" height="15" fill="rgb(205,214,31)" fg:x="1246454024" fg:w="6187723"/><text x="61.1747%" y="351.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (3,107,026 samples, 0.15%)</title><rect x="61.0753%" y="325" width="0.1519%" height="15" fill="rgb(224,111,15)" fg:x="1249534721" fg:w="3107026"/><text x="61.3253%" y="335.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (102,272,162 samples, 5.00%)</title><rect x="56.3807%" y="437" width="4.9989%" height="15" fill="rgb(253,21,26)" fg:x="1153489634" fg:w="102272162"/><text x="56.6307%" y="447.50">pathma..</text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (89,201,366 samples, 4.36%)</title><rect x="57.0196%" y="421" width="4.3600%" height="15" fill="rgb(245,139,43)" fg:x="1166560430" fg:w="89201366"/><text x="57.2696%" y="431.50">pathm..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (89,201,366 samples, 4.36%)</title><rect x="57.0196%" y="405" width="4.3600%" height="15" fill="rgb(252,170,7)" fg:x="1166560430" fg:w="89201366"/><text x="57.2696%" y="415.50">pathm..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::make_static_path (3,120,049 samples, 0.15%)</title><rect x="61.2271%" y="389" width="0.1525%" height="15" fill="rgb(231,118,14)" fg:x="1252641747" fg:w="3120049"/><text x="61.4771%" y="399.50"></text></g><g><title>[unknown] (843,209,443 samples, 41.21%)</title><rect x="20.2286%" y="453" width="41.2147%" height="15" fill="rgb(238,83,0)" fg:x="413855004" fg:w="843209443"/><text x="20.4786%" y="463.50">[unknown]</text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRefMut&lt;V,A&gt;::node_set_val (1,302,651 samples, 0.06%)</title><rect x="61.3796%" y="437" width="0.0637%" height="15" fill="rgb(221,39,39)" fg:x="1255761796" fg:w="1302651"/><text x="61.6296%" y="447.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_set_val (1,302,651 samples, 0.06%)</title><rect x="61.3796%" y="421" width="0.0637%" height="15" fill="rgb(222,119,46)" fg:x="1255761796" fg:w="1302651"/><text x="61.6296%" y="431.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::set_val (1,302,651 samples, 0.06%)</title><rect x="61.3796%" y="405" width="0.0637%" height="15" fill="rgb(222,165,49)" fg:x="1255761796" fg:w="1302651"/><text x="61.6296%" y="415.50"></text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::set_bit (1,302,651 samples, 0.06%)</title><rect x="61.3796%" y="389" width="0.0637%" height="15" fill="rgb(219,113,52)" fg:x="1255761796" fg:w="1302651"/><text x="61.6296%" y="399.50"></text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::set_bit (1,302,651 samples, 0.06%)</title><rect x="61.3796%" y="373" width="0.0637%" height="15" fill="rgb(214,7,15)" fg:x="1255761796" fg:w="1302651"/><text x="61.6296%" y="383.50"></text></g><g><title>__rustc::__rust_realloc (3,265,664 samples, 0.16%)</title><rect x="61.4433%" y="453" width="0.1596%" height="15" fill="rgb(235,32,4)" fg:x="1257064447" fg:w="3265664"/><text x="61.6933%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1,072,431 samples, 0.05%)</title><rect x="61.6029%" y="453" width="0.0524%" height="15" fill="rgb(238,90,54)" fg:x="1260330111" fg:w="1072431"/><text x="61.8529%" y="463.50"></text></g><g><title>[libc.so.6] (1,072,431 samples, 0.05%)</title><rect x="61.6029%" y="437" width="0.0524%" height="15" fill="rgb(213,208,19)" fg:x="1260330111" fg:w="1072431"/><text x="61.8529%" y="447.50"></text></g><g><title>[libc.so.6] (1,072,431 samples, 0.05%)</title><rect x="61.6029%" y="421" width="0.0524%" height="15" fill="rgb(233,156,4)" fg:x="1260330111" fg:w="1072431"/><text x="61.8529%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,343,146 samples, 0.16%)</title><rect x="62.2934%" y="405" width="0.1634%" height="15" fill="rgb(207,194,5)" fg:x="1274457236" fg:w="3343146"/><text x="62.5434%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (3,169,411 samples, 0.15%)</title><rect x="62.4568%" y="405" width="0.1549%" height="15" fill="rgb(206,111,30)" fg:x="1277800382" fg:w="3169411"/><text x="62.7068%" y="415.50"></text></g><g><title>core::intrinsics::unlikely (6,468,409 samples, 0.32%)</title><rect x="62.6118%" y="341" width="0.3162%" height="15" fill="rgb(243,70,54)" fg:x="1280969793" fg:w="6468409"/><text x="62.8618%" y="351.50"></text></g><g><title>alloc::raw_vec::layout_array (9,899,609 samples, 0.48%)</title><rect x="62.6118%" y="405" width="0.4839%" height="15" fill="rgb(242,28,8)" fg:x="1280969793" fg:w="9899609"/><text x="62.8618%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::repeat (9,899,609 samples, 0.48%)</title><rect x="62.6118%" y="389" width="0.4839%" height="15" fill="rgb(219,106,18)" fg:x="1280969793" fg:w="9899609"/><text x="62.8618%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (9,899,609 samples, 0.48%)</title><rect x="62.6118%" y="373" width="0.4839%" height="15" fill="rgb(244,222,10)" fg:x="1280969793" fg:w="9899609"/><text x="62.8618%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (9,899,609 samples, 0.48%)</title><rect x="62.6118%" y="357" width="0.4839%" height="15" fill="rgb(236,179,52)" fg:x="1280969793" fg:w="9899609"/><text x="62.8618%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3,431,200 samples, 0.17%)</title><rect x="62.9279%" y="341" width="0.1677%" height="15" fill="rgb(213,23,39)" fg:x="1287438202" fg:w="3431200"/><text x="63.1779%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (32,768,480 samples, 1.60%)</title><rect x="61.6553%" y="453" width="1.6017%" height="15" fill="rgb(238,48,10)" fg:x="1261402542" fg:w="32768480"/><text x="61.9053%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (29,502,069 samples, 1.44%)</title><rect x="61.8150%" y="437" width="1.4420%" height="15" fill="rgb(251,196,23)" fg:x="1264668953" fg:w="29502069"/><text x="62.0650%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (23,027,333 samples, 1.13%)</title><rect x="62.1315%" y="421" width="1.1255%" height="15" fill="rgb(250,152,24)" fg:x="1271143689" fg:w="23027333"/><text x="62.3815%" y="431.50"></text></g><g><title>realloc (3,301,620 samples, 0.16%)</title><rect x="63.0956%" y="405" width="0.1614%" height="15" fill="rgb(209,150,17)" fg:x="1290869402" fg:w="3301620"/><text x="63.3456%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (115,930,102 samples, 5.67%)</title><rect x="63.5735%" y="437" width="5.6665%" height="15" fill="rgb(234,202,34)" fg:x="1300646336" fg:w="115930102"/><text x="63.8235%" y="447.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::grow_impl (115,930,102 samples, 5.67%)</title><rect x="63.5735%" y="421" width="5.6665%" height="15" fill="rgb(253,148,53)" fg:x="1300646336" fg:w="115930102"/><text x="63.8235%" y="431.50">alloc::..</text></g><g><title>alloc::alloc::realloc (115,930,102 samples, 5.67%)</title><rect x="63.5735%" y="405" width="5.6665%" height="15" fill="rgb(218,129,16)" fg:x="1300646336" fg:w="115930102"/><text x="63.8235%" y="415.50">alloc::..</text></g><g><title>__rustc::__rdl_realloc (115,930,102 samples, 5.67%)</title><rect x="63.5735%" y="389" width="5.6665%" height="15" fill="rgb(216,85,19)" fg:x="1300646336" fg:w="115930102"/><text x="63.8235%" y="399.50">__rustc..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (115,930,102 samples, 5.67%)</title><rect x="63.5735%" y="373" width="5.6665%" height="15" fill="rgb(235,228,7)" fg:x="1300646336" fg:w="115930102"/><text x="63.8235%" y="383.50">std::sy..</text></g><g><title>realloc (112,660,031 samples, 5.51%)</title><rect x="63.7333%" y="357" width="5.5066%" height="15" fill="rgb(245,175,0)" fg:x="1303916407" fg:w="112660031"/><text x="63.9833%" y="367.50">realloc</text></g><g><title>[libc.so.6] (109,479,076 samples, 5.35%)</title><rect x="63.8888%" y="341" width="5.3512%" height="15" fill="rgb(208,168,36)" fg:x="1307097362" fg:w="109479076"/><text x="64.1388%" y="351.50">[libc.s..</text></g><g><title>[libc.so.6] (106,145,486 samples, 5.19%)</title><rect x="64.0518%" y="325" width="5.1882%" height="15" fill="rgb(246,171,24)" fg:x="1310430952" fg:w="106145486"/><text x="64.3018%" y="335.50">[libc...</text></g><g><title>[libc.so.6] (80,230,924 samples, 3.92%)</title><rect x="65.3184%" y="309" width="3.9216%" height="15" fill="rgb(215,142,24)" fg:x="1336345514" fg:w="80230924"/><text x="65.5684%" y="319.50">[lib..</text></g><g><title>[libc.so.6] (26,104,451 samples, 1.28%)</title><rect x="67.9640%" y="293" width="1.2759%" height="15" fill="rgb(250,187,7)" fg:x="1390471987" fg:w="26104451"/><text x="68.2140%" y="303.50"></text></g><g><title>[libc.so.6] (3,276,022 samples, 0.16%)</title><rect x="69.0799%" y="277" width="0.1601%" height="15" fill="rgb(228,66,33)" fg:x="1413300416" fg:w="3276022"/><text x="69.3299%" y="287.50"></text></g><g><title>[libc.so.6] (3,439,071 samples, 0.17%)</title><rect x="69.2400%" y="437" width="0.1681%" height="15" fill="rgb(234,215,21)" fg:x="1416576438" fg:w="3439071"/><text x="69.4900%" y="447.50"></text></g><g><title>[libc.so.6] (3,439,071 samples, 0.17%)</title><rect x="69.2400%" y="421" width="0.1681%" height="15" fill="rgb(222,191,20)" fg:x="1416576438" fg:w="3439071"/><text x="69.4900%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (128,389,386 samples, 6.28%)</title><rect x="63.2570%" y="453" width="6.2755%" height="15" fill="rgb(245,79,54)" fg:x="1294171022" fg:w="128389386"/><text x="63.5070%" y="463.50">alloc::r..</text></g><g><title>malloc (2,544,899 samples, 0.12%)</title><rect x="69.4081%" y="437" width="0.1244%" height="15" fill="rgb(240,10,37)" fg:x="1420015509" fg:w="2544899"/><text x="69.6581%" y="447.50"></text></g><g><title>cfree (2,939,342 samples, 0.14%)</title><rect x="69.5325%" y="453" width="0.1437%" height="15" fill="rgb(214,192,32)" fg:x="1422560408" fg:w="2939342"/><text x="69.7825%" y="463.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::from_output (30,563,203 samples, 1.49%)</title><rect x="75.1413%" y="437" width="1.4939%" height="15" fill="rgb(209,36,54)" fg:x="1537312022" fg:w="30563203"/><text x="75.3913%" y="447.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}::{{closure}} (45,003,245 samples, 2.20%)</title><rect x="76.6352%" y="437" width="2.1997%" height="15" fill="rgb(220,10,11)" fg:x="1567875225" fg:w="45003245"/><text x="76.8852%" y="447.50">&lt;..</text></g><g><title>&lt;pathmap::utils::ByteMask as pathmap::utils::BitMask&gt;::test_bit (45,003,245 samples, 2.20%)</title><rect x="76.6352%" y="421" width="2.1997%" height="15" fill="rgb(221,106,17)" fg:x="1567875225" fg:w="45003245"/><text x="76.8852%" y="431.50">&lt;..</text></g><g><title>&lt;[u64: 4] as pathmap::utils::BitMask&gt;::test_bit (45,003,245 samples, 2.20%)</title><rect x="76.6352%" y="405" width="2.1997%" height="15" fill="rgb(251,142,44)" fg:x="1567875225" fg:w="45003245"/><text x="76.8852%" y="415.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="341" width="0.8019%" height="15" fill="rgb(238,13,15)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="325" width="0.8019%" height="15" fill="rgb(208,107,27)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="309" width="0.8019%" height="15" fill="rgb(205,136,37)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="293" width="0.8019%" height="15" fill="rgb(250,205,27)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="277" width="0.8019%" height="15" fill="rgb(210,80,43)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="261" width="0.8019%" height="15" fill="rgb(247,160,36)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="271.50"></text></g><g><title>alloc::alloc::alloc (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="245" width="0.8019%" height="15" fill="rgb(234,13,49)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="255.50"></text></g><g><title>__rustc::__rdl_alloc (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="229" width="0.8019%" height="15" fill="rgb(234,122,0)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16,405,114 samples, 0.80%)</title><rect x="78.8349%" y="213" width="0.8019%" height="15" fill="rgb(207,146,38)" fg:x="1612878470" fg:w="16405114"/><text x="79.0849%" y="223.50"></text></g><g><title>malloc (9,712,855 samples, 0.47%)</title><rect x="79.1620%" y="197" width="0.4747%" height="15" fill="rgb(207,177,25)" fg:x="1619570729" fg:w="9712855"/><text x="79.4120%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19,410,281 samples, 0.95%)</title><rect x="78.8349%" y="389" width="0.9487%" height="15" fill="rgb(211,178,42)" fg:x="1612878470" fg:w="19410281"/><text x="79.0849%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19,410,281 samples, 0.95%)</title><rect x="78.8349%" y="373" width="0.9487%" height="15" fill="rgb(230,69,54)" fg:x="1612878470" fg:w="19410281"/><text x="79.0849%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (19,410,281 samples, 0.95%)</title><rect x="78.8349%" y="357" width="0.9487%" height="15" fill="rgb(214,135,41)" fg:x="1612878470" fg:w="19410281"/><text x="79.0849%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,005,167 samples, 0.15%)</title><rect x="79.6368%" y="341" width="0.1469%" height="15" fill="rgb(237,67,25)" fg:x="1629283584" fg:w="3005167"/><text x="79.8868%" y="351.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,005,167 samples, 0.15%)</title><rect x="79.6368%" y="325" width="0.1469%" height="15" fill="rgb(222,189,50)" fg:x="1629283584" fg:w="3005167"/><text x="79.8868%" y="335.50"></text></g><g><title>[libc.so.6] (3,005,167 samples, 0.15%)</title><rect x="79.6368%" y="309" width="0.1469%" height="15" fill="rgb(245,148,34)" fg:x="1629283584" fg:w="3005167"/><text x="79.8868%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (3,213,545 samples, 0.16%)</title><rect x="79.7837%" y="341" width="0.1571%" height="15" fill="rgb(222,29,6)" fg:x="1632288751" fg:w="3213545"/><text x="80.0337%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,213,545 samples, 0.16%)</title><rect x="79.7837%" y="325" width="0.1571%" height="15" fill="rgb(221,189,43)" fg:x="1632288751" fg:w="3213545"/><text x="80.0337%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,213,545 samples, 0.16%)</title><rect x="79.7837%" y="309" width="0.1571%" height="15" fill="rgb(207,36,27)" fg:x="1632288751" fg:w="3213545"/><text x="80.0337%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,213,545 samples, 0.16%)</title><rect x="79.7837%" y="293" width="0.1571%" height="15" fill="rgb(217,90,24)" fg:x="1632288751" fg:w="3213545"/><text x="80.0337%" y="303.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (213,442,769 samples, 10.43%)</title><rect x="69.6761%" y="453" width="10.4327%" height="15" fill="rgb(224,66,35)" fg:x="1425499750" fg:w="213442769"/><text x="69.9261%" y="463.50">core::iter::ada..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (26,064,049 samples, 1.27%)</title><rect x="78.8349%" y="437" width="1.2740%" height="15" fill="rgb(221,13,50)" fg:x="1612878470" fg:w="26064049"/><text x="79.0849%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26,064,049 samples, 1.27%)</title><rect x="78.8349%" y="421" width="1.2740%" height="15" fill="rgb(236,68,49)" fg:x="1612878470" fg:w="26064049"/><text x="79.0849%" y="431.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}}::{{closure}} (26,064,049 samples, 1.27%)</title><rect x="78.8349%" y="405" width="1.2740%" height="15" fill="rgb(229,146,28)" fg:x="1612878470" fg:w="26064049"/><text x="79.0849%" y="415.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (6,653,768 samples, 0.33%)</title><rect x="79.7837%" y="389" width="0.3252%" height="15" fill="rgb(225,31,38)" fg:x="1632288751" fg:w="6653768"/><text x="80.0337%" y="399.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::ZipperMoving&gt;::descend_to (6,653,768 samples, 0.33%)</title><rect x="79.7837%" y="373" width="0.3252%" height="15" fill="rgb(250,208,3)" fg:x="1632288751" fg:w="6653768"/><text x="80.0337%" y="383.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::descend_to_internal (6,653,768 samples, 0.33%)</title><rect x="79.7837%" y="357" width="0.3252%" height="15" fill="rgb(246,54,23)" fg:x="1632288751" fg:w="6653768"/><text x="80.0337%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (3,440,223 samples, 0.17%)</title><rect x="79.9407%" y="341" width="0.1682%" height="15" fill="rgb(243,76,11)" fg:x="1635502296" fg:w="3440223"/><text x="80.1907%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3,440,223 samples, 0.17%)</title><rect x="79.9407%" y="325" width="0.1682%" height="15" fill="rgb(245,21,50)" fg:x="1635502296" fg:w="3440223"/><text x="80.1907%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="453" width="0.3264%" height="15" fill="rgb(228,9,43)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="437" width="0.3264%" height="15" fill="rgb(208,100,47)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="421" width="0.3264%" height="15" fill="rgb(232,26,8)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="405" width="0.3264%" height="15" fill="rgb(216,166,38)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="389" width="0.3264%" height="15" fill="rgb(251,202,51)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="373" width="0.3264%" height="15" fill="rgb(254,216,34)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::query::QueryIterator&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="357" width="0.3264%" height="15" fill="rgb(251,32,27)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="367.50"></text></g><g><title>[libc.so.6] (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="341" width="0.3264%" height="15" fill="rgb(208,127,28)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="351.50"></text></g><g><title>[libc.so.6] (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="325" width="0.3264%" height="15" fill="rgb(224,137,22)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="335.50"></text></g><g><title>[libc.so.6] (6,677,510 samples, 0.33%)</title><rect x="80.1089%" y="309" width="0.3264%" height="15" fill="rgb(254,70,32)" fg:x="1638942519" fg:w="6677510"/><text x="80.3589%" y="319.50"></text></g><g><title>[libc.so.6] (3,361,368 samples, 0.16%)</title><rect x="80.5850%" y="405" width="0.1643%" height="15" fill="rgb(229,75,37)" fg:x="1648684321" fg:w="3361368"/><text x="80.8350%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt;&gt; (6,514,016 samples, 0.32%)</title><rect x="80.5850%" y="437" width="0.3184%" height="15" fill="rgb(252,64,23)" fg:x="1648684321" fg:w="6514016"/><text x="80.8350%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt;&gt; (6,514,016 samples, 0.32%)</title><rect x="80.5850%" y="421" width="0.3184%" height="15" fill="rgb(232,162,48)" fg:x="1648684321" fg:w="6514016"/><text x="80.8350%" y="431.50"></text></g><g><title>cfree (3,152,648 samples, 0.15%)</title><rect x="80.7493%" y="405" width="0.1541%" height="15" fill="rgb(246,160,12)" fg:x="1652045689" fg:w="3152648"/><text x="80.9993%" y="415.50"></text></g><g><title>[libc.so.6] (12,605,649 samples, 0.62%)</title><rect x="80.9034%" y="293" width="0.6161%" height="15" fill="rgb(247,166,0)" fg:x="1655198337" fg:w="12605649"/><text x="81.1534%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="437" width="1.5549%" height="15" fill="rgb(249,219,21)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="421" width="1.5549%" height="15" fill="rgb(205,209,3)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="405" width="1.5549%" height="15" fill="rgb(243,44,1)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="389" width="1.5549%" height="15" fill="rgb(206,159,16)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="373" width="1.5549%" height="15" fill="rgb(244,77,30)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="357" width="1.5549%" height="15" fill="rgb(218,69,12)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="341" width="1.5549%" height="15" fill="rgb(212,87,7)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="351.50"></text></g><g><title>__rustc::__rdl_dealloc (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="325" width="1.5549%" height="15" fill="rgb(245,114,25)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (31,811,434 samples, 1.55%)</title><rect x="80.9034%" y="309" width="1.5549%" height="15" fill="rgb(210,61,42)" fg:x="1655198337" fg:w="31811434"/><text x="81.1534%" y="319.50"></text></g><g><title>cfree (19,205,785 samples, 0.94%)</title><rect x="81.5196%" y="293" width="0.9387%" height="15" fill="rgb(211,52,33)" fg:x="1667803986" fg:w="19205785"/><text x="81.7696%" y="303.50"></text></g><g><title>[libc.so.6] (6,281,375 samples, 0.31%)</title><rect x="82.4583%" y="293" width="0.3070%" height="15" fill="rgb(234,58,33)" fg:x="1687009771" fg:w="6281375"/><text x="82.7083%" y="303.50"></text></g><g><title>cfree (12,783,795 samples, 0.62%)</title><rect x="82.7654%" y="293" width="0.6249%" height="15" fill="rgb(220,115,36)" fg:x="1693291146" fg:w="12783795"/><text x="83.0154%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="245" width="0.1527%" height="15" fill="rgb(243,153,54)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="229" width="0.1527%" height="15" fill="rgb(251,47,18)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="213" width="0.1527%" height="15" fill="rgb(242,102,42)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="197" width="0.1527%" height="15" fill="rgb(234,31,38)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="181" width="0.1527%" height="15" fill="rgb(221,117,51)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="165" width="0.1527%" height="15" fill="rgb(212,20,18)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="149" width="0.1527%" height="15" fill="rgb(245,133,36)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="159.50"></text></g><g><title>alloc::alloc::alloc (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="133" width="0.1527%" height="15" fill="rgb(212,6,19)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="117" width="0.1527%" height="15" fill="rgb(218,1,36)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="101" width="0.1527%" height="15" fill="rgb(246,84,54)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="111.50"></text></g><g><title>malloc (3,123,364 samples, 0.15%)</title><rect x="83.3902%" y="85" width="0.1527%" height="15" fill="rgb(242,110,6)" fg:x="1706074941" fg:w="3123364"/><text x="83.6402%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6,312,888 samples, 0.31%)</title><rect x="83.5429%" y="197" width="0.3086%" height="15" fill="rgb(214,47,5)" fg:x="1709198305" fg:w="6312888"/><text x="83.7929%" y="207.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (6,312,888 samples, 0.31%)</title><rect x="83.5429%" y="181" width="0.3086%" height="15" fill="rgb(218,159,25)" fg:x="1709198305" fg:w="6312888"/><text x="83.7929%" y="191.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (6,312,888 samples, 0.31%)</title><rect x="83.5429%" y="165" width="0.3086%" height="15" fill="rgb(215,211,28)" fg:x="1709198305" fg:w="6312888"/><text x="83.7929%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (6,312,888 samples, 0.31%)</title><rect x="83.5429%" y="149" width="0.3086%" height="15" fill="rgb(238,59,32)" fg:x="1709198305" fg:w="6312888"/><text x="83.7929%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::intersection::Intersection&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (73,098,884 samples, 3.57%)</title><rect x="80.4353%" y="453" width="3.5730%" height="15" fill="rgb(226,82,3)" fg:x="1645620029" fg:w="73098884"/><text x="80.6853%" y="463.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="437" width="1.5499%" height="15" fill="rgb(240,164,32)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="421" width="1.5499%" height="15" fill="rgb(232,46,7)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="405" width="1.5499%" height="15" fill="rgb(229,129,53)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="389" width="1.5499%" height="15" fill="rgb(234,188,29)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="373" width="1.5499%" height="15" fill="rgb(246,141,4)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="357" width="1.5499%" height="15" fill="rgb(229,23,39)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="341" width="1.5499%" height="15" fill="rgb(206,12,3)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="351.50"></text></g><g><title>__rustc::__rdl_dealloc (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="325" width="1.5499%" height="15" fill="rgb(252,226,20)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (31,709,142 samples, 1.55%)</title><rect x="82.4583%" y="309" width="1.5499%" height="15" fill="rgb(216,123,35)" fg:x="1687009771" fg:w="31709142"/><text x="82.7083%" y="319.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (12,643,972 samples, 0.62%)</title><rect x="83.3902%" y="293" width="0.6180%" height="15" fill="rgb(212,68,40)" fg:x="1706074941" fg:w="12643972"/><text x="83.6402%" y="303.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (12,643,972 samples, 0.62%)</title><rect x="83.3902%" y="277" width="0.6180%" height="15" fill="rgb(254,125,32)" fg:x="1706074941" fg:w="12643972"/><text x="83.6402%" y="287.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (12,643,972 samples, 0.62%)</title><rect x="83.3902%" y="261" width="0.6180%" height="15" fill="rgb(253,97,22)" fg:x="1706074941" fg:w="12643972"/><text x="83.6402%" y="271.50"></text></g><g><title>pathmap::zipper::node_along_path (9,520,608 samples, 0.47%)</title><rect x="83.5429%" y="245" width="0.4654%" height="15" fill="rgb(241,101,14)" fg:x="1709198305" fg:w="9520608"/><text x="83.7929%" y="255.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (9,520,608 samples, 0.47%)</title><rect x="83.5429%" y="229" width="0.4654%" height="15" fill="rgb(238,103,29)" fg:x="1709198305" fg:w="9520608"/><text x="83.7929%" y="239.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (9,520,608 samples, 0.47%)</title><rect x="83.5429%" y="213" width="0.4654%" height="15" fill="rgb(233,195,47)" fg:x="1709198305" fg:w="9520608"/><text x="83.7929%" y="223.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (3,207,720 samples, 0.16%)</title><rect x="83.8514%" y="197" width="0.1568%" height="15" fill="rgb(246,218,30)" fg:x="1715511193" fg:w="3207720"/><text x="84.1014%" y="207.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (3,207,720 samples, 0.16%)</title><rect x="83.8514%" y="181" width="0.1568%" height="15" fill="rgb(219,145,47)" fg:x="1715511193" fg:w="3207720"/><text x="84.1014%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (3,207,720 samples, 0.16%)</title><rect x="83.8514%" y="165" width="0.1568%" height="15" fill="rgb(243,12,26)" fg:x="1715511193" fg:w="3207720"/><text x="84.1014%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="437" width="0.1589%" height="15" fill="rgb(214,87,16)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="421" width="0.1589%" height="15" fill="rgb(208,99,42)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="405" width="0.1589%" height="15" fill="rgb(253,99,2)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="389" width="0.1589%" height="15" fill="rgb(220,168,23)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="373" width="0.1589%" height="15" fill="rgb(242,38,24)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="357" width="0.1589%" height="15" fill="rgb(225,182,9)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="341" width="0.1589%" height="15" fill="rgb(243,178,37)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,251,347 samples, 0.16%)</title><rect x="84.0082%" y="325" width="0.1589%" height="15" fill="rgb(232,139,19)" fg:x="1718718913" fg:w="3251347"/><text x="84.2582%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;(),()&gt;&gt; (18,501,219 samples, 0.90%)</title><rect x="84.0082%" y="453" width="0.9043%" height="15" fill="rgb(225,201,24)" fg:x="1718718913" fg:w="18501219"/><text x="84.2582%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="437" width="0.7454%" height="15" fill="rgb(221,47,46)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="421" width="0.7454%" height="15" fill="rgb(249,23,13)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="405" width="0.7454%" height="15" fill="rgb(219,9,5)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="389" width="0.7454%" height="15" fill="rgb(254,171,16)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="373" width="0.7454%" height="15" fill="rgb(230,171,20)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="357" width="0.7454%" height="15" fill="rgb(210,71,41)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="341" width="0.7454%" height="15" fill="rgb(206,173,20)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="325" width="0.7454%" height="15" fill="rgb(233,88,34)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="335.50"></text></g><g><title>cfree (15,249,872 samples, 0.75%)</title><rect x="84.1671%" y="309" width="0.7454%" height="15" fill="rgb(223,209,46)" fg:x="1721970260" fg:w="15249872"/><text x="84.4171%" y="319.50"></text></g><g><title>liblevenshtein::transducer::intersection::Intersection&lt;N&gt;::term (3,235,905 samples, 0.16%)</title><rect x="85.0660%" y="437" width="0.1582%" height="15" fill="rgb(250,43,18)" fg:x="1740360509" fg:w="3235905"/><text x="85.3160%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (3,235,905 samples, 0.16%)</title><rect x="85.0660%" y="421" width="0.1582%" height="15" fill="rgb(208,13,10)" fg:x="1740360509" fg:w="3235905"/><text x="85.3160%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (3,235,905 samples, 0.16%)</title><rect x="85.0660%" y="405" width="0.1582%" height="15" fill="rgb(212,200,36)" fg:x="1740360509" fg:w="3235905"/><text x="85.3160%" y="415.50"></text></g><g><title>core::mem::swap (3,235,905 samples, 0.16%)</title><rect x="85.0660%" y="389" width="0.1582%" height="15" fill="rgb(225,90,30)" fg:x="1740360509" fg:w="3235905"/><text x="85.3160%" y="399.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as core::clone::Clone&gt;::clone (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="421" width="0.1575%" height="15" fill="rgb(236,182,39)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="405" width="0.1575%" height="15" fill="rgb(212,144,35)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="389" width="0.1575%" height="15" fill="rgb(228,63,44)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="373" width="0.1575%" height="15" fill="rgb(228,109,6)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="357" width="0.1575%" height="15" fill="rgb(238,117,24)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="341" width="0.1575%" height="15" fill="rgb(242,26,26)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="325" width="0.1575%" height="15" fill="rgb(221,92,48)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="309" width="0.1575%" height="15" fill="rgb(209,209,32)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="293" width="0.1575%" height="15" fill="rgb(221,70,22)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="277" width="0.1575%" height="15" fill="rgb(248,145,5)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="287.50"></text></g><g><title>alloc::alloc::alloc (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="261" width="0.1575%" height="15" fill="rgb(226,116,26)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="245" width="0.1575%" height="15" fill="rgb(244,5,17)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="229" width="0.1575%" height="15" fill="rgb(252,159,33)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="239.50"></text></g><g><title>[libc.so.6] (3,222,414 samples, 0.16%)</title><rect x="85.3797%" y="213" width="0.1575%" height="15" fill="rgb(206,71,0)" fg:x="1746777026" fg:w="3222414"/><text x="85.6297%" y="223.50"></text></g><g><title>[libc.so.6] (6,583,106 samples, 0.32%)</title><rect x="85.5372%" y="309" width="0.3218%" height="15" fill="rgb(233,118,54)" fg:x="1749999440" fg:w="6583106"/><text x="85.7872%" y="319.50"></text></g><g><title>[libc.so.6] (3,186,945 samples, 0.16%)</title><rect x="85.7032%" y="293" width="0.1558%" height="15" fill="rgb(234,83,48)" fg:x="1753395601" fg:w="3186945"/><text x="85.9532%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9,959,065 samples, 0.49%)</title><rect x="85.5372%" y="421" width="0.4868%" height="15" fill="rgb(228,3,54)" fg:x="1749999440" fg:w="9959065"/><text x="85.7872%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (9,959,065 samples, 0.49%)</title><rect x="85.5372%" y="405" width="0.4868%" height="15" fill="rgb(226,155,13)" fg:x="1749999440" fg:w="9959065"/><text x="85.7872%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,959,065 samples, 0.49%)</title><rect x="85.5372%" y="389" width="0.4868%" height="15" fill="rgb(241,28,37)" fg:x="1749999440" fg:w="9959065"/><text x="85.7872%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,959,065 samples, 0.49%)</title><rect x="85.5372%" y="373" width="0.4868%" height="15" fill="rgb(233,93,10)" fg:x="1749999440" fg:w="9959065"/><text x="85.7872%" y="383.50"></text></g><g><title>alloc::alloc::alloc (9,959,065 samples, 0.49%)</title><rect x="85.5372%" y="357" width="0.4868%" height="15" fill="rgb(225,113,19)" fg:x="1749999440" fg:w="9959065"/><text x="85.7872%" y="367.50"></text></g><g><title>__rustc::__rdl_alloc (9,959,065 samples, 0.49%)</title><rect x="85.5372%" y="341" width="0.4868%" height="15" fill="rgb(241,2,18)" fg:x="1749999440" fg:w="9959065"/><text x="85.7872%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9,959,065 samples, 0.49%)</title><rect x="85.5372%" y="325" width="0.4868%" height="15" fill="rgb(228,207,21)" fg:x="1749999440" fg:w="9959065"/><text x="85.7872%" y="335.50"></text></g><g><title>malloc (3,375,959 samples, 0.17%)</title><rect x="85.8589%" y="309" width="0.1650%" height="15" fill="rgb(213,211,35)" fg:x="1756582546" fg:w="3375959"/><text x="86.1089%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (2,600,017 samples, 0.13%)</title><rect x="86.0240%" y="421" width="0.1271%" height="15" fill="rgb(209,83,10)" fg:x="1759958505" fg:w="2600017"/><text x="86.2740%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back_mut (2,600,017 samples, 0.13%)</title><rect x="86.0240%" y="405" width="0.1271%" height="15" fill="rgb(209,164,1)" fg:x="1759958505" fg:w="2600017"/><text x="86.2740%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,600,017 samples, 0.13%)</title><rect x="86.0240%" y="389" width="0.1271%" height="15" fill="rgb(213,184,43)" fg:x="1759958505" fg:w="2600017"/><text x="86.2740%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,600,017 samples, 0.13%)</title><rect x="86.0240%" y="373" width="0.1271%" height="15" fill="rgb(231,61,34)" fg:x="1759958505" fg:w="2600017"/><text x="86.2740%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,600,017 samples, 0.13%)</title><rect x="86.0240%" y="357" width="0.1271%" height="15" fill="rgb(235,75,3)" fg:x="1759958505" fg:w="2600017"/><text x="86.2740%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt; (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="421" width="0.1508%" height="15" fill="rgb(220,106,47)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="405" width="0.1508%" height="15" fill="rgb(210,196,33)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="389" width="0.1508%" height="15" fill="rgb(229,154,42)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="373" width="0.1508%" height="15" fill="rgb(228,114,26)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="357" width="0.1508%" height="15" fill="rgb(208,144,1)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="341" width="0.1508%" height="15" fill="rgb(239,112,37)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="325" width="0.1508%" height="15" fill="rgb(210,96,50)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="309" width="0.1508%" height="15" fill="rgb(222,178,2)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="293" width="0.1508%" height="15" fill="rgb(226,74,18)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="303.50"></text></g><g><title>cfree (3,086,208 samples, 0.15%)</title><rect x="86.1510%" y="277" width="0.1508%" height="15" fill="rgb(225,67,54)" fg:x="1762558522" fg:w="3086208"/><text x="86.4010%" y="287.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::advance (38,250,417 samples, 1.87%)</title><rect x="84.9125%" y="453" width="1.8696%" height="15" fill="rgb(251,92,32)" fg:x="1737220132" fg:w="38250417"/><text x="85.1625%" y="463.50">l..</text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (31,874,135 samples, 1.56%)</title><rect x="85.2242%" y="437" width="1.5580%" height="15" fill="rgb(228,149,22)" fg:x="1743596414" fg:w="31874135"/><text x="85.4742%" y="447.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_state (9,825,819 samples, 0.48%)</title><rect x="86.3019%" y="421" width="0.4803%" height="15" fill="rgb(243,54,13)" fg:x="1765644730" fg:w="9825819"/><text x="86.5519%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::state::State&gt; (3,389,401 samples, 0.17%)</title><rect x="86.6165%" y="405" width="0.1657%" height="15" fill="rgb(243,180,28)" fg:x="1772081148" fg:w="3389401"/><text x="86.8665%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (3,389,401 samples, 0.17%)</title><rect x="86.6165%" y="389" width="0.1657%" height="15" fill="rgb(208,167,24)" fg:x="1772081148" fg:w="3389401"/><text x="86.8665%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;liblevenshtein::transducer::position::Position&gt;&gt; (3,389,401 samples, 0.17%)</title><rect x="86.6165%" y="373" width="0.1657%" height="15" fill="rgb(245,73,45)" fg:x="1772081148" fg:w="3389401"/><text x="86.8665%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,389,401 samples, 0.17%)</title><rect x="86.6165%" y="357" width="0.1657%" height="15" fill="rgb(237,203,48)" fg:x="1772081148" fg:w="3389401"/><text x="86.8665%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,389,401 samples, 0.17%)</title><rect x="86.6165%" y="341" width="0.1657%" height="15" fill="rgb(211,197,16)" fg:x="1772081148" fg:w="3389401"/><text x="86.8665%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,389,401 samples, 0.17%)</title><rect x="86.6165%" y="325" width="0.1657%" height="15" fill="rgb(243,99,51)" fg:x="1772081148" fg:w="3389401"/><text x="86.8665%" y="335.50"></text></g><g><title>&lt;pathmap::zipper::ReadZipperUntracked&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (3,332,505 samples, 0.16%)</title><rect x="86.7822%" y="389" width="0.1629%" height="15" fill="rgb(215,123,29)" fg:x="1775470549" fg:w="3332505"/><text x="87.0322%" y="399.50"></text></g><g><title>&lt;pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt; as pathmap::zipper::Zipper&gt;::child_mask (3,332,505 samples, 0.16%)</title><rect x="86.7822%" y="373" width="0.1629%" height="15" fill="rgb(239,186,37)" fg:x="1775470549" fg:w="3332505"/><text x="87.0322%" y="383.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key (3,332,505 samples, 0.16%)</title><rect x="86.7822%" y="357" width="0.1629%" height="15" fill="rgb(252,136,39)" fg:x="1775470549" fg:w="3332505"/><text x="87.0322%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::node_key_start (3,332,505 samples, 0.16%)</title><rect x="86.7822%" y="341" width="0.1629%" height="15" fill="rgb(223,213,32)" fg:x="1775470549" fg:w="3332505"/><text x="87.0322%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3,332,505 samples, 0.16%)</title><rect x="86.7822%" y="325" width="0.1629%" height="15" fill="rgb(233,115,5)" fg:x="1775470549" fg:w="3332505"/><text x="87.0322%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,435,954 samples, 0.17%)</title><rect x="86.9450%" y="325" width="0.1679%" height="15" fill="rgb(207,226,44)" fg:x="1778803054" fg:w="3435954"/><text x="87.1950%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (3,435,954 samples, 0.17%)</title><rect x="86.9450%" y="309" width="0.1679%" height="15" fill="rgb(208,126,0)" fg:x="1778803054" fg:w="3435954"/><text x="87.1950%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,435,954 samples, 0.17%)</title><rect x="86.9450%" y="293" width="0.1679%" height="15" fill="rgb(244,66,21)" fg:x="1778803054" fg:w="3435954"/><text x="87.1950%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (3,435,954 samples, 0.17%)</title><rect x="86.9450%" y="277" width="0.1679%" height="15" fill="rgb(222,97,12)" fg:x="1778803054" fg:w="3435954"/><text x="87.1950%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (3,435,954 samples, 0.17%)</title><rect x="86.9450%" y="261" width="0.1679%" height="15" fill="rgb(219,213,19)" fg:x="1778803054" fg:w="3435954"/><text x="87.1950%" y="271.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges::{{closure}} (9,991,609 samples, 0.49%)</title><rect x="86.7822%" y="405" width="0.4884%" height="15" fill="rgb(252,169,30)" fg:x="1775470549" fg:w="9991609"/><text x="87.0322%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,659,104 samples, 0.33%)</title><rect x="86.9450%" y="389" width="0.3255%" height="15" fill="rgb(206,32,51)" fg:x="1778803054" fg:w="6659104"/><text x="87.1950%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,659,104 samples, 0.33%)</title><rect x="86.9450%" y="373" width="0.3255%" height="15" fill="rgb(250,172,42)" fg:x="1778803054" fg:w="6659104"/><text x="87.1950%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,659,104 samples, 0.33%)</title><rect x="86.9450%" y="357" width="0.3255%" height="15" fill="rgb(209,34,43)" fg:x="1778803054" fg:w="6659104"/><text x="87.1950%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,659,104 samples, 0.33%)</title><rect x="86.9450%" y="341" width="0.3255%" height="15" fill="rgb(223,11,35)" fg:x="1778803054" fg:w="6659104"/><text x="87.1950%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="325" width="0.1575%" height="15" fill="rgb(251,219,26)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="309" width="0.1575%" height="15" fill="rgb(231,119,3)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="293" width="0.1575%" height="15" fill="rgb(216,97,11)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="277" width="0.1575%" height="15" fill="rgb(223,59,9)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="261" width="0.1575%" height="15" fill="rgb(233,93,31)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="245" width="0.1575%" height="15" fill="rgb(239,81,33)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="229" width="0.1575%" height="15" fill="rgb(213,120,34)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="239.50"></text></g><g><title>alloc::alloc::alloc (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="213" width="0.1575%" height="15" fill="rgb(243,49,53)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="197" width="0.1575%" height="15" fill="rgb(247,216,33)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="181" width="0.1575%" height="15" fill="rgb(226,26,14)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="191.50"></text></g><g><title>[libc.so.6] (3,223,150 samples, 0.16%)</title><rect x="87.1130%" y="165" width="0.1575%" height="15" fill="rgb(215,49,53)" fg:x="1782239008" fg:w="3223150"/><text x="87.3630%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="341" width="0.1605%" height="15" fill="rgb(245,162,40)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="325" width="0.1605%" height="15" fill="rgb(229,68,17)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="309" width="0.1605%" height="15" fill="rgb(213,182,10)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="293" width="0.1605%" height="15" fill="rgb(245,125,30)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="277" width="0.1605%" height="15" fill="rgb(232,202,2)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="261" width="0.1605%" height="15" fill="rgb(237,140,51)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="245" width="0.1605%" height="15" fill="rgb(236,157,25)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="255.50"></text></g><g><title>alloc::alloc::alloc (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="229" width="0.1605%" height="15" fill="rgb(219,209,0)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="213" width="0.1605%" height="15" fill="rgb(240,116,54)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="197" width="0.1605%" height="15" fill="rgb(216,10,36)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="207.50"></text></g><g><title>malloc (3,284,102 samples, 0.16%)</title><rect x="87.2705%" y="181" width="0.1605%" height="15" fill="rgb(222,72,44)" fg:x="1785462158" fg:w="3284102"/><text x="87.5205%" y="191.50"></text></g><g><title>&lt;liblevenshtein::dictionary::pathmap::PathMapNode as liblevenshtein::dictionary::DictionaryNode&gt;::edges (16,269,703 samples, 0.80%)</title><rect x="86.7822%" y="437" width="0.7952%" height="15" fill="rgb(232,159,9)" fg:x="1775470549" fg:w="16269703"/><text x="87.0322%" y="447.50"></text></g><g><title>liblevenshtein::dictionary::pathmap::PathMapNode::with_zipper (16,269,703 samples, 0.80%)</title><rect x="86.7822%" y="421" width="0.7952%" height="15" fill="rgb(210,39,32)" fg:x="1775470549" fg:w="16269703"/><text x="87.0322%" y="431.50"></text></g><g><title>[libc.so.6] (6,278,094 samples, 0.31%)</title><rect x="87.2705%" y="405" width="0.3069%" height="15" fill="rgb(216,194,45)" fg:x="1785462158" fg:w="6278094"/><text x="87.5205%" y="415.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (6,278,094 samples, 0.31%)</title><rect x="87.2705%" y="389" width="0.3069%" height="15" fill="rgb(218,18,35)" fg:x="1785462158" fg:w="6278094"/><text x="87.5205%" y="399.50"></text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (6,278,094 samples, 0.31%)</title><rect x="87.2705%" y="373" width="0.3069%" height="15" fill="rgb(207,83,51)" fg:x="1785462158" fg:w="6278094"/><text x="87.5205%" y="383.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (6,278,094 samples, 0.31%)</title><rect x="87.2705%" y="357" width="0.3069%" height="15" fill="rgb(225,63,43)" fg:x="1785462158" fg:w="6278094"/><text x="87.5205%" y="367.50"></text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (2,993,992 samples, 0.15%)</title><rect x="87.4311%" y="341" width="0.1463%" height="15" fill="rgb(207,57,36)" fg:x="1788746260" fg:w="2993992"/><text x="87.6811%" y="351.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (3,370,755 samples, 0.16%)</title><rect x="87.5774%" y="437" width="0.1648%" height="15" fill="rgb(216,99,33)" fg:x="1791740252" fg:w="3370755"/><text x="87.8274%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,370,755 samples, 0.16%)</title><rect x="87.5774%" y="421" width="0.1648%" height="15" fill="rgb(225,42,16)" fg:x="1791740252" fg:w="3370755"/><text x="87.8274%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,370,755 samples, 0.16%)</title><rect x="87.5774%" y="405" width="0.1648%" height="15" fill="rgb(220,201,45)" fg:x="1791740252" fg:w="3370755"/><text x="87.8274%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (3,370,755 samples, 0.16%)</title><rect x="87.5774%" y="389" width="0.1648%" height="15" fill="rgb(225,33,4)" fg:x="1791740252" fg:w="3370755"/><text x="87.8274%" y="399.50"></text></g><g><title>core::ptr::read (3,370,755 samples, 0.16%)</title><rect x="87.5774%" y="373" width="0.1648%" height="15" fill="rgb(224,33,50)" fg:x="1791740252" fg:w="3370755"/><text x="87.8274%" y="383.50"></text></g><g><title>liblevenshtein::transducer::transition::characteristic_vector (3,045,972 samples, 0.15%)</title><rect x="87.8972%" y="421" width="0.1489%" height="15" fill="rgb(246,198,51)" fg:x="1798282277" fg:w="3045972"/><text x="88.1472%" y="431.50"></text></g><g><title>&lt;liblevenshtein::transducer::state::State as core::clone::Clone&gt;::clone (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="405" width="0.1586%" height="15" fill="rgb(205,22,4)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="389" width="0.1586%" height="15" fill="rgb(206,3,8)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="373" width="0.1586%" height="15" fill="rgb(251,23,15)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="357" width="0.1586%" height="15" fill="rgb(252,88,28)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="341" width="0.1586%" height="15" fill="rgb(212,127,14)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="325" width="0.1586%" height="15" fill="rgb(247,145,37)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="309" width="0.1586%" height="15" fill="rgb(209,117,53)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="293" width="0.1586%" height="15" fill="rgb(212,90,42)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="277" width="0.1586%" height="15" fill="rgb(218,164,37)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="261" width="0.1586%" height="15" fill="rgb(246,65,34)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="271.50"></text></g><g><title>alloc::alloc::alloc (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="245" width="0.1586%" height="15" fill="rgb(231,100,33)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="255.50"></text></g><g><title>__rustc::__rdl_alloc (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="229" width="0.1586%" height="15" fill="rgb(228,126,14)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="213" width="0.1586%" height="15" fill="rgb(215,173,21)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="223.50"></text></g><g><title>[libc.so.6] (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="197" width="0.1586%" height="15" fill="rgb(210,6,40)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="207.50"></text></g><g><title>[libc.so.6] (3,245,274 samples, 0.16%)</title><rect x="88.0460%" y="181" width="0.1586%" height="15" fill="rgb(212,48,18)" fg:x="1801328249" fg:w="3245274"/><text x="88.2960%" y="191.50"></text></g><g><title>liblevenshtein::transducer::query::QueryIterator&lt;N&gt;::queue_children (32,133,277 samples, 1.57%)</title><rect x="86.7822%" y="453" width="1.5706%" height="15" fill="rgb(230,214,11)" fg:x="1775470549" fg:w="32133277"/><text x="87.0322%" y="463.50"></text></g><g><title>liblevenshtein::transducer::transition::transition_state (12,492,819 samples, 0.61%)</title><rect x="87.7422%" y="437" width="0.6106%" height="15" fill="rgb(254,105,39)" fg:x="1795111007" fg:w="12492819"/><text x="87.9922%" y="447.50"></text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure (6,275,577 samples, 0.31%)</title><rect x="88.0460%" y="421" width="0.3067%" height="15" fill="rgb(245,158,5)" fg:x="1801328249" fg:w="6275577"/><text x="88.2960%" y="431.50"></text></g><g><title>liblevenshtein::transducer::transition::epsilon_closure_mut (3,030,303 samples, 0.15%)</title><rect x="88.2047%" y="405" width="0.1481%" height="15" fill="rgb(249,208,11)" fg:x="1804573523" fg:w="3030303"/><text x="88.4547%" y="415.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (3,030,303 samples, 0.15%)</title><rect x="88.2047%" y="389" width="0.1481%" height="15" fill="rgb(210,39,28)" fg:x="1804573523" fg:w="3030303"/><text x="88.4547%" y="399.50"></text></g><g><title>core::ptr::write (3,030,303 samples, 0.15%)</title><rect x="88.2047%" y="373" width="0.1481%" height="15" fill="rgb(211,56,53)" fg:x="1804573523" fg:w="3030303"/><text x="88.4547%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,153,193 samples, 0.15%)</title><rect x="88.3528%" y="437" width="0.1541%" height="15" fill="rgb(226,201,30)" fg:x="1807603826" fg:w="3153193"/><text x="88.6028%" y="447.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert (6,300,481 samples, 0.31%)</title><rect x="88.3528%" y="453" width="0.3080%" height="15" fill="rgb(239,101,34)" fg:x="1807603826" fg:w="6300481"/><text x="88.6028%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (3,147,288 samples, 0.15%)</title><rect x="88.5069%" y="437" width="0.1538%" height="15" fill="rgb(226,209,5)" fg:x="1810757019" fg:w="3147288"/><text x="88.7569%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (3,147,288 samples, 0.15%)</title><rect x="88.5069%" y="421" width="0.1538%" height="15" fill="rgb(250,105,47)" fg:x="1810757019" fg:w="3147288"/><text x="88.7569%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (3,147,288 samples, 0.15%)</title><rect x="88.5069%" y="405" width="0.1538%" height="15" fill="rgb(230,72,3)" fg:x="1810757019" fg:w="3147288"/><text x="88.7569%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (3,147,288 samples, 0.15%)</title><rect x="88.5069%" y="389" width="0.1538%" height="15" fill="rgb(232,218,39)" fg:x="1810757019" fg:w="3147288"/><text x="88.7569%" y="399.50"></text></g><g><title>liblevenshtein::transducer::state::State::insert::{{closure}} (3,147,288 samples, 0.15%)</title><rect x="88.5069%" y="373" width="0.1538%" height="15" fill="rgb(248,166,6)" fg:x="1810757019" fg:w="3147288"/><text x="88.7569%" y="383.50"></text></g><g><title>liblevenshtein::transducer::position::Position::subsumes (3,147,288 samples, 0.15%)</title><rect x="88.5069%" y="357" width="0.1538%" height="15" fill="rgb(247,89,20)" fg:x="1810757019" fg:w="3147288"/><text x="88.7569%" y="367.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::root (3,284,995 samples, 0.16%)</title><rect x="89.2918%" y="437" width="0.1606%" height="15" fill="rgb(248,130,54)" fg:x="1826815982" fg:w="3284995"/><text x="89.5418%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,284,995 samples, 0.16%)</title><rect x="89.2918%" y="421" width="0.1606%" height="15" fill="rgb(234,196,4)" fg:x="1826815982" fg:w="3284995"/><text x="89.5418%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (9,932,883 samples, 0.49%)</title><rect x="89.7587%" y="405" width="0.4855%" height="15" fill="rgb(250,143,31)" fg:x="1836367630" fg:w="9932883"/><text x="90.0087%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9,932,883 samples, 0.49%)</title><rect x="89.7587%" y="389" width="0.4855%" height="15" fill="rgb(211,110,34)" fg:x="1836367630" fg:w="9932883"/><text x="90.0087%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9,932,883 samples, 0.49%)</title><rect x="89.7587%" y="373" width="0.4855%" height="15" fill="rgb(215,124,48)" fg:x="1836367630" fg:w="9932883"/><text x="90.0087%" y="383.50"></text></g><g><title>core::ptr::copy_nonoverlapping (9,932,883 samples, 0.49%)</title><rect x="89.7587%" y="357" width="0.4855%" height="15" fill="rgb(216,46,13)" fg:x="1836367630" fg:w="9932883"/><text x="90.0087%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="405" width="0.4732%" height="15" fill="rgb(205,184,25)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="389" width="0.4732%" height="15" fill="rgb(228,1,10)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="373" width="0.4732%" height="15" fill="rgb(213,116,27)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="357" width="0.4732%" height="15" fill="rgb(241,95,50)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="341" width="0.4732%" height="15" fill="rgb(238,48,32)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="325" width="0.4732%" height="15" fill="rgb(235,113,49)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="309" width="0.4732%" height="15" fill="rgb(205,127,43)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="319.50"></text></g><g><title>alloc::alloc::alloc (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="293" width="0.4732%" height="15" fill="rgb(250,162,2)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="277" width="0.4732%" height="15" fill="rgb(220,13,41)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="261" width="0.4732%" height="15" fill="rgb(249,221,25)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="271.50"></text></g><g><title>malloc (9,681,459 samples, 0.47%)</title><rect x="90.2442%" y="245" width="0.4732%" height="15" fill="rgb(215,208,19)" fg:x="1846300513" fg:w="9681459"/><text x="90.4942%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,261,673 samples, 0.16%)</title><rect x="90.7174%" y="405" width="0.1594%" height="15" fill="rgb(236,175,2)" fg:x="1855981972" fg:w="3261673"/><text x="90.9674%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;(),()&gt;,u128,usize)&gt;&gt; (3,261,673 samples, 0.16%)</title><rect x="90.7174%" y="389" width="0.1594%" height="15" fill="rgb(241,52,2)" fg:x="1855981972" fg:w="3261673"/><text x="90.9674%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,261,673 samples, 0.16%)</title><rect x="90.7174%" y="373" width="0.1594%" height="15" fill="rgb(248,140,14)" fg:x="1855981972" fg:w="3261673"/><text x="90.9674%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,261,673 samples, 0.16%)</title><rect x="90.7174%" y="357" width="0.1594%" height="15" fill="rgb(253,22,42)" fg:x="1855981972" fg:w="3261673"/><text x="90.9674%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,261,673 samples, 0.16%)</title><rect x="90.7174%" y="341" width="0.1594%" height="15" fill="rgb(234,61,47)" fg:x="1855981972" fg:w="3261673"/><text x="90.9674%" y="351.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (28,082,490 samples, 1.37%)</title><rect x="91.1810%" y="389" width="1.3726%" height="15" fill="rgb(208,226,15)" fg:x="1865467093" fg:w="28082490"/><text x="91.4310%" y="399.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (28,082,490 samples, 1.37%)</title><rect x="91.1810%" y="373" width="1.3726%" height="15" fill="rgb(217,221,4)" fg:x="1865467093" fg:w="28082490"/><text x="91.4310%" y="383.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (22,685,661 samples, 1.11%)</title><rect x="91.4448%" y="357" width="1.1088%" height="15" fill="rgb(212,174,34)" fg:x="1870863922" fg:w="22685661"/><text x="91.6948%" y="367.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (6,382,016 samples, 0.31%)</title><rect x="92.2417%" y="341" width="0.3119%" height="15" fill="rgb(253,83,4)" fg:x="1887167567" fg:w="6382016"/><text x="92.4917%" y="351.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::unpack (6,382,016 samples, 0.31%)</title><rect x="92.2417%" y="325" width="0.3119%" height="15" fill="rgb(250,195,49)" fg:x="1887167567" fg:w="6382016"/><text x="92.4917%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::with_addr (6,382,016 samples, 0.31%)</title><rect x="92.2417%" y="309" width="0.3119%" height="15" fill="rgb(241,192,25)" fg:x="1887167567" fg:w="6382016"/><text x="92.4917%" y="319.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (6,382,016 samples, 0.31%)</title><rect x="92.2417%" y="293" width="0.3119%" height="15" fill="rgb(208,124,10)" fg:x="1887167567" fg:w="6382016"/><text x="92.4917%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6,245,266 samples, 0.31%)</title><rect x="93.0184%" y="357" width="0.3053%" height="15" fill="rgb(222,33,0)" fg:x="1903057309" fg:w="6245266"/><text x="93.2684%" y="367.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child::{{closure}} (3,030,881 samples, 0.15%)</title><rect x="93.1755%" y="341" width="0.1481%" height="15" fill="rgb(234,209,28)" fg:x="1906271694" fg:w="3030881"/><text x="93.4255%" y="351.50"></text></g><g><title>&lt;pathmap::dense_byte_node::OrdinaryCoFree&lt;V,A&gt; as pathmap::dense_byte_node::CoFree&gt;::rec (3,030,881 samples, 0.15%)</title><rect x="93.1755%" y="325" width="0.1481%" height="15" fill="rgb(224,11,23)" fg:x="1906271694" fg:w="3030881"/><text x="93.4255%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3,030,881 samples, 0.15%)</title><rect x="93.1755%" y="309" width="0.1481%" height="15" fill="rgb(232,99,1)" fg:x="1906271694" fg:w="3030881"/><text x="93.4255%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3,498,144 samples, 0.17%)</title><rect x="93.3237%" y="341" width="0.1710%" height="15" fill="rgb(237,95,45)" fg:x="1909302575" fg:w="3498144"/><text x="93.5737%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,498,144 samples, 0.17%)</title><rect x="93.3237%" y="325" width="0.1710%" height="15" fill="rgb(208,109,11)" fg:x="1909302575" fg:w="3498144"/><text x="93.5737%" y="335.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (19,441,085 samples, 0.95%)</title><rect x="92.8655%" y="373" width="0.9502%" height="15" fill="rgb(216,190,48)" fg:x="1899928827" fg:w="19441085"/><text x="93.1155%" y="383.50"></text></g><g><title>pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt;::get (10,067,337 samples, 0.49%)</title><rect x="93.3237%" y="357" width="0.4921%" height="15" fill="rgb(251,171,36)" fg:x="1909302575" fg:w="10067337"/><text x="93.5737%" y="367.50"></text></g><g><title>pathmap::utils::ByteMask::index_of (6,569,193 samples, 0.32%)</title><rect x="93.4946%" y="341" width="0.3211%" height="15" fill="rgb(230,62,22)" fg:x="1912800719" fg:w="6569193"/><text x="93.7446%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15,689,711 samples, 0.77%)</title><rect x="94.4396%" y="357" width="0.7669%" height="15" fill="rgb(225,114,35)" fg:x="1932132888" fg:w="15689711"/><text x="94.6896%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (15,689,711 samples, 0.77%)</title><rect x="94.4396%" y="341" width="0.7669%" height="15" fill="rgb(215,118,42)" fg:x="1932132888" fg:w="15689711"/><text x="94.6896%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (15,689,711 samples, 0.77%)</title><rect x="94.4396%" y="325" width="0.7669%" height="15" fill="rgb(243,119,21)" fg:x="1932132888" fg:w="15689711"/><text x="94.6896%" y="335.50"></text></g><g><title>[libc.so.6] (15,689,711 samples, 0.77%)</title><rect x="94.4396%" y="309" width="0.7669%" height="15" fill="rgb(252,177,53)" fg:x="1932132888" fg:w="15689711"/><text x="94.6896%" y="319.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_0 (6,516,907 samples, 0.32%)</title><rect x="95.2064%" y="341" width="0.3185%" height="15" fill="rgb(237,209,29)" fg:x="1947822599" fg:w="6516907"/><text x="95.4564%" y="351.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_child (63,671,863 samples, 3.11%)</title><rect x="92.5537%" y="389" width="3.1122%" height="15" fill="rgb(212,65,23)" fg:x="1893549583" fg:w="63671863"/><text x="92.8037%" y="399.50">pat..</text></g><g><title>&lt;pathmap::line_list_node::LineListNode&lt;V,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_child (37,851,534 samples, 1.85%)</title><rect x="93.8157%" y="373" width="1.8501%" height="15" fill="rgb(230,222,46)" fg:x="1919369912" fg:w="37851534"/><text x="94.0657%" y="383.50">&lt;..</text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_unchecked (9,398,847 samples, 0.46%)</title><rect x="95.2064%" y="357" width="0.4594%" height="15" fill="rgb(215,135,32)" fg:x="1947822599" fg:w="9398847"/><text x="95.4564%" y="367.50"></text></g><g><title>pathmap::line_list_node::LineListNode&lt;V,A&gt;::key_len_1 (2,881,940 samples, 0.14%)</title><rect x="95.5250%" y="341" width="0.1409%" height="15" fill="rgb(246,101,22)" fg:x="1954339506" fg:w="2881940"/><text x="95.7750%" y="351.50"></text></g><g><title>pathmap::zipper::node_along_path (103,984,640 samples, 5.08%)</title><rect x="90.8769%" y="405" width="5.0826%" height="15" fill="rgb(206,107,13)" fg:x="1859243645" fg:w="103984640"/><text x="91.1269%" y="415.50">pathma..</text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::node_get_val (6,006,839 samples, 0.29%)</title><rect x="95.6658%" y="389" width="0.2936%" height="15" fill="rgb(250,100,44)" fg:x="1957221446" fg:w="6006839"/><text x="95.9158%" y="399.50"></text></g><g><title>&lt;pathmap::dense_byte_node::ByteNode&lt;Cf,A&gt; as pathmap::trie_node::TrieNode&lt;V,A&gt;&gt;::node_get_val (3,077,759 samples, 0.15%)</title><rect x="95.8090%" y="373" width="0.1504%" height="15" fill="rgb(231,147,38)" fg:x="1960150526" fg:w="3077759"/><text x="96.0590%" y="383.50"></text></g><g><title>pathmap::trie_map::PathMap&lt;V,A&gt;::read_zipper_at_path (168,479,852 samples, 8.24%)</title><rect x="88.6607%" y="453" width="8.2350%" height="15" fill="rgb(229,8,40)" fg:x="1813904307" fg:w="168479852"/><text x="88.9107%" y="463.50">pathmap::tr..</text></g><g><title>pathmap::zipper::ReadZipperUntracked&lt;V,A&gt;::new_with_node_and_cloned_path_in (152,283,182 samples, 7.44%)</title><rect x="89.4524%" y="437" width="7.4434%" height="15" fill="rgb(221,135,30)" fg:x="1830100977" fg:w="152283182"/><text x="89.7024%" y="447.50">pathmap::z..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_cloned_path_in (152,283,182 samples, 7.44%)</title><rect x="89.4524%" y="421" width="7.4434%" height="15" fill="rgb(249,193,18)" fg:x="1830100977" fg:w="152283182"/><text x="89.7024%" y="431.50">pathmap::z..</text></g><g><title>pathmap::zipper::read_zipper_core::ReadZipperCore&lt;V,A&gt;::new_with_node_and_path_internal_in (19,155,874 samples, 0.94%)</title><rect x="95.9595%" y="405" width="0.9363%" height="15" fill="rgb(209,133,39)" fg:x="1963228285" fg:w="19155874"/><text x="96.2095%" y="415.50"></text></g><g><title>pathmap::trie_node::opaque_dyn_rc_trie_node::TrieNodeODRc&lt;V,A&gt;::as_tagged (6,374,315 samples, 0.31%)</title><rect x="96.5842%" y="389" width="0.3116%" height="15" fill="rgb(232,100,14)" fg:x="1976009844" fg:w="6374315"/><text x="96.8342%" y="399.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::as_tagged (6,374,315 samples, 0.31%)</title><rect x="96.5842%" y="373" width="0.3116%" height="15" fill="rgb(224,185,1)" fg:x="1976009844" fg:w="6374315"/><text x="96.8342%" y="383.50"></text></g><g><title>pathmap::trie_node::tagged_node_ref::TaggedNodeRef&lt;V,A&gt;::from_slim_ptr (6,374,315 samples, 0.31%)</title><rect x="96.5842%" y="357" width="0.3116%" height="15" fill="rgb(223,139,8)" fg:x="1976009844" fg:w="6374315"/><text x="96.8342%" y="367.50"></text></g><g><title>pathmap::trie_node::slim_node_ptr::SlimNodePtr&lt;V,A&gt;::get_raw_parts (3,232,699 samples, 0.16%)</title><rect x="96.7378%" y="341" width="0.1580%" height="15" fill="rgb(232,213,38)" fg:x="1979151460" fg:w="3232699"/><text x="96.9878%" y="351.50"></text></g><g><title>profile_workload::main (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="453" width="0.6302%" height="15" fill="rgb(207,94,22)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="437" width="0.6302%" height="15" fill="rgb(219,183,54)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="421" width="0.6302%" height="15" fill="rgb(216,185,54)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="405" width="0.6302%" height="15" fill="rgb(254,217,39)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="389" width="0.6302%" height="15" fill="rgb(240,178,23)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="373" width="0.6302%" height="15" fill="rgb(218,11,47)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="357" width="0.6302%" height="15" fill="rgb(218,51,51)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="341" width="0.6302%" height="15" fill="rgb(238,126,27)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="325" width="0.6302%" height="15" fill="rgb(249,202,22)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="335.50"></text></g><g><title>[libc.so.6] (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="309" width="0.6302%" height="15" fill="rgb(254,195,49)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="319.50"></text></g><g><title>[libc.so.6] (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="293" width="0.6302%" height="15" fill="rgb(208,123,14)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="303.50"></text></g><g><title>[libc.so.6] (12,894,124 samples, 0.63%)</title><rect x="96.8958%" y="277" width="0.6302%" height="15" fill="rgb(224,200,8)" fg:x="1982384159" fg:w="12894124"/><text x="97.1458%" y="287.50"></text></g><g><title>[libc.so.6] (3,348,315 samples, 0.16%)</title><rect x="97.3623%" y="261" width="0.1637%" height="15" fill="rgb(217,61,36)" fg:x="1991929968" fg:w="3348315"/><text x="97.6123%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,919,504 samples, 0.14%)</title><rect x="97.5260%" y="405" width="0.1427%" height="15" fill="rgb(206,35,45)" fg:x="1995278283" fg:w="2919504"/><text x="97.7760%" y="415.50"></text></g><g><title>malloc (2,919,504 samples, 0.14%)</title><rect x="97.5260%" y="389" width="0.1427%" height="15" fill="rgb(217,65,33)" fg:x="1995278283" fg:w="2919504"/><text x="97.7760%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="309" width="1.7236%" height="15" fill="rgb(222,158,48)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="293" width="1.7236%" height="15" fill="rgb(254,2,54)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="277" width="1.7236%" height="15" fill="rgb(250,143,38)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="261" width="1.7236%" height="15" fill="rgb(248,25,0)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="245" width="1.7236%" height="15" fill="rgb(206,152,27)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="229" width="1.7236%" height="15" fill="rgb(240,77,30)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="213" width="1.7236%" height="15" fill="rgb(231,5,3)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="197" width="1.7236%" height="15" fill="rgb(207,226,32)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="207.50"></text></g><g><title>alloc::alloc::realloc (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="181" width="1.7236%" height="15" fill="rgb(222,207,47)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="165" width="1.7236%" height="15" fill="rgb(229,115,45)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="149" width="1.7236%" height="15" fill="rgb(224,191,6)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="159.50"></text></g><g><title>realloc (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="133" width="1.7236%" height="15" fill="rgb(230,227,24)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="143.50"></text></g><g><title>[libc.so.6] (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="117" width="1.7236%" height="15" fill="rgb(228,80,19)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="127.50"></text></g><g><title>[libc.so.6] (35,263,136 samples, 1.72%)</title><rect x="97.6687%" y="101" width="1.7236%" height="15" fill="rgb(247,229,0)" fg:x="1998197787" fg:w="35263136"/><text x="97.9187%" y="111.50"></text></g><g><title>[libc.so.6] (32,055,225 samples, 1.57%)</title><rect x="97.8255%" y="85" width="1.5668%" height="15" fill="rgb(237,194,15)" fg:x="2001405698" fg:w="32055225"/><text x="98.0755%" y="95.50"></text></g><g><title>[libc.so.6] (9,712,429 samples, 0.47%)</title><rect x="98.9176%" y="69" width="0.4747%" height="15" fill="rgb(219,203,20)" fg:x="2023748494" fg:w="9712429"/><text x="99.1676%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (38,423,920 samples, 1.88%)</title><rect x="97.6687%" y="405" width="1.8781%" height="15" fill="rgb(234,128,8)" fg:x="1998197787" fg:w="38423920"/><text x="97.9187%" y="415.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (38,423,920 samples, 1.88%)</title><rect x="97.6687%" y="389" width="1.8781%" height="15" fill="rgb(248,202,8)" fg:x="1998197787" fg:w="38423920"/><text x="97.9187%" y="399.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38,423,920 samples, 1.88%)</title><rect x="97.6687%" y="373" width="1.8781%" height="15" fill="rgb(206,104,37)" fg:x="1998197787" fg:w="38423920"/><text x="97.9187%" y="383.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (38,423,920 samples, 1.88%)</title><rect x="97.6687%" y="357" width="1.8781%" height="15" fill="rgb(223,8,27)" fg:x="1998197787" fg:w="38423920"/><text x="97.9187%" y="367.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (38,423,920 samples, 1.88%)</title><rect x="97.6687%" y="341" width="1.8781%" height="15" fill="rgb(216,217,28)" fg:x="1998197787" fg:w="38423920"/><text x="97.9187%" y="351.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (38,423,920 samples, 1.88%)</title><rect x="97.6687%" y="325" width="1.8781%" height="15" fill="rgb(249,199,1)" fg:x="1998197787" fg:w="38423920"/><text x="97.9187%" y="335.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::query::CandidateIterator&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (3,160,784 samples, 0.15%)</title><rect x="99.3923%" y="309" width="0.1545%" height="15" fill="rgb(240,85,17)" fg:x="2033460923" fg:w="3160784"/><text x="99.6423%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;liblevenshtein::transducer::query::QueryIterator&lt;liblevenshtein::dictionary::pathmap::PathMapNode&gt;&gt; (3,160,784 samples, 0.15%)</title><rect x="99.3923%" y="293" width="0.1545%" height="15" fill="rgb(206,108,45)" fg:x="2033460923" fg:w="3160784"/><text x="99.6423%" y="303.50"></text></g><g><title>[libc.so.6] (3,160,784 samples, 0.15%)</title><rect x="99.3923%" y="277" width="0.1545%" height="15" fill="rgb(245,210,41)" fg:x="2033460923" fg:w="3160784"/><text x="99.6423%" y="287.50"></text></g><g><title>[libc.so.6] (3,160,784 samples, 0.15%)</title><rect x="99.3923%" y="261" width="0.1545%" height="15" fill="rgb(206,13,37)" fg:x="2033460923" fg:w="3160784"/><text x="99.6423%" y="271.50"></text></g><g><title>all (2,045,893,542 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(250,61,18)" fg:x="0" fg:w="2045893542"/><text x="0.2500%" y="495.50"></text></g><g><title>profile_workloa (2,045,893,542 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(235,172,48)" fg:x="0" fg:w="2045893542"/><text x="0.2500%" y="479.50">profile_workloa</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (50,615,259 samples, 2.47%)</title><rect x="97.5260%" y="453" width="2.4740%" height="15" fill="rgb(249,201,17)" fg:x="1995278283" fg:w="50615259"/><text x="97.7760%" y="463.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (50,615,259 samples, 2.47%)</title><rect x="97.5260%" y="437" width="2.4740%" height="15" fill="rgb(219,208,6)" fg:x="1995278283" fg:w="50615259"/><text x="97.7760%" y="447.50">co..</text></g><g><title>profile_workload::main (50,615,259 samples, 2.47%)</title><rect x="97.5260%" y="421" width="2.4740%" height="15" fill="rgb(248,31,23)" fg:x="1995278283" fg:w="50615259"/><text x="97.7760%" y="431.50">pr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="405" width="0.4532%" height="15" fill="rgb(245,15,42)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="389" width="0.4532%" height="15" fill="rgb(222,217,39)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="373" width="0.4532%" height="15" fill="rgb(210,219,27)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="357" width="0.4532%" height="15" fill="rgb(252,166,36)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="341" width="0.4532%" height="15" fill="rgb(245,132,34)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="325" width="0.4532%" height="15" fill="rgb(236,54,3)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="309" width="0.4532%" height="15" fill="rgb(241,173,43)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="293" width="0.4532%" height="15" fill="rgb(215,190,9)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="303.50"></text></g><g><title>[libc.so.6] (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="277" width="0.4532%" height="15" fill="rgb(242,101,16)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="287.50"></text></g><g><title>[libc.so.6] (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="261" width="0.4532%" height="15" fill="rgb(223,190,21)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="271.50"></text></g><g><title>[libc.so.6] (9,271,835 samples, 0.45%)</title><rect x="99.5468%" y="245" width="0.4532%" height="15" fill="rgb(215,228,25)" fg:x="2036621707" fg:w="9271835"/><text x="99.7968%" y="255.50"></text></g></svg></svg>