   Compiling liblevenshtein v0.1.0 (/home/dylon/Workspace/f1r3fly.io/liblevenshtein-rust)
warning: variable does not need to be mutable
  --> benches/dawg_benchmarks.rs:71:21
   |
71 |                 let mut dawg = DynamicDawg::default();
   |                     ----^^^^
   |                     |
   |                     help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> benches/dawg_benchmarks.rs:160:21
    |
160 |                 let mut dawg_clone = dawg.clone();
    |                     ----^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> benches/dawg_benchmarks.rs:152:13
    |
152 |         let mut dawg = DynamicDawg::default();
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: `liblevenshtein` (bench "dawg_benchmarks") generated 3 warnings (run `cargo fix --bench "dawg_benchmarks"` to apply 3 suggestions)
    Finished `bench` profile [optimized + debuginfo] target(s) in 45.78s
     Running benches/dawg_benchmarks.rs (target/release/deps/dawg_benchmarks-6005c94a1d9b6dc5)
Benchmarking dawg_contains/100
Benchmarking dawg_contains/100: Warming up for 3.0000 s
Benchmarking dawg_contains/100: Collecting 100 samples in estimated 5.0136 s (1.6M iterations)
Benchmarking dawg_contains/100: Analyzing
dawg_contains/100       time:   [2.9162 µs 2.9397 µs 2.9636 µs]
                        thrpt:  [33.743 Melem/s 34.017 Melem/s 34.291 Melem/s]
                 change:
                        time:   [-5.3825% -4.0805% -2.9004%] (p = 0.00 < 0.05)
                        thrpt:  [+2.9870% +4.2540% +5.6887%]
                        Performance has improved.
Benchmarking dawg_contains/500
Benchmarking dawg_contains/500: Warming up for 3.0000 s
Benchmarking dawg_contains/500: Collecting 100 samples in estimated 5.0102 s (1.7M iterations)
Benchmarking dawg_contains/500: Analyzing
dawg_contains/500       time:   [2.8547 µs 2.8702 µs 2.8852 µs]
                        thrpt:  [34.660 Melem/s 34.840 Melem/s 35.029 Melem/s]
                 change:
                        time:   [-9.8295% -8.6893% -7.4311%] (p = 0.00 < 0.05)
                        thrpt:  [+8.0277% +9.5162% +10.901%]
                        Performance has improved.
Found 6 outliers among 100 measurements (6.00%)
  6 (6.00%) high severe
Benchmarking dawg_contains/1000
Benchmarking dawg_contains/1000: Warming up for 3.0000 s
Benchmarking dawg_contains/1000: Collecting 100 samples in estimated 5.0026 s (1.7M iterations)
Benchmarking dawg_contains/1000: Analyzing
dawg_contains/1000      time:   [3.0086 µs 3.0260 µs 3.0450 µs]
                        thrpt:  [32.841 Melem/s 33.047 Melem/s 33.238 Melem/s]
                 change:
                        time:   [-22.380% -21.597% -20.865%] (p = 0.00 < 0.05)
                        thrpt:  [+26.366% +27.546% +28.833%]
                        Performance has improved.
Found 9 outliers among 100 measurements (9.00%)
  1 (1.00%) low mild
  5 (5.00%) high mild
  3 (3.00%) high severe
Benchmarking dawg_contains/5000
Benchmarking dawg_contains/5000: Warming up for 3.0000 s
Benchmarking dawg_contains/5000: Collecting 100 samples in estimated 5.0055 s (1.7M iterations)
Benchmarking dawg_contains/5000: Analyzing
dawg_contains/5000      time:   [3.0394 µs 3.0559 µs 3.0734 µs]
                        thrpt:  [32.537 Melem/s 32.724 Melem/s 32.901 Melem/s]
                 change:
                        time:   [-21.168% -20.473% -19.684%] (p = 0.00 < 0.05)
                        thrpt:  [+24.509% +25.744% +26.853%]
                        Performance has improved.
Found 6 outliers among 100 measurements (6.00%)
  1 (1.00%) low mild
  3 (3.00%) high mild
  2 (2.00%) high severe

